#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo ""
info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º AGB"
echo "=========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
info "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    success "‚úÖ Linux —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
    echo "   –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $(lsb_release -d | cut -f2)"
    echo "   –Ø–¥—Ä–æ: $(uname -r)"
else
    error "‚ùå –°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Linux —Å–∏—Å—Ç–µ–º"
    exit 1
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
info "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version)
    success "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $DOCKER_VERSION"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker
    if docker info &> /dev/null; then
        success "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo systemctl start docker"
        exit 1
    fi
else
    error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker:"
    echo "   curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh"
    exit 1
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
info "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
if command -v docker-compose &> /dev/null; then
    COMPOSE_VERSION=$(docker-compose --version)
    success "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $COMPOSE_VERSION"
else
    error "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose:"
    echo "   sudo curl -L \"https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose"
    echo "   sudo chmod +x /usr/local/bin/docker-compose"
    exit 1
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
info "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
if groups $USER | grep -q docker; then
    success "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –≤ –≥—Ä—É–ø–ø–µ docker"
else
    warning "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –Ω–µ –≤ –≥—Ä—É–ø–ø–µ docker"
    echo "   –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É:"
    echo "   sudo usermod -aG docker $USER"
    echo "   –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
info "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ..."
DISK_SPACE=$(df / | tail -1 | awk '{print $4}')
DISK_SPACE_GB=$((DISK_SPACE / 1024 / 1024))

if [ $DISK_SPACE_GB -gt 10 ]; then
    success "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç–∞: ${DISK_SPACE_GB}GB"
else
    warning "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${DISK_SPACE_GB}GB"
    echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 20GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
info "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏..."
MEM_TOTAL=$(free -m | grep '^Mem:' | awk '{print $2}')
MEM_AVAILABLE=$(free -m | grep '^Mem:' | awk '{print $7}')

if [ $MEM_TOTAL -gt 4000 ]; then
    success "‚úÖ –ü–∞–º—è—Ç—å: ${MEM_TOTAL}MB total, ${MEM_AVAILABLE}MB available"
else
    warning "‚ö†Ô∏è –ú–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: ${MEM_TOTAL}MB"
    echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 4GB RAM"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
info "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
PORTS=(80 3000 8000 5432)

for port in "${PORTS[@]}"; do
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        warning "‚ö†Ô∏è –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç"
        PROCESS=$(lsof -Pi :$port -sTCP:LISTEN | tail -1 | awk '{print $1}')
        echo "   –ü—Ä–æ—Ü–µ—Å—Å: $PROCESS"
    else
        success "‚úÖ –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
done

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
info "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."
FILES=("docker-compose.prod.yml" "production.env.example" "deploy.sh")

for file in "${FILES[@]}"; do
    if [[ -f "$file" ]]; then
        success "‚úÖ $file –Ω–∞–π–¥–µ–Ω"
    else
        error "‚ùå $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

echo ""

# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
info "9. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"

if [[ "$OSTYPE" == "linux-gnu"* ]] && command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
    success "üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!"
    echo ""
    info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:"
    echo "   ./deploy.sh"
else
    error "‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º"
    exit 1
fi

echo ""
info "üìã –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã: ./check-system.sh"
echo "   –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:     ./deploy.sh"
echo "   –°—Ç–∞—Ç—É—Å:           ./deploy.sh status"
echo "   –õ–æ–≥–∏:             ./deploy.sh logs"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:        ./deploy.sh stop"
