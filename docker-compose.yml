services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: agb_postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agb_felix}
      POSTGRES_USER: ${POSTGRES_USER:-felix_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-felix_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_db.py:/docker-entrypoint-initdb.d/init_db.py:ro
    ports:
      - "15432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-felix_user} -d ${POSTGRES_DB:-agb_felix}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Бекенд - FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agb_backend
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-felix_user}:${POSTGRES_PASSWORD:-felix_password}@postgres:5432/${POSTGRES_DB:-agb_felix}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@localhost}
      - ADMIN_FIRST_NAME=${ADMIN_FIRST_NAME:-Администратор}
      - ADMIN_LAST_NAME=${ADMIN_LAST_NAME:-Системы}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Фронтенд - Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: agb_frontend
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-}
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: agb_nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
