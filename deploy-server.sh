#!/bin/bash

# üöÄ AGB Project - –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 2.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º Docker..."
    if ! command -v docker &> /dev/null; then
        log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        systemctl start docker
        systemctl enable docker
        rm get-docker.sh
        log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
check_docker_compose() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose..."
    if ! command -v docker-compose &> /dev/null; then
        log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..."
        curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
        log_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ production.env
create_production_env() {
    log_info "–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é production.env..."
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    POSTGRES_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    SECRET_KEY=$(openssl rand -base64 64 | tr -d "=+/" | cut -c1-50)
    ADMIN_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-12)
    N8N_DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    N8N_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-12)
    
    cat > config/env/production.env << EOF
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
POSTGRES_DB=agb_felix_prod
POSTGRES_USER=felix_prod_user
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql://felix_prod_user:${POSTGRES_PASSWORD}@postgres:5432/agb_felix_prod

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECRET_KEY=${SECRET_KEY}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
ADMIN_USERNAME=admin
ADMIN_PASSWORD=${ADMIN_PASSWORD}
ADMIN_EMAIL=admin@localhost
ADMIN_FIRST_NAME=–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
ADMIN_LAST_NAME=–°–∏—Å—Ç–µ–º—ã

# API –∫–ª—é—á–∏ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò!)
OPENAI_API_KEY=your_openai_key_here
POLZA_API_KEY=your_polza_key_here

# –§—Ä–æ–Ω—Ç–µ–Ω–¥
NEXT_PUBLIC_API_URL=http://localhost/api

# N8N
N8N_DB_NAME=n8n_prod
N8N_DB_USER=n8n_prod_user
N8N_DB_PASSWORD=${N8N_DB_PASSWORD}
N8N_USER=admin
N8N_PASSWORD=${N8N_PASSWORD}
N8N_HOST=localhost
N8N_PROTOCOL=http
N8N_WEBHOOK_URL=http://localhost:5678
N8N_LOG_LEVEL=info

# Nginx
NGINX_PORT=80
NGINX_SSL_PORT=443

# –î–æ–º–µ–Ω
DOMAIN=localhost
FRONTEND_URL=http://localhost
BACKEND_URL=http://localhost/api

# SSL
SSL_EMAIL=admin@localhost
EOF

    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ config/env/production.env"
    log_warning "–ù–ï –ó–ê–ë–£–î–¨–¢–ï –∑–∞–º–µ–Ω–∏—Ç—å API –∫–ª—é—á–∏ –≤ config/env/production.env!"
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OCR Dockerfile
fix_ocr_dockerfile() {
    log_info "–ò—Å–ø—Ä–∞–≤–ª—è–µ–º OCR Dockerfile..."
    
    cat > infrastructure/ocr/Dockerfile << 'EOF'
FROM python:3.11-slim

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-rus \
    tesseract-ocr-eng \
    libtesseract-dev \
    libglib2.0-0 \
    libgomp1 \
    libgcc-s1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY requirements.txt /app/
WORKDIR /app
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . /app/

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
RUN mkdir -p /app/uploads/ai_processing

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONPATH=/app
ENV TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
EXPOSE 8001

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
CMD ["python", "main.py"]
EOF

    log_success "OCR Dockerfile –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
cleanup_old_containers() {
    log_info "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker-compose down -v 2>/dev/null || true
    docker system prune -f
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
build_and_deploy() {
    log_info "–°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç..."
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d
    
    log_success "–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if docker-compose exec -T postgres pg_isready -U felix_prod_user -d agb_felix_prod > /dev/null 2>&1; then
        log_success "PostgreSQL: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "PostgreSQL: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; then
        log_success "Redis: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "Redis: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
    if curl -f http://localhost:8000/api/health > /dev/null 2>&1; then
        log_success "Backend: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:8000)"
    else
        log_warning "Backend: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
    if curl -f http://localhost:3000 > /dev/null 2>&1; then
        log_success "Frontend: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:3000)"
    else
        log_warning "Frontend: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
    if curl -f http://localhost > /dev/null 2>&1; then
        log_success "Nginx: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost)"
    else
        log_warning "Nginx: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    echo ""
    echo "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
    echo "=================================="
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
    echo "   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost"
    echo "   ‚Ä¢ API: http://localhost/api"
    echo "   ‚Ä¢ Backend (–ø—Ä—è–º–æ–π): http://localhost:8000"
    echo "   ‚Ä¢ Frontend (–ø—Ä—è–º–æ–π): http://localhost:3000"
    echo ""
    echo "üë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
    echo "   ‚Ä¢ –õ–æ–≥–∏–Ω: admin"
    echo "   ‚Ä¢ –ü–∞—Ä–æ–ª—å: $(grep ADMIN_PASSWORD config/env/production.env | cut -d'=' -f2)"
    echo ""
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose ps"
    echo "   ‚Ä¢ –õ–æ–≥–∏: docker-compose logs -f"
    echo "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
    echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo ""
    echo "‚ö†Ô∏è  –í–ê–ñ–ù–û:"
    echo "   ‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ config/env/production.env"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL –¥–ª—è production"
    echo "   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ AGB Project - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "=============================================="
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_root
    check_docker
    check_docker_compose
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    create_production_env
    fix_ocr_dockerfile
    cleanup_old_containers
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    build_and_deploy
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    log_info "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
    sleep 60
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    check_status
    show_access_info
}

# –ó–∞–ø—É—Å–∫
main "$@"
