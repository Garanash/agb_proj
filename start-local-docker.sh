#!/bin/bash

echo "=== –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê –í DOCKER ==="
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
pkill -f uvicorn 2>/dev/null || true
pkill -f "npm run dev" 2>/dev/null || true
pkill -f "next dev" 2>/dev/null || true
docker stop agb_postgres_local 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
print_status "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.local.yml down 2>/dev/null || true

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
print_status "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker..."
docker-compose -f docker-compose.local.yml up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
print_status "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps | grep agb

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks
print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ health checks:"

# PostgreSQL
if docker exec agb_postgres_local pg_isready -U felix_dev_user -d agb_felix_dev >/dev/null 2>&1; then
    print_success "PostgreSQL: ‚úÖ Healthy"
else
    print_error "PostgreSQL: ‚ùå Unhealthy"
fi

# Redis
if docker exec agb_redis_local redis-cli ping >/dev/null 2>&1; then
    print_success "Redis: ‚úÖ Healthy"
else
    print_error "Redis: ‚ùå Unhealthy"
fi

# Backend
BACKEND_HEALTH=$(curl -s http://localhost:8000/api/health 2>/dev/null | grep -o '"status":"healthy"' || echo "")
if [ "$BACKEND_HEALTH" = '"status":"healthy"' ]; then
    print_success "Backend: ‚úÖ Healthy"
else
    print_error "Backend: ‚ùå Unhealthy"
fi

# Frontend
FRONTEND_RESPONSE=$(curl -s http://localhost:3000 2>/dev/null | head -1 || echo "")
if [[ "$FRONTEND_RESPONSE" == *"<!DOCTYPE html>"* ]]; then
    print_success "Frontend: ‚úÖ Healthy"
else
    print_error "Frontend: ‚ùå Unhealthy"
fi

# Nginx
NGINX_RESPONSE=$(curl -s http://localhost 2>/dev/null | head -1 || echo "")
if [[ "$NGINX_RESPONSE" == *"<!DOCTYPE html>"* ]]; then
    print_success "Nginx: ‚úÖ Healthy"
else
    print_error "Nginx: ‚ùå Unhealthy"
fi

echo ""

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –∞–¥–º–∏–Ω–∞
print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
docker exec agb_backend_local python3 -c "
from database import async_engine, Base
from models import *
import asyncio

async def create_tables():
    try:
        print('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...')
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            print('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}')

asyncio.run(create_tables())
"

docker exec agb_backend_local python3 scripts/create_admin.py

echo ""

# –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
print_status "–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞:"
LOGIN_RESPONSE=$(curl -X POST http://localhost:8000/api/v1/auth/login \
    -H "Content-Type: application/json" \
    -d '{"username": "admin", "password": "admin123"}' \
    -s 2>/dev/null)

if [[ "$LOGIN_RESPONSE" == *"access_token"* ]]; then
    print_success "Login: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "Login: ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "Response: $LOGIN_RESPONSE"
fi

echo ""

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
print_status "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"

echo "üåê Frontend: http://localhost:3000"
echo "üåê Backend: http://localhost:8000"
echo "üåê Nginx: http://localhost"
echo "üåê Database: localhost:15432"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
if curl -s http://localhost:3000 >/dev/null 2>&1; then
    print_success "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000"
fi

if curl -s http://localhost:8000/api/health >/dev/null 2>&1; then
    print_success "Backend –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000"
fi

if curl -s http://localhost >/dev/null 2>&1; then
    print_success "Nginx –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost"
fi

echo ""
print_success "=== –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê –í DOCKER –ó–ê–ü–£–©–ï–ù–ê ==="
echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  docker-compose -f docker-compose.local.yml logs -f [service]  # –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"
echo "  docker-compose -f docker-compose.local.yml restart [service]  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"
echo "  docker-compose -f docker-compose.local.yml down               # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  docker-compose -f docker-compose.local.yml up -d              # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo ""
echo "üîß –õ–æ–≥–∏–Ω: admin / admin123"
