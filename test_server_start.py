#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ backend —Å–µ—Ä–≤–µ—Ä–∞
"""
import asyncio
import sys
import os
import signal
import time
from multiprocessing import Process

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/Users/andreydolgov/Desktop/programming/agb_proj/backend')

def start_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        from main import app
        import uvicorn
        uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()

async def test_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    server_process = Process(target=start_server)
    server_process.start()

    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await asyncio.sleep(3)

    try:
        import httpx

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
        async with httpx.AsyncClient(timeout=5.0) as client:
            print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/health...")
            response = await client.get("http://127.0.0.1:8000/api/health")
            if response.status_code == 200:
                print("‚úÖ /api/health —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå /api/health: {response.status_code}")

            print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/...")
            response = await client.get("http://127.0.0.1:8000/api/")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ /api/ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {len(data.get('endpoints', {}))} endpoints")
            else:
                print(f"‚ùå /api/: {response.status_code}")

            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/debug/routes...")
            response = await client.get("http://127.0.0.1:8000/api/debug/routes")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ /api/debug/routes —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {data.get('total', 0)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
            else:
                print(f"‚ùå /api/debug/routes: {response.status_code}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if server_process.is_alive():
            server_process.terminate()
            server_process.join(timeout=5)

if __name__ == "__main__":
    try:
        result = asyncio.run(test_server())
        if result:
            print("üéâ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            sys.exit(0)
        else:
            print("üí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
