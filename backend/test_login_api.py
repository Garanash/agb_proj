import asyncio
import httpx
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞"""
    return pwd_context.hash(password)

async def test_login_api():
    """–¢–µ—Å—Ç API –ª–æ–≥–∏–Ω–∞"""
    base_url = "http://localhost:8000"

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–¥–æ—Ä–æ–≤—å–µ API
        async with httpx.AsyncClient() as client:
            health_response = await client.get(f"{base_url}/api/health")
            print(f"Health check: {health_response.status_code}")
            print(f"Health response: {health_response.json()}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
            login_attempts = [
                {"username": "admin", "password": "admin"},
                {"username": "admin", "password": "admin123"},
                {"username": "admin", "password": "password"}
            ]

            for attempt in login_attempts:
                print(f"\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω: {attempt['username']} / {attempt['password']}")

                try:
                    response = await client.post(
                        f"{base_url}/api/auth/login",
                        json=attempt,
                        timeout=10.0
                    )

                    print(f"Status: {response.status_code}")
                    print(f"Response: {response.json()}")

                    if response.status_code == 200:
                        data = response.json()
                        if "access_token" in data:
                            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                            return True
                        else:
                            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.json()}")

                except httpx.RequestError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(test_login_api())
    if result:
        print("\nüéâ –õ–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\n‚ùå –õ–æ–≥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
