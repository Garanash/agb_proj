#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from database import get_db
from api.v1.endpoints.article_matching import step_upload_file, perform_matching
from models import ContractorRequest, ContractorRequestItem
from sqlalchemy import select

async def test_full_matching():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    
    print("üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤\n")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file_path = Path("/Users/andreydolgov/Desktop/programming/agb_proj/test_articles_new.txt")
    if not test_file_path.exists():
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(test_file_path, 'r', encoding='utf-8') as f:
        test_content = f.read()
    
    print("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:")
    print(test_content)
    print()
    
    async for db in get_db():
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
            from datetime import datetime
            from models import User
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            result = await db.execute(select(User).limit(1))
            user = result.scalar_one_or_none()
            if not user:
                print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            request = ContractorRequest(
                request_number="TEST_001_20241201",
                contractor_name="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
                request_date=datetime.now(),
                total_items=0,
                status='new',
                created_by=user.id
            )
            
            db.add(request)
            await db.flush()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {request.request_number}")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞—è–≤–∫–∏
            from api.v1.endpoints.article_matching import parse_item_string
            
            lines = [line.strip() for line in test_content.strip().split('\n') if line.strip()]
            items = []
            
            for i, line in enumerate(lines, 1):
                if len(line) > 4:
                    parsed = parse_item_string(line)
                    
                    item = ContractorRequestItem(
                        request_id=request.id,
                        line_number=i,
                        contractor_article=parsed['article'],
                        description=parsed['description'],
                        quantity=parsed['quantity'],
                        unit=parsed['unit'],
                        category="–¢–µ—Å—Ç"
                    )
                    db.add(item)
                    items.append(item)
                    
                    print(f"üìù –°—Ç—Ä–æ–∫–∞ {i}: –∞—Ä—Ç–∏–∫—É–ª='{parsed['article']}', –æ–ø–∏—Å–∞–Ω–∏–µ='{parsed['description']}', –∫–æ–ª-–≤–æ={parsed['quantity']} {parsed['unit']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            request.total_items = len(items)
            await db.commit()
            
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∫–∏")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ...")
            matching_results = await perform_matching(request.id, db)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
            print(f"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {matching_results.get('total_items', 0)}")
            print(f"  –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {matching_results.get('matched_items', 0)}")
            print(f"  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {matching_results.get('unmatched_items', 0)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            if matching_results.get('results'):
                print(f"\nüìã –î–µ—Ç–∞–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
                for result in matching_results['results'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"  ‚Ä¢ {result.get('contractor_article', 'N/A')} -> {result.get('agb_article', 'N/A')} ({result.get('match_confidence', 0)}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            from models import ArticleMapping
            result = await db.execute(select(ArticleMapping))
            mappings = result.scalars().all()
            
            print(f"\nüíæ –°–æ–∑–¥–∞–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: {len(mappings)}")
            for mapping in mappings[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"  ‚Ä¢ {mapping.contractor_article} -> {mapping.agb_article} ({mapping.match_confidence}%)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await db.close()
        break

if __name__ == "__main__":
    asyncio.run(test_full_matching())
