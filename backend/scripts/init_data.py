"""
–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ü–†–ò –ó–ê–ü–£–°–ö–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from passlib.context import CryptContext
from datetime import datetime, timedelta

from models import (
    User, Department, CompanyEmployee, News, Event, EventParticipant,
    ChatBot, ChatRoom, ChatParticipant, ChatMessage, ChatFolder,
    VEDNomenclature, VedPassport,
    CustomerProfile, ContractorProfile, RepairRequest, ContractorResponse,
    UserRole, RequestStatus, ResponseStatus,
    TelegramBot, TelegramUser
)
from database import get_db

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

async def init_database_data(db_session):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•...")

    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    users_count = 0
    employees_count = 0
    nomenclatures_count = 0
    passports_count = 0
    news_count = 0
    events_count = 0

    try:
        # 1. –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤...")
        departments_result = await db_session.execute(select(Department))
        existing_departments = departments_result.scalars().all()

        if not existing_departments:
            departments_data = [
                {"name": "–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"},
                {"name": "–û—Ç–¥–µ–ª –±—É—Ä–µ–Ω–∏—è", "description": "–ë—É—Ä–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"},
                {"name": "–û—Ç–¥–µ–ª –≥–µ–æ–ª–æ–≥–∏–∏", "description": "–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"},
                {"name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª"},
            ]

            departments = []
            for dept_data in departments_data:
                dept = Department(**dept_data)
                db_session.add(dept)
                departments.append(dept)

            await db_session.flush()
        else:
            departments = existing_departments

        # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        admin_result = await db_session.execute(select(User).where(User.username == "admin"))
        admin_exists = admin_result.scalar_one_or_none()

        if not admin_exists:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            dept_dev_result = await db_session.execute(select(Department).where(Department.name == "–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"))
            dept_dev = dept_dev_result.scalar_one_or_none()
            if not dept_dev:
                dept_dev = Department(
                    name="–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    description="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"
                )
                db_session.add(dept_dev)
                await db_session.flush()

            admin_user = User(
                username="admin",
                email="admin@almazgeobur.ru",
                first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                last_name="–°–∏—Å—Ç–µ–º—ã",
                middle_name="",
                hashed_password=get_password_hash("admin123"),
                role="admin",
                department_id=dept_dev.id,
                position="–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                is_active=True
            )
            db_session.add(admin_user)
            users_count += 1

        test_result = await db_session.execute(select(User).where(User.username == "testuser"))
        test_exists = test_result.scalar_one_or_none()

        if not test_exists:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª –±—É—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            dept_bur_result = await db_session.execute(select(Department).where(Department.name == "–û—Ç–¥–µ–ª –±—É—Ä–µ–Ω–∏—è"))
            dept_bur = dept_bur_result.scalar_one_or_none()
            if not dept_bur:
                dept_bur = Department(
                    name="–û—Ç–¥–µ–ª –±—É—Ä–µ–Ω–∏—è",
                    description="–ë—É—Ä–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
                )
                db_session.add(dept_bur)
                await db_session.flush()

            test_user = User(
                username="testuser",
                email="test@almazgeobur.ru",
                first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                middle_name="–ò–≤–∞–Ω–æ–≤–∏—á",
                hashed_password=get_password_hash("test123"),
                role="user",
                department_id=dept_bur.id,
                position="–ò–Ω–∂–µ–Ω–µ—Ä",
                is_active=True
            )
            db_session.add(test_user)
            users_count += 1

        await db_session.flush()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        admin_result = await db_session.execute(select(User).where(User.username == "admin"))
        admin_user = admin_result.scalar_one_or_none()

        test_result = await db_session.execute(select(User).where(User.username == "testuser"))
        test_user = test_result.scalar_one_or_none()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
        if admin_user:
            dept_dev_result = await db_session.execute(select(Department).where(Department.name == "–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"))
            dept_dev = dept_dev_result.scalar_one_or_none()
            if dept_dev:
                dept_dev.head_id = admin_user.id

        if test_user:
            dept_bur_result = await db_session.execute(select(Department).where(Department.name == "–û—Ç–¥–µ–ª –±—É—Ä–µ–Ω–∏—è"))
            dept_bur = dept_bur_result.scalar_one_or_none()
            if dept_bur:
                dept_bur.head_id = test_user.id

        # 3. –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        employees_result = await db_session.execute(select(CompanyEmployee))
        existing_employees = employees_result.scalars().all()

        if not existing_employees:
            employees_data = [
                {
                    "first_name": "–ò–≤–∞–Ω", "last_name": "–ò–≤–∞–Ω–æ–≤", "middle_name": "–ò–≤–∞–Ω–æ–≤–∏—á",
                    "position": "–ì–µ–æ–ª–æ–≥", "department_id": departments[2].id if len(departments) > 2 else 3,
                    "email": "ivan@almazgeobur.ru", "phone": "+7-999-111-11-11"
                },
                {
                    "first_name": "–ü–µ—Ç—Ä", "last_name": "–ü–µ—Ç—Ä–æ–≤", "middle_name": "–ü–µ—Ç—Ä–æ–≤–∏—á",
                    "position": "–ë—É—Ä–æ–≤–∏–∫", "department_id": departments[1].id if len(departments) > 1 else 2,
                    "email": "petr@almazgeobur.ru", "phone": "+7-999-222-22-22"
                },
                {
                    "first_name": "–°–∏–¥–æ—Ä", "last_name": "–°–∏–¥–æ—Ä–æ–≤", "middle_name": "–°–∏–¥–æ—Ä–æ–≤–∏—á",
                    "position": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "department_id": departments[0].id if departments else 1,
                    "email": "sidor@almazgeobur.ru", "phone": "+7-999-333-33-33"
                },
                {
                    "first_name": "–ê–Ω–Ω–∞", "last_name": "–ö—É–∑–Ω–µ—Ü–æ–≤–∞", "middle_name": "–°–µ—Ä–≥–µ–µ–≤–Ω–∞",
                    "position": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", "department_id": departments[3].id if len(departments) > 3 else 4,
                    "email": "anna@almazgeobur.ru", "phone": "+7-999-444-44-44"
                }
            ]

            employees = []
            for emp_data in employees_data:
                emp = CompanyEmployee(**emp_data)
                db_session.add(emp)
                employees.append(emp)
        else:
            employees = existing_employees

        # 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –í–≠–î (–µ—Å–ª–∏ –µ–µ –Ω–µ—Ç)
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –í–≠–î...")
        nomenclature_result = await db_session.execute(select(VEDNomenclature))
        existing_nomenclature = nomenclature_result.scalars().all()

        if not existing_nomenclature:
            nomenclature_data = [
                {
                    "code_1c": "–£–¢-00047870", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ 03-05 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501040", "matrix": "NQ", "drilling_depth": "03-05",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047871", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ 05-07 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501041", "matrix": "NQ", "drilling_depth": "05-07",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047872", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ 07-09 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501042", "matrix": "NQ", "drilling_depth": "07-09",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047873", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ 09-12 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501043", "matrix": "NQ", "drilling_depth": "09-12",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047874", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ 11-13 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501044", "matrix": "NQ", "drilling_depth": "11-13",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047875", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ 03-05 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501045", "matrix": "HQ", "drilling_depth": "03-05",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047876", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ 05-07 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501046", "matrix": "HQ", "drilling_depth": "05-07",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047877", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ 07-09 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501047", "matrix": "HQ", "drilling_depth": "07-09",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047878", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ 09-12 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501048", "matrix": "HQ", "drilling_depth": "09-12",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047879", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ 11-13 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501049", "matrix": "HQ", "drilling_depth": "11-13",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047880", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ 03-05 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501050", "matrix": "PQ", "drilling_depth": "03-05",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047881", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ 05-07 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501051", "matrix": "PQ", "drilling_depth": "05-07",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047882", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ 07-09 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501052", "matrix": "PQ", "drilling_depth": "07-09",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047883", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ 09-12 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501053", "matrix": "PQ", "drilling_depth": "09-12",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047884", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ 11-13 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501054", "matrix": "PQ", "drilling_depth": "11-13",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00047885", "name": "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –∞–ª–º–∞–∑–Ω—ã–π ALFA NQ",
                    "article": "3501055", "matrix": "NQ", "drilling_depth": None,
                    "height": None, "thread": None, "product_type": "—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å"
                },
                {
                    "code_1c": "–£–¢-00047886", "name": "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –∞–ª–º–∞–∑–Ω—ã–π ALFA HQ",
                    "article": "3501056", "matrix": "HQ", "drilling_depth": None,
                    "height": None, "thread": None, "product_type": "—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å"
                },
                {
                    "code_1c": "–£–¢-00047887", "name": "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å –∞–ª–º–∞–∑–Ω—ã–π ALFA PQ",
                    "article": "3501057", "matrix": "PQ", "drilling_depth": None,
                    "height": None, "thread": None, "product_type": "—Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å"
                },
                {
                    "code_1c": "–£–¢-00047888", "name": "–ë–∞—à–º–∞–∫ –æ–±—Å–∞–¥–Ω–æ–π ALFA NW, —Ä–µ–∑—å–±–∞ W",
                    "article": "3501058", "matrix": "NW", "drilling_depth": None,
                    "height": None, "thread": "W", "product_type": "–±–∞—à–º–∞–∫"
                },
                {
                    "code_1c": "–£–¢-00047889", "name": "–ë–∞—à–º–∞–∫ –æ–±—Å–∞–¥–Ω–æ–π ALFA HW, —Ä–µ–∑—å–±–∞ W",
                    "article": "3501059", "matrix": "HW", "drilling_depth": None,
                    "height": None, "thread": "W", "product_type": "–±–∞—à–º–∞–∫"
                },
                {
                    "code_1c": "–£–¢-00047890", "name": "–ë–∞—à–º–∞–∫ –æ–±—Å–∞–¥–Ω–æ–π ALFA HWT, —Ä–µ–∑—å–±–∞ WT",
                    "article": "3501060", "matrix": "HWT", "drilling_depth": None,
                    "height": None, "thread": "WT", "product_type": "–±–∞—à–º–∞–∫"
                },
                {
                    "code_1c": "–£–¢-00047891", "name": "–ë–∞—à–º–∞–∫ –æ–±—Å–∞–¥–Ω–æ–π ALFA PWT, —Ä–µ–∑—å–±–∞ WT",
                    "article": "3501061", "matrix": "PWT", "drilling_depth": None,
                    "height": None, "thread": "WT", "product_type": "–±–∞—à–º–∞–∫"
                },
                {
                    "code_1c": "–£–¢-00050693", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ3 05-07 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501062", "matrix": "HQ3", "drilling_depth": "05-07",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052789", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ3 03-05 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501063", "matrix": "NQ3", "drilling_depth": "03-05",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052790", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ3 05-07 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501064", "matrix": "NQ3", "drilling_depth": "05-07",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052791", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ3 07-09 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501065", "matrix": "NQ3", "drilling_depth": "07-09",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052792", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ3 09-12 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501066", "matrix": "NQ3", "drilling_depth": "09-12",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052793", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA NQ3 11-13 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501067", "matrix": "NQ3", "drilling_depth": "11-13",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052794", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ3 03-05 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501068", "matrix": "HQ3", "drilling_depth": "03-05",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052795", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ3 07-09 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501069", "matrix": "HQ3", "drilling_depth": "07-09",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052796", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ3 09-12 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501070", "matrix": "HQ3", "drilling_depth": "09-12",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052797", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA HQ3 11-13 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501071", "matrix": "HQ3", "drilling_depth": "11-13",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052798", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ3 03-05 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501072", "matrix": "PQ3", "drilling_depth": "03-05",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052799", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ3 05-07 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501073", "matrix": "PQ3", "drilling_depth": "05-07",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052800", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ3 07-09 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501074", "matrix": "PQ3", "drilling_depth": "07-09",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052801", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ3 09-12 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501075", "matrix": "PQ3", "drilling_depth": "09-12",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                },
                {
                    "code_1c": "–£–¢-00052802", "name": "–ö–æ—Ä–æ–Ω–∫–∞ –∏–º–ø—Ä–µ–≥–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ALFA PQ3 11-13 –≤—ã—Å–æ—Ç–∞ 12 –º–º",
                    "article": "3501076", "matrix": "PQ3", "drilling_depth": "11-13",
                    "height": "12 –º–º", "thread": None, "product_type": "–∫–æ—Ä–æ–Ω–∫–∞"
                }
            ]

            nomenclature = []
            for nom_data in nomenclature_data:
                nom = VEDNomenclature(**nom_data)
                db_session.add(nom)
                nomenclature.append(nom)
        else:
            nomenclature = existing_nomenclature

        # 5. –°–æ–∑–¥–∞–µ–º –í–≠–î –ø–∞—Å–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –í–≠–î –ø–∞—Å–ø–æ—Ä—Ç–æ–≤...")
        passports_result = await db_session.execute(select(VedPassport))
        existing_passports = passports_result.scalars().all()

        if not existing_passports and nomenclature:
            passports_data = [
                {
                    "passport_number": "VED-001-2025",
                    "title": "–ü–∞—Å–ø–æ—Ä—Ç –Ω–∞ –∫–æ—Ä–æ–Ω–∫—É HQ-001",
                    "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è –∫–æ—Ä–æ–Ω–∫–∏ HQ",
                    "status": "active",
                    "order_number": "ORD-001",
                    "quantity": 5,
                    "created_by": admin_user.id if admin_user else 1,
                    "nomenclature_id": nomenclature[0].id
                },
                {
                    "passport_number": "VED-002-2025",
                    "title": "–ü–∞—Å–ø–æ—Ä—Ç –Ω–∞ –∫–æ—Ä–æ–Ω–∫—É PQ-001",
                    "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –¥–ª—è –∫–æ—Ä–æ–Ω–∫–∏ PQ",
                    "status": "active",
                    "order_number": "ORD-002",
                    "quantity": 3,
                    "created_by": admin_user.id if admin_user else 1,
                    "nomenclature_id": nomenclature[1].id if len(nomenclature) > 1 else nomenclature[0].id
                }
            ]

            for pass_data in passports_data:
                passport = VedPassport(**pass_data)
                db_session.add(passport)

        # 6. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üì∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news_result = await db_session.execute(select(News))
        existing_news = news_result.scalars().all()

        if not existing_news:
            news_data = [
                {
                    "title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É Felix!",
                    "content": "–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–º–∞–∑–Ω—ã–º –±—É—Ä–µ–Ω–∏–µ–º.",
                    "author_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    "category": "general",
                    "is_published": True,
                    "published_at": datetime.now(),
                    "author_id": admin_user.id if admin_user else 1
                },
                {
                    "title": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                    "content": "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±—É—Ä–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.",
                    "author_name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª",
                    "category": "technical",
                    "is_published": True,
                    "published_at": datetime.now(),
                    "author_id": admin_user.id if admin_user else 1
                },
                {
                    "title": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–∏–∫–Ω–∏–∫",
                    "content": "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–∏–∫–Ω–∏–∫ –≤ —ç—Ç—É —Å—É–±–±–æ—Ç—É.",
                    "author_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
                    "category": "event",
                    "is_published": True,
                    "published_at": datetime.now(),
                    "author_id": admin_user.id if admin_user else 1
                },
                {
                    "title": "–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                    "content": "–í —Å–≤—è–∑–∏ —Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Ñ–∏—Å—É –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
                    "author_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
                    "category": "announcement",
                    "is_published": True,
                    "published_at": datetime.now(),
                    "author_id": admin_user.id if admin_user else 1
                }
            ]

            for news_item_data in news_data:
                news_item = News(**news_item_data)
                db_session.add(news_item)

        # 7. –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
        events_result = await db_session.execute(select(Event))
        existing_events = events_result.scalars().all()

        if not existing_events:
            events_data = [
                {
                    "title": "–ü–ª–∞–Ω–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "description": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–ª–∞–Ω–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "event_type": "meeting",
                    "start_date": datetime.now() + timedelta(days=1),
                    "end_date": datetime.now() + timedelta(days=1, hours=1),
                    "location": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª ‚Ññ1",
                    "organizer_id": admin_user.id if admin_user else 1,
                    "is_public": False
                },
                {
                    "title": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ",
                    "description": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É—Ä–µ–Ω–∏—è",
                    "event_type": "conference",
                    "start_date": datetime.now() + timedelta(days=2),
                    "end_date": datetime.now() + timedelta(days=2, hours=2),
                    "location": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª ‚Ññ2",
                    "organizer_id": test_user.id if test_user else 1,
                    "is_public": True
                },
                {
                    "title": "–¢—Ä–µ–Ω–∏–Ω–≥ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "description": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "event_type": "training",
                    "start_date": datetime.now() + timedelta(days=3),
                    "end_date": datetime.now() + timedelta(days=3, hours=3),
                    "location": "–ê–∫—Ç–æ–≤–∞—è –∑–∞–ª–∞",
                    "organizer_id": admin_user.id if admin_user else 1,
                    "is_public": True
                }
            ]

            events = []
            for event_data in events_data:
                event = Event(**event_data)
                db_session.add(event)
                events.append(event)

            await db_session.flush()

            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ —Å–æ–±—ã—Ç–∏—è–º
            event_participants_data = [
                {"event_id": events[0].id, "user_id": admin_user.id if admin_user else 1},
                {"event_id": events[0].id, "user_id": test_user.id if test_user else 1},
                {"event_id": events[1].id, "user_id": admin_user.id if admin_user else 1},
                {"event_id": events[2].id, "user_id": admin_user.id if admin_user else 1},
                {"event_id": events[2].id, "user_id": test_user.id if test_user else 1}
            ]

            for participant_data in event_participants_data:
                participant = EventParticipant(**participant_data)
                db_session.add(participant)

        # 8. –°–æ–∑–¥–∞–µ–º —á–∞—Ç –±–æ—Ç–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç –±–æ—Ç–æ–≤...")
        bots_result = await db_session.execute(select(ChatBot))
        existing_bots = bots_result.scalars().all()

        if not existing_bots:
            bots_data = [
                {
                    "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "description": "–ë–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                    "is_active": True,
                    "created_by": admin_user.id if admin_user else 1
                },
                {
                    "name": "–ù–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
                    "description": "–ë–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                    "is_active": True,
                    "created_by": admin_user.id if admin_user else 1
                }
            ]

            bots = []
            for bot_data in bots_data:
                bot = ChatBot(**bot_data)
                db_session.add(bot)
                bots.append(bot)
        else:
            bots = existing_bots

        # 9. –°–æ–∑–¥–∞–µ–º —á–∞—Ç –∫–æ–º–Ω–∞—Ç—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç –∫–æ–º–Ω–∞—Ç...")
        rooms_result = await db_session.execute(select(ChatRoom))
        existing_rooms = rooms_result.scalars().all()

        if not existing_rooms:
            rooms_data = [
                {
                    "name": "–û–±—â–∏–π —á–∞—Ç",
                    "description": "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    "is_private": False,
                    "created_by": admin_user.id if admin_user else 1
                },
                {
                    "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "description": "–ß–∞—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                    "is_private": False,
                    "created_by": admin_user.id if admin_user else 1
                },
                {
                    "name": "–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "description": "–ß–∞—Ç –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "is_private": True,
                    "created_by": admin_user.id if admin_user else 1
                }
            ]

            rooms = []
            for room_data in rooms_data:
                room = ChatRoom(**room_data)
                db_session.add(room)
                rooms.append(room)

            await db_session.flush()

            # 10. –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç—ã
            print("üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç—ã...")
            participants_data = [
                {"room_id": rooms[0].id, "user_id": admin_user.id if admin_user else 1, "is_admin": True},
                {"room_id": rooms[0].id, "user_id": test_user.id if test_user else 1, "is_admin": False},
                {"room_id": rooms[1].id, "bot_id": bots[0].id, "is_admin": False},
                {"room_id": rooms[2].id, "user_id": admin_user.id if admin_user else 1, "is_admin": True}
            ]

            for participant_data in participants_data:
                participant = ChatParticipant(**participant_data)
                db_session.add(participant)

            # 11. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö
            print("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö...")
            messages_data = [
                {
                    "room_id": rooms[0].id,
                    "sender_id": admin_user.id if admin_user else 1,
                    "content": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç!"
                },
                {
                    "room_id": rooms[0].id,
                    "sender_id": test_user.id if test_user else 1,
                    "content": "–°–ø–∞—Å–∏–±–æ! –†–∞–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
                },
                {
                    "room_id": rooms[1].id,
                    "bot_id": bots[0].id,
                    "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                },
                {
                    "room_id": rooms[2].id,
                    "sender_id": admin_user.id if admin_user else 1,
                    "content": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!"
                }
            ]

            for message_data in messages_data:
                message = ChatMessage(**message_data)
                db_session.add(message)

        # 12. –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ —á–∞—Ç–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —á–∞—Ç–æ–≤...")
        folders_result = await db_session.execute(select(ChatFolder))
        existing_folders = folders_result.scalars().all()

        if not existing_folders:
            folders_data = [
                {
                    "name": "–†–∞–±–æ—á–∏–µ —á–∞—Ç—ã",
                    "description": "–ü–∞–ø–∫–∞ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π",
                    "user_id": admin_user.id if admin_user else 1,
                    "created_by": admin_user.id if admin_user else 1
                },
                {
                    "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "description": "–ü–∞–ø–∫–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                    "user_id": test_user.id if test_user else 1,
                    "created_by": test_user.id if test_user else 1
                }
            ]

            for folder_data in folders_data:
                folder = ChatFolder(**folder_data)
                db_session.add(folder)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db_session.commit()

        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        news_count = len(news_data) if 'news_data' in locals() else 0
        events_count = len(events) if 'events' in locals() else 0
        rooms_count = len(rooms) if 'rooms' in locals() else 0
        messages_count = len(messages_data) if 'messages_data' in locals() else 0
        folders_count = len(folders_data) if 'folders_data' in locals() else 0

        print("‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–´!")
        print("üìä –°–û–ó–î–ê–ù–û:")
        print(f"   ‚Ä¢ {len(departments)} –æ—Ç–¥–µ–ª–æ–≤")
        print(f"   ‚Ä¢ {len([admin_user, test_user])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"   ‚Ä¢ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print(f"   ‚Ä¢ {len(nomenclature)} –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä –í–≠–î")
        print(f"   ‚Ä¢ {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
        print(f"   ‚Ä¢ {events_count} —Å–æ–±—ã—Ç–∏–π")
        print(f"   ‚Ä¢ {len(bots)} —á–∞—Ç –±–æ—Ç–æ–≤")
        print(f"   ‚Ä¢ {rooms_count} —á–∞—Ç –∫–æ–º–Ω–∞—Ç")
        print(f"   ‚Ä¢ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"   ‚Ä¢ {folders_count} –ø–∞–ø–æ–∫ —á–∞—Ç–æ–≤")
        # 8. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ (–∫–æ–º–ø–∞–Ω–∏–∏)
        print("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤...")
        customer_result = await db_session.execute(select(CustomerProfile))
        existing_customers = customer_result.scalars().all()

        if not existing_customers:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∑–∞–∫–∞–∑—á–∏–∫–æ–≤
            customer_users_data = [
                {
                    "username": "customer1",
                    "email": "customer1@test.com",
                    "first_name": "–ò–≤–∞–Ω",
                    "last_name": "–ò–≤–∞–Ω–æ–≤",
                    "middle_name": "–ò–≤–∞–Ω–æ–≤–∏—á",
                    "phone": "+7(999)123-45-67",
                    "company_name": "–û–û–û –†–µ–º–æ–Ω—Ç–°–µ—Ä–≤–∏—Å",
                    "contact_person": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤",
                    "company_phone": "+7(999)123-45-67",
                    "company_email": "info@remontservice.ru",
                    "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 10"
                },
                {
                    "username": "customer2",
                    "email": "customer2@test.com",
                    "first_name": "–ü–µ—Ç—Ä",
                    "last_name": "–ü–µ—Ç—Ä–æ–≤",
                    "middle_name": "–ü–µ—Ç—Ä–æ–≤–∏—á",
                    "phone": "+7(999)987-65-43",
                    "company_name": "–ò–ü –ü–µ—Ç—Ä–æ–≤ –ü.–ü.",
                    "contact_person": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á –ü–µ—Ç—Ä–æ–≤",
                    "company_phone": "+7(999)987-65-43",
                    "company_email": "petrov@individual.ru",
                    "address": "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª. –ù–µ–≤—Å–∫–∏–π, 25"
                }
            ]

            customer_users = []
            customer_profiles = []

            for user_data in customer_users_data:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                customer_user = User(
                    username=user_data["username"],
                    email=user_data["email"],
                    first_name=user_data["first_name"],
                    last_name=user_data["last_name"],
                    middle_name=user_data["middle_name"],
                    hashed_password=get_password_hash("customer123"),
                    role=UserRole.CUSTOMER,
                    phone=user_data["phone"],
                    is_active=True
                )
                db_session.add(customer_user)
                customer_users.append(customer_user)
                users_count += 1

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞
                customer_profile = CustomerProfile(
                    user_id=customer_user.id,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ flush
                    company_name=user_data["company_name"],
                    contact_person=user_data["contact_person"],
                    phone=user_data["company_phone"],
                    email=user_data["company_email"],
                    address=user_data["address"]
                )
                customer_profiles.append(customer_profile)

            await db_session.flush()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ user_id –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
            for i, profile in enumerate(customer_profiles):
                profile.user_id = customer_users[i].id
                db_session.add(profile)

            await db_session.flush()
            customers_count = len(customer_users)
        else:
            customers_count = len(existing_customers)

        # 9. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        print("üë∑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        contractor_result = await db_session.execute(select(ContractorProfile))
        existing_contractors = contractor_result.scalars().all()

        if not existing_contractors:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            contractor_users_data = [
                {
                    "username": "contractor1",
                    "email": "contractor1@test.com",
                    "first_name": "–ê–ª–µ–∫—Å–µ–π",
                    "last_name": "–°–∏–¥–æ—Ä–æ–≤",
                    "middle_name": "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
                    "phone": "+7(999)111-22-33",
                    "specialization": "–≠–ª–µ–∫—Ç—Ä–∏–∫",
                    "experience_years": 5,
                    "skills": "–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, —ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
                },
                {
                    "username": "contractor2",
                    "email": "contractor2@test.com",
                    "first_name": "–ú–∞—Ä–∏—è",
                    "last_name": "–ö—É–∑–Ω–µ—Ü–æ–≤–∞",
                    "middle_name": "–°–µ—Ä–≥–µ–µ–≤–Ω–∞",
                    "phone": "+7(999)444-55-66",
                    "specialization": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫",
                    "experience_years": 7,
                    "skills": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏, —Ä–µ–º–æ–Ω—Ç —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤"
                }
            ]

            contractor_users = []
            contractor_profiles = []

            for user_data in contractor_users_data:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                contractor_user = User(
                    username=user_data["username"],
                    email=user_data["email"],
                    first_name=user_data["first_name"],
                    last_name=user_data["last_name"],
                    middle_name=user_data["middle_name"],
                    hashed_password=get_password_hash("contractor123"),
                    role=UserRole.CONTRACTOR,
                    phone=user_data["phone"],
                    is_active=True
                )
                db_session.add(contractor_user)
                contractor_users.append(contractor_user)
                users_count += 1

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                professional_info = []
                if user_data.get("specialization") or user_data.get("experience_years") or user_data.get("skills"):
                    professional_info_item = {}
                    if user_data.get("specialization"):
                        professional_info_item["specialization"] = user_data["specialization"]
                    if user_data.get("experience_years"):
                        professional_info_item["experience_years"] = user_data["experience_years"]
                    if user_data.get("skills"):
                        professional_info_item["skills"] = user_data["skills"]
                    if professional_info_item:
                        professional_info.append(professional_info_item)

                contractor_profile = ContractorProfile(
                    user_id=contractor_user.id,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ flush
                    last_name=user_data["last_name"],
                    first_name=user_data["first_name"],
                    patronymic=user_data["middle_name"],
                    phone=user_data["phone"],
                    email=user_data["email"],
                    professional_info=professional_info,
                    general_description=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {user_data['first_name']} {user_data['last_name']}"
                )
                contractor_profiles.append(contractor_profile)

            await db_session.flush()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ user_id –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
            for i, profile in enumerate(contractor_profiles):
                profile.user_id = contractor_users[i].id
                db_session.add(profile)

            await db_session.flush()
            contractors_count = len(contractor_users)
        else:
            contractors_count = len(existing_contractors)

        # 10. –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞...")
        service_engineer_result = await db_session.execute(
            select(User).where(User.role == UserRole.SERVICE_ENGINEER)
        )
        existing_service_engineers = service_engineer_result.scalars().all()

        if not existing_service_engineers:
            service_engineer = User(
                username="service_engineer",
                email="engineer@almazgeobur.ru",
                first_name="–ê–Ω–Ω–∞",
                last_name="–°–µ—Ä–≤–∏—Å–æ–≤–∞",
                middle_name="–ò–≥–æ—Ä–µ–≤–Ω–∞",
                hashed_password=get_password_hash("engineer123"),
                role=UserRole.SERVICE_ENGINEER,
                phone="+7(999)777-88-99",
                is_active=True,
                position="–°–µ—Ä–≤–∏—Å–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä"
            )
            db_session.add(service_engineer)
            users_count += 1
            await db_session.flush()
            service_engineers_count = 1
        else:
            service_engineers_count = len(existing_service_engineers)

        # 11. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...")
        requests_result = await db_session.execute(select(RepairRequest))
        existing_requests = requests_result.scalars().all()

        if not existing_requests:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
            customer_profiles_result = await db_session.execute(select(CustomerProfile).limit(2))
            customer_profiles = customer_profiles_result.scalars().all()

            if customer_profiles:
                repair_requests_data = [
                    {
                        "title": "–†–µ–º–æ–Ω—Ç —ç–ª–µ–∫—Ç—Ä–∏–∫–∏ –≤ –æ—Ñ–∏—Å–µ",
                        "description": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å —Ä–æ–∑–µ—Ç–∫–∏ –∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞. –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å - 25 –∫–≤.–º.",
                        "urgency": "—Å—Ä–µ–¥–Ω–µ",
                        "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15, –æ—Ñ–∏—Å 301",
                        "city": "–ú–æ—Å–∫–≤–∞",
                        "region": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
                        "customer_profile": customer_profiles[0]
                    },
                    {
                        "title": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ",
                        "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏—Ç–∞–∑–∞, —Ä–∞–∫–æ–≤–∏–Ω—ã –∏ —Å–º–µ—Å–∏—Ç–µ–ª—è –≤ —Å–∞–Ω—É–∑–ª–µ. –ó–∞–º–µ–Ω–∞ —Ç—Ä—É–± –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è.",
                        "urgency": "–≤—ã—Å–æ–∫–∞—è",
                        "address": "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –ù–µ–≤—Å–∫–∏–π, 45, –∫–≤. 12",
                        "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                        "region": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
                        "customer_profile": customer_profiles[1] if len(customer_profiles) > 1 else customer_profiles[0]
                    }
                ]

                repair_requests = []
                for request_data in repair_requests_data:
                    repair_request = RepairRequest(
                        customer_id=request_data["customer_profile"].id,
                        title=request_data["title"],
                        description=request_data["description"],
                        urgency=request_data["urgency"],
                        address=request_data["address"],
                        city=request_data["city"],
                        region=request_data["region"],
                        status=RequestStatus.NEW
                    )
                    db_session.add(repair_request)
                    repair_requests.append(repair_request)

                await db_session.flush()
                requests_count = len(repair_requests)
            else:
                requests_count = 0
        else:
            requests_count = len(existing_requests)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞
        print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–æ—Ç —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º
        existing_bot_result = await db_session.execute(
            select(TelegramBot).where(TelegramBot.token == "123456789:AAFakeTokenForTestingPurposes123456789")
        )
        existing_bot = existing_bot_result.scalars().first()

        if existing_bot:
            print("ü§ñ Telegram –±–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            telegram_bot = existing_bot
        else:
            print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞...")
            telegram_bot = TelegramBot(
                name="Repair Bot",
                token="123456789:AAFakeTokenForTestingPurposes123456789",  # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                is_active=True,
                webhook_url=None
            )
            db_session.add(telegram_bot)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ contractor1 —Å Telegram
        contractor_result = await db_session.execute(
            select(User).where(User.username == "contractor1")
        )
        contractor_user = contractor_result.scalars().first()

        if contractor_user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_telegram_user_result = await db_session.execute(
                select(TelegramUser).where(TelegramUser.telegram_id == 123456789)
            )
            existing_telegram_user = existing_telegram_user_result.scalars().first()

            if not existing_telegram_user:
                telegram_user = TelegramUser(
                    user_id=contractor_user.id,
                    telegram_id=123456789,  # –¢–µ—Å—Ç–æ–≤—ã–π Telegram ID
                    username="contractor_test",
                    first_name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                    last_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                    is_bot_user=False
                )
                db_session.add(telegram_user)
            else:
                print("ü§ñ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")

        await db_session.commit()
        print("‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω")

        print("")
        print("üéâ –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï:")
        print("   Admin: admin / admin123")
        print("   Test:  testuser / test123")
        print("   –ó–∞–∫–∞–∑—á–∏–∫: customer1 / customer123")
        print("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: contractor1 / contractor123")
        print("   –°–µ—Ä–≤–∏—Å–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä: service_engineer / engineer123")
        print("")
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
        print(f"   ‚Ä¢ {len(departments)} –æ—Ç–¥–µ–ª–æ–≤")
        print(f"   ‚Ä¢ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"   ‚Ä¢ {employees_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏")
        print(f"   ‚Ä¢ {nomenclatures_count} –ø–æ–∑–∏—Ü–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã")
        print(f"   ‚Ä¢ {passports_count} –í–≠–î –ø–∞—Å–ø–æ—Ä—Ç–æ–≤")
        print(f"   ‚Ä¢ {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
        print(f"   ‚Ä¢ {events_count} —Å–æ–±—ã—Ç–∏–π")
        print(f"   ‚Ä¢ {len(bots)} —á–∞—Ç –±–æ—Ç–æ–≤")
        print(f"   ‚Ä¢ {rooms_count} —á–∞—Ç –∫–æ–º–Ω–∞—Ç")
        print(f"   ‚Ä¢ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"   ‚Ä¢ {folders_count} –ø–∞–ø–æ–∫ —á–∞—Ç–æ–≤")
        print(f"   ‚Ä¢ {customers_count} –∑–∞–∫–∞–∑—á–∏–∫–æ–≤")
        print(f"   ‚Ä¢ {contractors_count} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        print(f"   ‚Ä¢ {service_engineers_count} —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤")
        print(f"   ‚Ä¢ {requests_count} –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
        print("   ‚Ä¢ 1 Telegram –±–æ—Ç")
        print("   ‚Ä¢ 1 Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        await db_session.rollback()

async def init_data_if_needed():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è
    """
    from database import async_session

    async with await async_session() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            result = await db.execute(select(User).where(User.username == "admin"))
            admin_exists = result.scalar_one_or_none()

            if not admin_exists:
                print("üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
                await init_database_data(db)
            else:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
