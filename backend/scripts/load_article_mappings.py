#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
"""

import asyncio
import pandas as pd
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from database import async_session
from models import ArticleMapping, VEDNomenclature
from sqlalchemy import select


async def load_article_mappings_from_excel(excel_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {excel_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_path)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ")
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("\nüîç –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:")
        print(df.head())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return
    
    async with async_session() as db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            nomenclature_result = await db.execute(
                select(VEDNomenclature).where(VEDNomenclature.is_active == True)
            )
            nomenclature_list = nomenclature_result.scalars().all()
            
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(nomenclature_list)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            nomenclature_by_article = {n.article: n for n in nomenclature_list}
            nomenclature_by_code = {n.code_1c: n for n in nomenclature_list}
            
            loaded_count = 0
            skipped_count = 0
            errors = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            for index, row in df.iterrows():
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.xlsx"
                    contractor_article = str(row.get('–ê—Ä—Ç–∏–∫—É–ª –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', row.get('–ê—Ä—Ç–∏–∫—É–ª', ''))).strip()
                    contractor_description = str(row.get('–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞', row.get('–û–ø–∏—Å–∞–Ω–∏–µ', ''))).strip()
                    agb_article = str(row.get('–ê—Ä—Ç–∏–∫—É–ª –ê–ì–ë', row.get('–ê–ì–ë', ''))).strip()
                    agb_description = str(row.get('–û–ø–∏—Å–∞–Ω–∏–µ –ê–ì–ë', row.get('–û–ø–∏—Å–∞–Ω–∏–µ –ê–ì–ë', ''))).strip()
                    bl_article = str(row.get('–ê—Ä—Ç–∏–∫—É–ª BL', row.get('BL', ''))).strip() if pd.notna(row.get('–ê—Ä—Ç–∏–∫—É–ª BL', row.get('BL', ''))) else None
                    bl_description = str(row.get('–û–ø–∏—Å–∞–Ω–∏–µ BL', row.get('–û–ø–∏—Å–∞–Ω–∏–µ BL', ''))).strip() if pd.notna(row.get('–û–ø–∏—Å–∞–Ω–∏–µ BL', row.get('BL', ''))) else None
                    packaging_factor = int(row.get('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∞—Å–æ–≤–∫–∏', row.get('–§–∞—Å–æ–≤–∫–∞', 1))) if pd.notna(row.get('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∞—Å–æ–≤–∫–∏', row.get('–§–∞—Å–æ–≤–∫–∞', 1))) else 1
                    unit = str(row.get('–ï–¥–∏–Ω–∏—Ü–∞', row.get('–ï–¥.', '—à—Ç'))).strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not contractor_article or not agb_article:
                        skipped_count += 1
                        continue
                    
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
                    nomenclature = None
                    if agb_article in nomenclature_by_article:
                        nomenclature = nomenclature_by_article[agb_article]
                    elif agb_article in nomenclature_by_code:
                        nomenclature = nomenclature_by_code[agb_article]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    existing = await db.execute(
                        select(ArticleMapping).where(
                            ArticleMapping.contractor_article == contractor_article,
                            ArticleMapping.agb_article == agb_article
                        )
                    )
                    if existing.scalar_one_or_none():
                        skipped_count += 1
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    new_mapping = ArticleMapping(
                        contractor_article=contractor_article,
                        contractor_description=contractor_description,
                        agb_article=agb_article,
                        agb_description=agb_description,
                        bl_article=bl_article if bl_article and bl_article != 'nan' else None,
                        bl_description=bl_description if bl_description and bl_description != 'nan' else None,
                        packaging_factor=packaging_factor,
                        unit=unit,
                        nomenclature_id=nomenclature.id if nomenclature else None
                    )
                    
                    db.add(new_mapping)
                    loaded_count += 1
                    
                    if loaded_count % 100 == 0:
                        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {loaded_count} –∑–∞–ø–∏—Å–µ–π...")
                    
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 1}: {str(e)}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await db.commit()
            
            print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {loaded_count} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} –∑–∞–ø–∏—Å–µ–π")
            print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
            
            if errors:
                print("\nüîç –û—à–∏–±–∫–∏:")
                for error in errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                    print(f"  - {error}")
                if len(errors) > 10:
                    print(f"  ... –∏ –µ—â–µ {len(errors) - 10} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            await db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    excel_path = "/Users/andreydolgov/Downloads/–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.xlsx"
    
    if not os.path.exists(excel_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.xlsx' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ Downloads")
        return
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    print("=" * 60)
    
    await load_article_mappings_from_excel(excel_path)
    
    print("=" * 60)
    print("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main())



