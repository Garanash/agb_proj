#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import async_session
from models import AppSettings
from sqlalchemy import select

async def init_app_settings():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_settings = [
        {
            "key": "SECRET_KEY",
            "value": "dev-secret-key-change-in-production",
            "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤",
            "is_encrypted": True
        },
        {
            "key": "ALGORITHM",
            "value": "HS256",
            "description": "–ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è JWT",
            "is_encrypted": False
        },
        {
            "key": "ACCESS_TOKEN_EXPIRE_MINUTES",
            "value": "1440",
            "description": "–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö",
            "is_encrypted": False
        },
        {
            "key": "DATABASE_URL",
            "value": "postgresql+asyncpg://test_user:test_password@localhost:15432/test_platform_db",
            "description": "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "is_encrypted": True
        },
        {
            "key": "CORS_ORIGINS",
            "value": "http://localhost:3000,http://127.0.0.1:3000",
            "description": "–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ CORS origins",
            "is_encrypted": False
        },
        {
            "key": "MAX_UPLOAD_SIZE",
            "value": "10485760",
            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö",
            "is_encrypted": False
        },
        {
            "key": "ALLOWED_EXTENSIONS",
            "value": "pdf,doc,docx,xls,xlsx,png,jpg,jpeg,gif",
            "description": "–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
            "is_encrypted": False
        },
        {
            "key": "LOG_LEVEL",
            "value": "INFO",
            "description": "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "is_encrypted": False
        }
    ]
    
    async with async_session() as db:
        try:
            for setting_data in default_settings:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                result = await db.execute(select(AppSettings).where(AppSettings.key == setting_data["key"]))
                existing_setting = result.scalar_one_or_none()
                
                if not existing_setting:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                    setting = AppSettings(
                        key=setting_data["key"],
                        value=setting_data["value"],
                        description=setting_data["description"],
                        is_encrypted=setting_data["is_encrypted"]
                    )
                    db.add(setting)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_data['key']}")
                else:
                    print(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {setting_data['key']}")
            
            await db.commit()
            print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await db.rollback()
            raise
        finally:
            await db.close()

if __name__ == "__main__":
    asyncio.run(init_app_settings())
