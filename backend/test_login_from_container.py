#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –∏–∑–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ backend
"""
import asyncio
import httpx
import json

async def test_login_from_container():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API backend'–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API backend'–∞...")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–¥–æ—Ä–æ–≤—å–µ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
        async with httpx.AsyncClient() as client:
            # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ localhost:8000
            print("\nüìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ localhost:8000")
            try:
                response = await client.get("http://localhost:8000/api/health", timeout=5.0)
                print(f"‚úÖ Health check: {response.status_code}")
                print(f"üìÑ Response: {response.text}")
            except Exception as e:
                print(f"‚ùå Health check failed: {e}")

            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ backend:8000
            print("\nüìä –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ backend:8000")
            try:
                response = await client.get("http://backend:8000/api/health", timeout=5.0)
                print(f"‚úÖ Health check (backend): {response.status_code}")
                print(f"üìÑ Response: {response.text}")
            except Exception as e:
                print(f"‚ùå Health check (backend) failed: {e}")

            # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ localhost:8000
            print("\nüîê –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ localhost:8000")
            login_data = {
                "username": "admin",
                "password": "admin123"
            }

            try:
                response = await client.post(
                    "http://localhost:8000/api/auth/login",
                    json=login_data,
                    timeout=10.0
                )

                print(f"üìä Status: {response.status_code}")
                print(f"üìÑ Response: {response.text}")

                if response.status_code == 200:
                    data = response.json()
                    if "access_token" in data:
                        print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑ localhost!")
                        return True
                    else:
                        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.status_code}")

            except Exception as e:
                print(f"‚ùå Login —á–µ—Ä–µ–∑ localhost failed: {e}")

            # –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ backend:8000
            print("\nüîê –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ backend:8000")
            try:
                response = await client.post(
                    "http://backend:8000/api/auth/login",
                    json=login_data,
                    timeout=10.0
                )

                print(f"üìä Status: {response.status_code}")
                print(f"üìÑ Response: {response.text}")

                if response.status_code == 200:
                    data = response.json()
                    if "access_token" in data:
                        print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑ backend!")
                        return True
                    else:
                        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.status_code}")

            except Exception as e:
                print(f"‚ùå Login —á–µ—Ä–µ–∑ backend failed: {e}")

        return False

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(test_login_from_container())
    if result:
        print("\nüéâ –õ–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\n‚ùå –õ–æ–≥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend'–∞.")
