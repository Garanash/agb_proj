import io
import os
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import mm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
# from cairosvg import svg2png  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
from reportlab.lib.utils import ImageReader


def create_logo_image():
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏–∑ PNG —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª logo.png –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–ø–∫–µ
        import os
        logo_path = os.path.join('static', 'logo.png')
        if os.path.exists(logo_path):
            return logo_path
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            from .create_logo import create_logo_png
            create_logo_png()
            if os.path.exists(logo_path):
                return logo_path
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø")
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        return None


def setup_cyrillic_fonts():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç–∞–º
        font_paths = [
            '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',
            '/usr/share/fonts/TTF/DejaVuSans.ttf',
            '/usr/share/fonts/dejavu/DejaVuSans.ttf',
            '/System/Library/Fonts/Arial.ttf',  # macOS
            '/System/Library/Fonts/Helvetica.ttc',  # macOS
            '/Windows/Fonts/arial.ttf',  # Windows
            '/Windows/Fonts/calibri.ttf',  # Windows
            '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf',  # Linux
            '/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf',  # Linux
        ]
        
        normal_font = 'Helvetica'
        for path in font_paths:
            try:
                if os.path.exists(path):
                    pdfmetrics.registerFont(TTFont('DejaVuSans', path))
                    normal_font = 'DejaVuSans'
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —à—Ä–∏—Ñ—Ç: {path}")
                    break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ {path}: {e}")
                continue

        # –ï—Å–ª–∏ DejaVu –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —à—Ä–∏—Ñ—Ç—ã
        if normal_font == 'Helvetica':
            try:
                arial_paths = [
                    '/usr/share/fonts/truetype/msttcorefonts/Arial_Unicode_MS.ttf',
                    '/System/Library/Fonts/Arial.ttf',
                    '/Windows/Fonts/arial.ttf'
                ]
                for path in arial_paths:
                    if os.path.exists(path):
                        pdfmetrics.registerFont(TTFont('ArialUnicode', path))
                        normal_font = 'ArialUnicode'
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω Arial —à—Ä–∏—Ñ—Ç: {path}")
                        break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Arial —à—Ä–∏—Ñ—Ç–∞: {e}")
                pass
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã ReportLab
        if normal_font == 'Helvetica':
            print("‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ —à—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ")
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            try:
                from reportlab.pdfbase.cidfonts import UnicodeCIDFont
                pdfmetrics.registerFont(UnicodeCIDFont('STSong-Light'))
                normal_font = 'STSong-Light'
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Unicode —à—Ä–∏—Ñ—Ç")
            except:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Times-Roman –∫–∞–∫ fallback —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                    normal_font = 'Times-Roman'
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Times-Roman —Å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
                except:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Unicode —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º Helvetica")
        
        print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à—Ä–∏—Ñ—Ç: {normal_font}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
        normal_font = 'Helvetica'
    
    return normal_font


def create_passport_styles(normal_font):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è PDF –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    styles = getSampleStyleSheet()
    
    # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=20,
        alignment=1,  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        fontName=normal_font,
        encoding='utf-8'
    )

    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=15,
        fontName=normal_font,
        encoding='utf-8'
    )

    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontName=normal_font,
        fontSize=10,
        encoding='utf-8'
    )
    
    return title_style, subtitle_style, normal_style


def create_passport_pdf_content(passport, normal_font, title_style, subtitle_style, normal_style):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É"""
    story = []

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    contact_info = """–û–û–û "–ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä" 125362, –≥. –ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –í–æ–¥–Ω–∏–∫–æ–≤, –¥–æ–º 2, —Å—Ç—Ä. 14, –æ—Ñ. 11, —Ç–µ–ª.:+7 495 229 82 94
LLP "Almazgeobur" 125362, Moscow, Vodnikov Street, 2, building. 14, of. 11, tel.:+7 495 229 82 94,
e-mail: contact@almazgeobur.ru"""

    # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω—é—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–±—â–µ–π —Ä–∞–º–∫–∏
    outer_data = [[None]]  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
    outer_table = Table(outer_data, colWidths=[190*mm])
    outer_table.setStyle(TableStyle([
        ('BOX', (0, 0), (-1, -1), 0.5, colors.black),
        ('TOPPADDING', (0, 0), (-1, -1), 2),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
        ('LEFTPADDING', (0, 0), (-1, -1), 2),
        ('RIGHTPADDING', (0, 0), (-1, -1), 2),
    ]))

    # –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ç–∞–±–ª–∏—Ü—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    header_data = [[None, contact_info]]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    header_table = Table(header_data, colWidths=[45*mm, 143*mm])
    header_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), normal_font),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (0, 0), 'LEFT'),
        ('ALIGN', (1, 0), (1, 0), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('ENCODING', (0, 0), (-1, -1), 'utf-8'),
    ]))

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
    logo_img = create_logo_image()
    if logo_img:
        logo_cell = Image(logo_img, width=40*mm, height=12*mm)
        header_data[0][0] = logo_cell
        header_table = Table(header_data, colWidths=[45*mm, 143*mm])
        header_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), normal_font),
            ('FONTSIZE', (0, 0), (-1, -1), 7),  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (0, 0), 'LEFT'),
            ('ALIGN', (1, 0), (1, 0), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('ENCODING', (0, 0), (-1, -1), 'utf-8'),
        ]))

    story.append(header_table)
    story.append(Spacer(1, 15))

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    nomenclature = passport.nomenclature
    if not nomenclature:
        print(f"‚ùå –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ {passport.passport_number}")
        return story
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥
    barcode = f"AGB{nomenclature.article or '3501040'}-{passport.passport_number or '0000125'}"

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
    wrapped_style = ParagraphStyle(
        'WrappedText',
        parent=normal_style,
        fontSize=7,  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        leading=9,   # –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        spaceBefore=0,
        spaceAfter=0,
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    product_type = nomenclature.product_type or "–∫–æ—Ä–æ–Ω–∫–∞"
    product_type_ru = "–ê–ª–º–∞–∑–Ω–∞—è –±—É—Ä–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞" if product_type == "–∫–æ—Ä–æ–Ω–∫–∞" else "–ë—É—Ä–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
    product_type_en = "Diamond drill bit" if product_type == "–∫–æ—Ä–æ–Ω–∫–∞" else "Drilling tool"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —è—á–µ–µ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
    cell_style = ParagraphStyle(
        'CellText',
        parent=normal_style,
        fontSize=7,
        leading=9,
        spaceBefore=0,
        spaceAfter=0,
        alignment=1,  # CENTER
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    tool_type = Paragraph(f"{product_type_ru} / {product_type_en}", cell_style)

    passport_data = [
        [Paragraph("–ê—Ä—Ç–∏–∫—É–ª / Stock Code", cell_style), 
         Paragraph("–¢–∏–ø–æ—Ä–∞–∑–º–µ—Ä / Tool size", cell_style), 
         Paragraph("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä / Serial Number", cell_style), 
         Paragraph("–ë—É—Ä–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç / Tool type", cell_style)],
        [Paragraph(nomenclature.article or "3501040", cell_style), 
         Paragraph(nomenclature.matrix or "NQ", cell_style), 
         Paragraph(passport.passport_number or "AGB 3-5 NQ 0000125", cell_style), 
         tool_type],
        [Paragraph("–ú–∞—Ç—Ä–∏—Ü–∞ / Matrix", cell_style), 
         Paragraph("–í—ã—Å–æ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã / Imp Depth", cell_style), 
         Paragraph("–ü—Ä–æ–º—ã–≤–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è / Waterways", cell_style), 
         Paragraph("–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ / Production date", cell_style)],
        [Paragraph(nomenclature.matrix or "3-5", cell_style), 
         Paragraph(nomenclature.height or "12 –º–º", cell_style), 
         Paragraph("8 mm", cell_style), 
         "2025"],
        [Paragraph("www.almazgeobur.ru", cell_style), "", "", ""]
    ]

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–π —Ä–∞–º–∫–∏) —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    table = Table(passport_data, colWidths=[40*mm, 40*mm, 50*mm, 40*mm])
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), normal_font),
        ('FONTSIZE', (0, 0), (-1, -1), 7),  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.black),  # –í–Ω–µ—à–Ω—è—è —Ä–∞–º–∫–∞
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('BACKGROUND', (0, 2), (-1, 2), colors.lightgrey),
        ('SPAN', (0, 4), (3, 4)),  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫—É "www.almazgeobur.ru" –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
        ('ALIGN', (0, 4), (3, 4), 'CENTER'),  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º "www.almazgeobur.ru"
        ('ENCODING', (0, 0), (-1, -1), 'utf-8'),
        ('LEFTPADDING', (0, 0), (-1, -1), 2),  # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ('RIGHTPADDING', (0, 0), (-1, -1), 2),
        ('TOPPADDING', (0, 0), (-1, -1), 2),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
    ]))

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
    inner_table = Table([[header_table], [Spacer(1, 8)], [table]], colWidths=[188*mm])
    inner_table.setStyle(TableStyle([
        ('BOX', (0, 0), (-1, -1), 1, colors.black),  # –û–±—â–∞—è —Ä–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –≤—Å–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        ('LEFTPADDING', (0, 0), (-1, -1), 5),
        ('RIGHTPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
    ]))

    story.append(inner_table)

    return story


def generate_passport_pdf(passport):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∏ –Ω–æ–≤—ã–º –º–∞–∫–µ—Ç–æ–º"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞, –Ω–æ —Å –æ–¥–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç–æ–º
    return generate_bulk_passports_pdf([passport])


def create_passport_content_without_header(passport, normal_font, normal_style):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—ã–≥—Ä—É–∑–∫–∏"""
    story = []
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    nomenclature = passport.nomenclature
    if not nomenclature:
        print(f"‚ùå –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ {passport.passport_number}")
        return story
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞
    barcode = f"AGB{nomenclature.article or '3501040'}-{passport.passport_number or '0000125'}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    product_type = nomenclature.product_type or "–∫–æ—Ä–æ–Ω–∫–∞"
    product_type_ru = "–ê–ª–º–∞–∑–Ω–∞—è –±—É—Ä–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞" if product_type == "–∫–æ—Ä–æ–Ω–∫–∞" else "–ë—É—Ä–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
    product_type_en = "Diamond drill bit" if product_type == "–∫–æ—Ä–æ–Ω–∫–∞" else "Drilling tool"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —è—á–µ–µ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
    cell_style = ParagraphStyle(
        'CellText',
        parent=normal_style,
        fontSize=7,
        leading=9,
        spaceBefore=0,
        spaceAfter=0,
        alignment=1,  # CENTER
    )
    
    # –î–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î (—Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º) —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
    passport_data = [
        [Paragraph("–ê—Ä—Ç–∏–∫—É–ª / Stock Code", cell_style), 
         Paragraph("–¢–∏–ø–æ—Ä–∞–∑–º–µ—Ä / Tool size", cell_style), 
         Paragraph("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä / Serial Number", cell_style), 
         Paragraph("–ë—É—Ä–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç / Tool type", cell_style)],
        [Paragraph(nomenclature.article or "3501040", cell_style), 
         Paragraph(nomenclature.matrix or "NQ", cell_style), 
         Paragraph(passport.passport_number or "AGB 3-5 NQ 0000125", cell_style), 
         Paragraph(f"{product_type_ru} / {product_type_en}", cell_style)],
        [Paragraph("–ú–∞—Ç—Ä–∏—Ü–∞ / Matrix", cell_style), 
         Paragraph("–í—ã—Å–æ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã / Imp Depth", cell_style), 
         Paragraph("–ü—Ä–æ–º—ã–≤–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è / Waterways", cell_style), 
         Paragraph("–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ / Production date", cell_style)],
        [Paragraph(nomenclature.matrix or "3-5", cell_style), 
         Paragraph(nomenclature.height or "12 –º–º", cell_style), 
         Paragraph("8 mm", cell_style),
         "2025"],
        [Paragraph("www.almazgeobur.ru", cell_style), "", "", ""]
    ]
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–π —Ä–∞–º–∫–∏) —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    table = Table(passport_data, colWidths=[40*mm, 40*mm, 50*mm, 40*mm])
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), normal_font),
        ('FONTSIZE', (0, 0), (-1, -1), 7),  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.black),  # –í–Ω–µ—à–Ω—è—è —Ä–∞–º–∫–∞
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('BACKGROUND', (0, 2), (-1, 2), colors.lightgrey),
        ('SPAN', (0, 4), (3, 4)),  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫—É "www.almazgeobur.ru" –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
        ('ALIGN', (0, 4), (3, 4), 'CENTER'),  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º "www.almazgeobur.ru"
        ('ENCODING', (0, 0), (-1, -1), 'utf-8'),
        ('LEFTPADDING', (0, 0), (-1, -1), 2),  # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ('RIGHTPADDING', (0, 0), (-1, -1), 2),
        ('TOPPADDING', (0, 0), (-1, -1), 2),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
    ]))
    
    story.append(table)
    return story


def generate_bulk_passports_pdf(passports):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏ (–ø–æ 3 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)"""
    print(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –¥–ª—è {len(passports)} –ø–∞—Å–ø–æ—Ä—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º PDF –≤ –ø–∞–º—è—Ç–∏
    buffer = io.BytesIO()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_width, page_height = A4
    margin = 20
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        leftMargin=margin,
        rightMargin=margin,
        topMargin=margin,
        bottomMargin=margin
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    normal_font = setup_cyrillic_fonts()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
    title_style, subtitle_style, normal_style = create_passport_styles(normal_font)
    
    story = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    contact_info = """–û–û–û "–ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä" 125362, –≥. –ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –í–æ–¥–Ω–∏–∫–æ–≤, –¥–æ–º 2, —Å—Ç—Ä. 14, –æ—Ñ. 11, —Ç–µ–ª.:+7 495 229 82 94
LLP "Almazgeobur" 125362, Moscow, Vodnikov Street, 2, building. 14, of. 11, tel.:+7 495 229 82 94,
e-mail: contact@almazgeobur.ru"""

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    header_data = [[None, contact_info]]
    logo_img = create_logo_image()
    if logo_img:
        logo_cell = Image(logo_img, width=40*mm, height=12*mm)
        header_data[0][0] = logo_cell

    header_table = Table(header_data, colWidths=[45*mm, 143*mm])
    header_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), normal_font),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (0, 0), 'LEFT'),
        ('ALIGN', (1, 0), (1, 0), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('ENCODING', (0, 0), (-1, -1), 'utf-8'),
    ]))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–æ 3 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    for i in range(0, len(passports), 3):
        passport_group = passports[i:i+3]

        for j, passport in enumerate(passport_group):
            print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç {j+1} –≤ –≥—Ä—É–ø–ø–µ: {passport.passport_number}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            passport_content = create_passport_content_without_header(passport, normal_font, normal_style)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –æ–±—â–µ–π —Ä–∞–º–∫–æ–π
            full_passport = Table([[header_table], [Spacer(1, 8)], [passport_content]], colWidths=[188*mm])
            full_passport.setStyle(TableStyle([
                ('BOX', (0, 0), (-1, -1), 1, colors.black),  # –û–±—â–∞—è —Ä–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –≤—Å–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                ('LEFTPADDING', (0, 0), (-1, -1), 5),
                ('RIGHTPADDING', (0, 0), (-1, -1), 5),
                ('TOPPADDING', (0, 0), (-1, -1), 5),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
            ]))
            
            story.append(full_passport)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏
            if j < len(passport_group) - 1:
                story.append(Spacer(1, 8*mm))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∏–∑ 3 –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
        if i + 3 < len(passports):
            story.append(PageBreak())

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    print(f"üî® –°—Ç—Ä–æ–∏–º PDF –¥–æ–∫—É–º–µ–Ω—Ç...")
    doc.build(story)
    buffer.seek(0)
    
    pdf_content = buffer.getvalue()
    print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(pdf_content)} –±–∞–π—Ç")
    
    return pdf_content
