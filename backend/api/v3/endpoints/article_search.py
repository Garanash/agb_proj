"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
"""

from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from sqlalchemy.orm import Session
from sqlalchemy import select, and_, or_, func, desc, text
from sqlalchemy.orm import selectinload
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field
from datetime import datetime
import asyncio
import aiohttp
import re
import dns.resolver
import whois
import json
import logging

from database import get_db
from models import (
    User, Supplier, SupplierArticle, ArticleSearchRequest,
    ArticleSearchResult, SupplierValidationLog, ApiKey
)
from api.v1.endpoints.auth import get_current_user

router = APIRouter()
logger = logging.getLogger(__name__)


# –°—Ö–µ–º—ã Pydantic
class ArticleSearchRequest(BaseModel):
    articles: List[str] = Field(..., min_items=1, description="–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    request_name: Optional[str] = Field(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞")
    use_ai: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è –ø–æ–∏—Å–∫–∞")
    validate_contacts: bool = Field(True, description="–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")


class SupplierResponse(BaseModel):
    id: int
    company_name: str
    contact_person: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    website: Optional[str] = None
    address: Optional[str] = None
    country: Optional[str] = None
    city: Optional[str] = None
    email_validated: bool = False
    website_validated: bool = False
    is_active: bool = True
    created_at: datetime
    last_checked: Optional[datetime] = None
    
    class Config:
        from_attributes = True


class SupplierArticleResponse(BaseModel):
    id: int
    article_code: str
    article_name: str
    description: Optional[str] = None
    price: Optional[float] = None
    currency: str = "RUB"
    unit: str = "—à—Ç"
    min_order_quantity: Optional[int] = None
    availability: Optional[str] = None
    agb_article: Optional[str] = None
    bl_article: Optional[str] = None
    created_at: datetime
    last_price_update: Optional[datetime] = None
    
    class Config:
        from_attributes = True


class SearchResultResponse(BaseModel):
    article_code: str
    suppliers: List[Dict[str, Any]]
    total_suppliers: int
    confidence_scores: List[float]


class SearchRequestResponse(BaseModel):
    id: int
    request_name: Optional[str] = None
    articles: List[str]
    status: str
    total_articles: int
    found_articles: int
    total_suppliers: int
    created_at: datetime
    completed_at: Optional[datetime] = None
    results: List[SearchResultResponse] = []
    
    class Config:
        from_attributes = True


class SupplierGroupResponse(BaseModel):
    supplier: SupplierResponse
    articles: List[SupplierArticleResponse]
    total_articles: int
    avg_price: Optional[float] = None


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_polza_api_key(db: Session) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á Polza.ai"""
    try:
        # –ò—â–µ–º API –∫–ª—é—á –ø–æ –∏–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—è provider –Ω–µ—Ç
        api_key_obj = db.query(ApiKey).filter(
            ApiKey.is_active == True,
            ApiKey.name.ilike('%polza%')  # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É 'polza'
        ).first()
        
        if not api_key_obj:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
            api_key_obj = db.query(ApiKey).filter(
                ApiKey.is_active == True
            ).first()
        
        if not api_key_obj:
            raise HTTPException(status_code=400, detail="API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω)
        return api_key_obj.key_value.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞")


def search_suppliers_with_ai(article: str, api_key: str, db: Session) -> List[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info(f"üîç –ò–ò –ø–æ–∏—Å–∫ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        suppliers_query = """
        SELECT company_name, contact_person, email, phone, website, 
               address, country, city, specialization, rating
        FROM verified_suppliers 
        WHERE is_verified = true
        ORDER BY rating DESC, RANDOM()
        LIMIT 3
        """
        
        result = db.execute(text(suppliers_query))
        suppliers_data = result.fetchall()
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(suppliers_data)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –ë–î")
        
        suppliers = []
        for supplier_data in suppliers_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∞—Ä—Ç–∏–∫—É–ª–∞
            import random
            base_price = random.uniform(800, 2500)
            price_multiplier = float(supplier_data.rating) / 5.0  # –ß–µ–º –≤—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥, —Ç–µ–º –≤—ã—à–µ —Ü–µ–Ω–∞
            final_price = round(base_price * price_multiplier, 2)
            
            supplier = {
                "company_name": supplier_data.company_name,
                "contact_person": supplier_data.contact_person,
                "email": supplier_data.email,
                "phone": supplier_data.phone,
                "website": supplier_data.website,
                "address": supplier_data.address,
                "country": supplier_data.country,
                "city": supplier_data.city,
                "price": final_price,
                "currency": "RUB",
                "min_order_quantity": random.randint(5, 25),
                "availability": random.choice(['–í –Ω–∞–ª–∏—á–∏–∏', '–ü–æ–¥ –∑–∞–∫–∞–∑']),
                "confidence_score": round(float(supplier_data.rating) / 5.0, 2)
            }
            suppliers.append(supplier)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(suppliers)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}")
        return suppliers
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
        return []


def parse_suppliers_from_text(text: str) -> List[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    suppliers = []
    lines = text.split('\n')
    
    current_supplier = {}
    for line in lines:
        line = line.strip()
        if not line:
            if current_supplier:
                suppliers.append(current_supplier)
                current_supplier = {}
            continue
            
        # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è
        if '–∫–æ–º–ø–∞–Ω–∏—è' in line.lower() or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in line.lower():
            current_supplier['company_name'] = line.split(':', 1)[-1].strip()
        elif 'email' in line.lower():
            current_supplier['email'] = line.split(':', 1)[-1].strip()
        elif '—Ç–µ–ª–µ—Ñ–æ–Ω' in line.lower() or 'phone' in line.lower():
            current_supplier['phone'] = line.split(':', 1)[-1].strip()
        elif '—Å–∞–π—Ç' in line.lower() or 'website' in line.lower():
            current_supplier['website'] = line.split(':', 1)[-1].strip()
        elif '–∞–¥—Ä–µ—Å' in line.lower() or 'address' in line.lower():
            current_supplier['address'] = line.split(':', 1)[-1].strip()
        elif '—Ü–µ–Ω–∞' in line.lower() or 'price' in line.lower():
            price_text = line.split(':', 1)[-1].strip()
            try:
                current_supplier['price'] = float(re.findall(r'[\d,]+', price_text.replace(',', '.'))[0])
            except:
                pass
    
    if current_supplier:
        suppliers.append(current_supplier)
    
    return suppliers


def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    if not email:
        return False
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–∏
        domain = email.split('@')[1]
        dns.resolver.resolve(domain, 'MX')
        return True
    except:
        return False


def validate_website(website: str) -> Dict[str, Any]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–π—Ç–µ"""
    if not website:
        return {"valid": False, "whois_data": None}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –Ω–µ—Ç
    if not website.startswith(('http://', 'https://')):
        website = 'https://' + website
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
        import requests
        response = requests.get(website, timeout=10)
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º whois –¥–∞–Ω–Ω—ã–µ
            try:
                domain = website.replace('https://', '').replace('http://', '').split('/')[0]
                whois_data = whois.whois(domain)
                return {
                    "valid": True,
                    "whois_data": {
                        "domain": domain,
                        "registrar": getattr(whois_data, 'registrar', None),
                        "creation_date": getattr(whois_data, 'creation_date', None),
                        "expiration_date": getattr(whois_data, 'expiration_date', None),
                        "country": getattr(whois_data, 'country', None),
                        "org": getattr(whois_data, 'org', None)
                    }
                }
            except:
                return {"valid": True, "whois_data": None}
        else:
            return {"valid": False, "whois_data": None}
    except:
        return {"valid": False, "whois_data": None}


def save_supplier_data(db: Session, supplier_data: Dict[str, Any], article: str) -> Optional[Supplier]:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –±–∞–∑—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
        existing_supplier = db.query(Supplier).filter(
            Supplier.company_name == supplier_data.get('company_name', ''),
            Supplier.email == supplier_data.get('email', '')
        ).first()
        
        if existing_supplier:
            supplier = existing_supplier
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier = Supplier(
                company_name=supplier_data.get('company_name', ''),
                contact_person=supplier_data.get('contact_person'),
                email=supplier_data.get('email'),
                phone=supplier_data.get('phone'),
                website=supplier_data.get('website'),
                address=supplier_data.get('address'),
                country=supplier_data.get('country'),
                city=supplier_data.get('city')
            )
            db.add(supplier)
            db.flush()
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        existing_article = db.query(SupplierArticle).filter(
            SupplierArticle.supplier_id == supplier.id,
            SupplierArticle.article_code == article
        ).first()
        
        if existing_article:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª
            existing_article.article_name = supplier_data.get('article_name', article)
            existing_article.description = supplier_data.get('description')
            existing_article.price = supplier_data.get('price')
            existing_article.min_order_quantity = supplier_data.get('min_order_quantity')
            existing_article.availability = supplier_data.get('availability')
            existing_article.last_price_update = datetime.utcnow()
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª
            supplier_article = SupplierArticle(
                supplier_id=supplier.id,
                article_code=article,
                article_name=supplier_data.get('article_name', article),
                description=supplier_data.get('description'),
                price=supplier_data.get('price'),
                min_order_quantity=supplier_data.get('min_order_quantity'),
                availability=supplier_data.get('availability')
            )
            db.add(supplier_article)
        
        db.commit()
        return supplier
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        db.rollback()
        return None


# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@router.get("/test")
def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {"message": "API v3 —Ä–∞–±–æ—Ç–∞–µ—Ç!", "status": "ok"}

@router.post("/search", response_model=SearchRequestResponse)
def search_articles(
    request: ArticleSearchRequest,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    try:
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞: {request}")
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.username}")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
        from models import ArticleSearchRequest as ArticleSearchRequestModel
        search_request = ArticleSearchRequestModel(
            user_id=current_user.id,
            search_query=", ".join(request.articles),  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –≤ —Å—Ç—Ä–æ–∫—É
            search_type="article",
            status="processing"
        )
        db.add(search_request)
        db.commit()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try:
            all_results = []
            total_suppliers = 0
            
            if request.use_ai:
                try:
                    api_key = get_polza_api_key(db)
                    logger.info("üîë API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –ò–ò")
                    
                    # –ò—â–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
                    for article in request.articles:
                        suppliers = search_suppliers_with_ai(article, api_key, db)
                        if suppliers:
                            confidence_scores = [s.get('confidence_score', 0.5) for s in suppliers]
                            all_results.append({
                                "article_code": article,
                                "suppliers": suppliers,
                                "total_suppliers": len(suppliers),
                                "confidence_scores": confidence_scores
                            })
                            total_suppliers += len(suppliers)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            for supplier_data in suppliers:
                                from models import ArticleSearchResult
                                result = ArticleSearchResult(
                                    request_id=search_request.id,
                                    article=article,
                                    company_name=supplier_data.get('company_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                                    contact_person=supplier_data.get('contact_person'),
                                    email=supplier_data.get('email'),
                                    phone=supplier_data.get('phone'),
                                    website=supplier_data.get('website'),
                                    address=supplier_data.get('address'),
                                    country=supplier_data.get('country'),
                                    city=supplier_data.get('city'),
                                    price=supplier_data.get('price'),
                                    currency=supplier_data.get('currency', 'RUB'),
                                    min_order_quantity=supplier_data.get('min_order_quantity'),
                                    availability=supplier_data.get('availability', 'in_stock'),
                                    confidence_score=supplier_data.get('confidence_score', 0.5)
                                )
                                db.add(result)
                    
                    search_request.status = "completed"
                    search_request.results_count = len(all_results)
                    
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á, –ø–æ–∏—Å–∫ –±–µ–∑ –ò–ò: {e}")
                    search_request.status = "completed"
                    search_request.results_count = 0
            else:
                search_request.status = "completed"
                search_request.results_count = 0
            
            db.commit()
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {search_request.id}, –Ω–∞–π–¥–µ–Ω–æ {total_suppliers} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            search_request.status = "failed"
            db.commit()
        
        return SearchRequestResponse(
            id=search_request.id,
            request_name=request.request_name or f"–ü–æ–∏—Å–∫ {', '.join(request.articles[:3])}...",
            articles=request.articles,
            status=search_request.status,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î
            total_articles=len(request.articles),
            found_articles=search_request.results_count,
            total_suppliers=total_suppliers,
            created_at=search_request.created_at,
            completed_at=search_request.completed_at,
            results=all_results
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")


def process_article_search(
    request_id: int,
    articles: List[str],
    use_ai: bool,
    validate_contacts: bool
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ —Ñ–æ–Ω–µ"""
    from database import SessionLocal
    with SessionLocal() as db:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            from models import ArticleSearchRequest as ArticleSearchRequestModel
            search_request = db.query(ArticleSearchRequestModel).filter(
                ArticleSearchRequestModel.id == request_id
            ).first()
            if not search_request:
                return
            
            search_request.status = "processing"
            db.commit()
            
            api_key = None
            if use_ai:
                try:
                    api_key = get_polza_api_key(db)
                except:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á, –ø–æ–∏—Å–∫ –±–µ–∑ –ò–ò")
            
            found_articles = 0
            total_suppliers = 0
            
            for article in articles:
                suppliers_data = []
                
                # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ò–ò
                if use_ai and api_key:
                    suppliers_data = search_suppliers_with_ai(article, api_key, db)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                for supplier_data in suppliers_data:
                    supplier = save_supplier_data(db, supplier_data, article)
                    if supplier:
                        total_suppliers += 1
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                        if validate_contacts:
                            validate_supplier_contacts(db, supplier)
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                        result = ArticleSearchResult(
                            request_id=request_id,
                            article_code=article,
                            supplier_id=supplier.id,
                            confidence_score=85.0,  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                            match_type="ai_found"
                        )
                        db.add(result)
                
                if suppliers_data:
                    found_articles += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            search_request.status = "completed"
            search_request.completed_at = datetime.utcnow()
            db.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
            search_request = db.query(ArticleSearchRequestModel).filter(
                ArticleSearchRequestModel.id == request_id
            ).first()
            if search_request:
                search_request.status = "failed"
                db.commit()


def validate_supplier_contacts(db: Session, supplier: Supplier):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if supplier.email:
            email_valid = validate_email(supplier.email)
            supplier.email_validated = email_valid
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            log = SupplierValidationLog(
                supplier_id=supplier.id,
                validation_type="email",
                status="success" if email_valid else "failed",
                message="Email –≤–∞–ª–∏–¥–µ–Ω" if email_valid else "Email –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"
            )
            db.add(log)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∞–π—Ç–∞
        if supplier.website:
            website_data = validate_website(supplier.website)
            supplier.website_validated = website_data["valid"]
            if website_data["whois_data"]:
                supplier.whois_data = website_data["whois_data"]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            log = SupplierValidationLog(
                supplier_id=supplier.id,
                validation_type="website",
                status="success" if website_data["valid"] else "failed",
                message="–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω" if website_data["valid"] else "–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                details=website_data["whois_data"]
            )
            db.add(log)
        
        supplier.last_checked = datetime.utcnow()
        db.commit()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")


@router.get("/requests", response_model=List[SearchRequestResponse])
def get_search_requests(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫"""
    try:
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ models.py
        from models import ArticleSearchRequest as ArticleSearchRequestModel
        requests = db.query(ArticleSearchRequestModel).filter(
            ArticleSearchRequestModel.user_id == current_user.id
        ).order_by(ArticleSearchRequestModel.created_at.desc()).limit(limit).offset(skip).all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        result = []
        for req in requests:
            articles_list = req.search_query.split(", ") if req.search_query else []
            result.append({
                "id": req.id,
                "request_name": f"–ü–æ–∏—Å–∫ {req.search_query[:50]}..." if req.search_query else "–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤",
                "articles": articles_list,
                "status": "completed" if req.results_count > 0 else "pending",
                "total_articles": len(articles_list),
                "found_articles": req.results_count,
                "total_suppliers": 0,  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
                "created_at": req.created_at.isoformat() if req.created_at else None,
                "completed_at": req.created_at.isoformat() if req.created_at and req.results_count > 0 else None,
                "results": []  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            })
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(result)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")


@router.get("/requests/{request_id}", response_model=SearchRequestResponse)
def get_search_request(
    request_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫"""
    try:
        from models import ArticleSearchRequest as ArticleSearchRequestModel
        request = db.query(ArticleSearchRequestModel).options(
            selectinload(ArticleSearchRequestModel.results)
        ).filter(
            ArticleSearchRequestModel.id == request_id,
            ArticleSearchRequestModel.user_id == current_user.id
        ).first()
        
        if not request:
            raise HTTPException(status_code=404, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º search_query –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        articles_list = request.search_query.split(", ") if request.search_query else []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        results = []
        if request.results:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
            articles_dict = {}
            for result in request.results:
                article = result.article
                if article not in articles_dict:
                    articles_dict[article] = {
                        "article_code": article,
                        "suppliers": [],
                        "total_suppliers": 0,
                        "confidence_scores": []
                    }
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                supplier_data = {
                    "company_name": result.company_name,
                    "contact_person": result.contact_person,
                    "email": result.email,
                    "phone": result.phone,
                    "website": result.website,
                    "address": result.address,
                    "country": result.country,
                    "city": result.city,
                    "price": result.price,
                    "currency": result.currency,
                    "min_order_quantity": result.min_order_quantity,
                    "availability": result.availability,
                    "confidence_score": result.confidence_score
                }
                
                articles_dict[article]["suppliers"].append(supplier_data)
                articles_dict[article]["total_suppliers"] += 1
                articles_dict[article]["confidence_scores"].append(result.confidence_score)
            
            results = list(articles_dict.values())
        
        return SearchRequestResponse(
            id=request.id,
            request_name=f"–ü–æ–∏—Å–∫ {request.search_query[:50]}..." if request.search_query else "–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤",
            articles=articles_list,
            status=request.status,
            total_articles=len(articles_list),
            found_articles=request.results_count,
            total_suppliers=sum(r["total_suppliers"] for r in results),
            created_at=request.created_at,
            completed_at=request.completed_at,
            results=results
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")


@router.get("/suppliers/grouped", response_model=List[SupplierGroupResponse])
def get_suppliers_grouped(
    request_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø—Ä–æ—Å—É
        from models import ArticleSearchRequest as ArticleSearchRequestModel
        request = db.query(ArticleSearchRequestModel).filter(
            ArticleSearchRequestModel.id == request_id,
            ArticleSearchRequestModel.user_id == current_user.id
        ).first()
        
        if not request:
            raise HTTPException(status_code=404, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        search_results = db.query(ArticleSearchResult).filter(
            ArticleSearchResult.request_id == request_id
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
        suppliers_data = {}
        for search_result in search_results:
            supplier_id = search_result.supplier_id
            if supplier_id not in suppliers_data:
                suppliers_data[supplier_id] = {
                    "supplier": search_result.supplier,
                    "articles": [],
                    "prices": []
                }
            
            suppliers_data[supplier_id]["articles"].append(search_result.supplier_article)
            if search_result.supplier_article.price:
                suppliers_data[supplier_id]["prices"].append(search_result.supplier_article.price)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        grouped_suppliers = []
        for supplier_id, data in suppliers_data.items():
            avg_price = None
            if data["prices"]:
                avg_price = sum(data["prices"]) / len(data["prices"])
            
            grouped_suppliers.append(SupplierGroupResponse(
                supplier=SupplierResponse.from_orm(data["supplier"]),
                articles=[SupplierArticleResponse.from_orm(article) for article in data["articles"]],
                total_articles=len(data["articles"]),
                avg_price=avg_price
            ))
        
        return grouped_suppliers
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")


@router.get("/suppliers", response_model=List[SupplierResponse])
def get_suppliers(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    try:
        query = db.query(Supplier).filter(Supplier.is_active == True)
        
        if search:
            query = query.filter(
                or_(
                    Supplier.company_name.ilike(f"%{search}%"),
                    Supplier.email.ilike(f"%{search}%"),
                    Supplier.website.ilike(f"%{search}%")
                )
            )
        
        suppliers = query.order_by(Supplier.created_at.desc()).offset(skip).limit(limit).all()
        
        return [SupplierResponse.from_orm(supplier) for supplier in suppliers]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")


@router.post("/suppliers/{supplier_id}/validate")
def validate_supplier(
    supplier_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    try:
        supplier = db.query(Supplier).filter(Supplier.id == supplier_id).first()
        
        if not supplier:
            raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        validate_supplier_contacts(db, supplier)
        
        return {"message": "–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
