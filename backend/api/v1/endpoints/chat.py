from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc
from sqlalchemy.orm import selectinload
from typing import List, Optional
from datetime import datetime
import logging

from database import get_db
from models import User, AIChatSession, AIChatMessage
from ..dependencies import get_current_user
from ..schemas import (
    ChatSessionCreate, 
    ChatSessionResponse, 
    ChatMessageCreate,
    ChatMessageResponse
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/sessions/", response_model=List[ChatSessionResponse])
async def get_chat_sessions(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = await db.execute(
            select(AIChatSession)
            .where(AIChatSession.user_id == current_user.id)
            .order_by(desc(AIChatSession.updated_at))
            .options(selectinload(AIChatSession.messages))
        )
        sessions = result.scalars().all()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
        return [
            ChatSessionResponse(
                id=session.id,
                title=session.title,
                created_at=session.created_at,
                updated_at=session.updated_at,
                messages=[
                    ChatMessageResponse(
                        id=msg.id,
                        message_type=msg.message_type,
                        content=msg.content,
                        files_data=msg.files_data,
                        matching_results=msg.matching_results,
                        is_processing=msg.is_processing,
                        created_at=msg.created_at
                    ) for msg in session.messages
                ] if session.messages else []
            ) for session in sessions
        ]
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {str(e)}")

@router.post("/sessions/", response_model=ChatSessionResponse)
async def create_chat_session(
    session_data: ChatSessionCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    logger.info("üöÄ POST /sessions/ –≤—ã–∑–≤–∞–Ω")
    try:
        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        title = session_data.title
        if not title:
            title = f"–ß–∞—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        logger.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {title}")
        
        new_session = AIChatSession(
            user_id=current_user.id,
            title=title
        )
        
        logger.info(f"üíæ –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î...")
        db.add(new_session)
        await db.commit()
        await db.refresh(new_session)
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {new_session.id}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
        return ChatSessionResponse(
            id=new_session.id,
            title=new_session.title,
            created_at=new_session.created_at,
            updated_at=new_session.updated_at,
            messages=[]  # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

@router.get("/sessions/{session_id}", response_model=ChatSessionResponse)
async def get_chat_session(
    session_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    try:
        result = await db.execute(
            select(AIChatSession)
            .where(
                AIChatSession.id == session_id,
                AIChatSession.user_id == current_user.id
            )
            .options(selectinload(AIChatSession.messages))
        )
        session = result.scalar_one_or_none()
        
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
        return ChatSessionResponse(
            id=session.id,
            title=session.title,
            created_at=session.created_at,
            updated_at=session.updated_at,
            messages=[
                ChatMessageResponse(
                    id=msg.id,
                    message_type=msg.message_type,
                    content=msg.content,
                    files_data=msg.files_data,
                    matching_results=msg.matching_results,
                    is_processing=msg.is_processing,
                    created_at=msg.created_at
                ) for msg in session.messages
            ] if session.messages else []
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

@router.post("/sessions/{session_id}/messages/", response_model=ChatMessageResponse)
async def create_chat_message(
    session_id: int,
    message_data: ChatMessageCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result = await db.execute(
            select(AIChatSession).where(
                AIChatSession.id == session_id,
                AIChatSession.user_id == current_user.id
            )
        )
        session = result.scalar_one_or_none()
        
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = AIChatMessage(
            session_id=session_id,
            message_type="user",
            content=message_data.content,
            files_data=message_data.files_data,
            matching_results=message_data.matching_results,
            is_processing=False
        )
        
        db.add(user_message)
        await db.commit()
        await db.refresh(user_message)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò
        ai_message = AIChatMessage(
            session_id=session_id,
            message_type="ai",
            content="",
            is_processing=True
        )
        
        db.add(ai_message)
        await db.commit()
        await db.refresh(ai_message)
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
        try:
            from .article_matching import process_natural_language_query
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response = await process_natural_language_query(message_data.content, db)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò
            ai_message.content = ai_response.get("message", "")
            ai_message.matching_results = {
                "search_results": ai_response.get("search_results", []),
                "success": ai_response.get("success", False)
            }
            ai_message.is_processing = False
            
            await db.commit()
            await db.refresh(ai_message)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ò: {e}")
            ai_message.content = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
            ai_message.is_processing = False
            await db.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return ChatMessageResponse(
            id=user_message.id,
            message_type=user_message.message_type,
            content=user_message.content,
            files_data=user_message.files_data,
            matching_results=user_message.matching_results,
            is_processing=user_message.is_processing,
            created_at=user_message.created_at
        )
    except HTTPException:
        raise
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

@router.put("/messages/{message_id}/", response_model=ChatMessageResponse)
async def update_chat_message(
    message_id: int,
    message_data: ChatMessageCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        result = await db.execute(
            select(AIChatMessage)
            .join(AIChatSession)
            .where(
                AIChatMessage.id == message_id,
                AIChatSession.user_id == current_user.id
            )
        )
        message = result.scalar_one_or_none()
        
        if not message:
            raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        message.content = message_data.content
        message.files_data = message_data.files_data
        message.matching_results = message_data.matching_results
        
        await db.commit()
        await db.refresh(message)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
        return ChatMessageResponse(
            id=message.id,
            message_type=message.message_type,
            content=message.content,
            files_data=message.files_data,
            matching_results=message.matching_results,
            is_processing=message.is_processing,
            created_at=message.created_at
        )
    except HTTPException:
        raise
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

@router.delete("/sessions/{session_id}/")
async def delete_chat_session(
    session_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    try:
        result = await db.execute(
            select(AIChatSession).where(
                AIChatSession.id == session_id,
                AIChatSession.user_id == current_user.id
            )
        )
        session = result.scalar_one_or_none()
        
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        await db.delete(session)
        await db.commit()
        
        return {"message": "–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞"}
    except HTTPException:
        raise
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")