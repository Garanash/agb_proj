from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from typing import List

from database import get_db
from models import Department, User, UserRole
from ..schemas import Department as DepartmentSchema, DepartmentList, DepartmentCreateResponse, DepartmentCreate, DepartmentUpdate, DepartmentReorderRequest
from .auth import get_current_user

router = APIRouter()


def check_admin(current_user: User):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if current_user.role != UserRole.ADMIN:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )


@router.get("/list", response_model=DepartmentList)
async def get_departments(
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤"""
    result = await db.execute(
        select(Department)
        .where(Department.is_active == True)
        .order_by(Department.sort_order.asc(), Department.id.asc())
        .options(
            selectinload(Department.head),
            selectinload(Department.employees)
            # –ò—Å–∫–ª—é—á–∞–µ–º company_employees –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
        )
    )
    departments = result.scalars().all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    departments_list = []
    for dept in departments:
        dept_dict = {
            "id": dept.id,
            "name": dept.name,
            "description": dept.description,
            "is_active": dept.is_active,
            "sort_order": dept.sort_order,
            "created_at": dept.created_at.isoformat(),
            "updated_at": dept.updated_at.isoformat() if dept.updated_at else None,
            "head_id": dept.head_id,
            "head": {
                "id": dept.head.id,
                "username": dept.head.username,
                "role": dept.head.role.value if hasattr(dept.head.role, 'value') else str(dept.head.role),
                "is_active": dept.head.is_active
            } if dept.head else None,
            "employees": [
                {
                    "id": emp.id,
                    "username": emp.username,
                    "role": emp.role.value if hasattr(emp.role, 'value') else str(emp.role),
                    "is_active": emp.is_active
                } for emp in dept.employees
            ] if dept.employees else []
        }
        departments_list.append(dept_dict)
    
    return DepartmentList(
        departments=departments_list,
        total=len(departments_list)
    )


# –†–µ–¥–∏—Ä–µ–∫—Ç —Ä–æ—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
@router.get("/", response_model=DepartmentList)
async def get_departments_root(
    db: AsyncSession = Depends(get_db)
):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /list –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return await get_departments(db)


@router.get("/create/", response_model=List[DepartmentList])
async def get_departments_create_slash(
    db: AsyncSession = Depends(get_db)
):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /list –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å create/"""
    return await get_departments(db)


# POST —Ä–æ—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
@router.post("/", response_model=DepartmentCreateResponse, status_code=status.HTTP_201_CREATED)
async def create_department_root(
    department_data: DepartmentCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /create –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend POST /api/departments/"""
    return await create_department(department_data, current_user, db)


@router.get("/{department_id}", response_model=DepartmentCreateResponse)
async def get_department(
    department_id: int, 
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –ø–æ ID"""
    result = await db.execute(
        select(Department)
        .where(Department.id == department_id)
        .options(
            selectinload(Department.head),
            selectinload(Department.employees)
        )
    )
    department = result.scalar_one_or_none()
    
    if not department:
        raise HTTPException(status_code=404, detail="–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return department


@router.post("/create", response_model=DepartmentCreateResponse, status_code=status.HTTP_201_CREATED)
async def create_department(
    department_data: DepartmentCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    check_admin(current_user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    result = await db.execute(select(Department).where(Department.name == department_data.name))
    existing_department = result.scalar_one_or_none()
    
    if existing_department:
        raise HTTPException(status_code=400, detail="–û—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if department_data.head_id:
        result = await db.execute(select(User).where(User.id == department_data.head_id))
        head_user = result.scalar_one_or_none()
        if not head_user:
            raise HTTPException(status_code=400, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    department = Department(
        name=department_data.name,
        description=department_data.description,
        head_id=department_data.head_id
    )
    
    db.add(department)
    await db.commit()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    result = await db.execute(
        select(Department)
        .where(Department.id == department.id)
        .options(
            selectinload(Department.head),
            selectinload(Department.employees)
        )
    )
    created_department = result.scalar_one()
    
    return DepartmentCreateResponse(
        success=True,
        message="–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        data=created_department
    )


@router.put("/{department_id}", response_model=DepartmentCreateResponse)
async def update_department(
    department_id: int,
    department_data: DepartmentUpdate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    check_admin(current_user)
    
    result = await db.execute(select(Department).where(Department.id == department_id))
    department = result.scalar_one_or_none()
    
    if not department:
        raise HTTPException(status_code=404, detail="–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    if department_data.name and department_data.name != department.name:
        result = await db.execute(select(Department).where(Department.name == department_data.name))
        existing_department = result.scalar_one_or_none()
        if existing_department:
            raise HTTPException(status_code=400, detail="–û—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if department_data.head_id:
        result = await db.execute(select(User).where(User.id == department_data.head_id))
        head_user = result.scalar_one_or_none()
        if not head_user:
            raise HTTPException(status_code=400, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    update_data = department_data.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(department, field, value)
    
    await db.commit()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    result = await db.execute(
        select(Department)
        .where(Department.id == department_id)
        .options(
            selectinload(Department.head),
            selectinload(Department.employees)
        )
    )
    updated_department = result.scalar_one()
    
    return updated_department


@router.delete("/{department_id}")
async def delete_department(
    department_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    check_admin(current_user)
    
    result = await db.execute(select(Department).where(Department.id == department_id))
    department = result.scalar_one_or_none()
    
    if not department:
        raise HTTPException(status_code=404, detail="–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    department.is_active = False
    
    await db.commit()
    
    return {"message": "–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}


@router.put("/reorder")
async def reorder_departments(
    departments: List[dict],
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ—Ç–¥–µ–ª–æ–≤"""
    print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤: {departments}")
    print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–¥–µ–ª–æ–≤: {len(departments)}")
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER]:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    try:
        for dept_order in departments:
            dept_id = dept_order.get("id")
            sort_order = dept_order.get("sort_order")
            print(f"üîç –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª {dept_id} —Å –ø–æ—Ä—è–¥–∫–æ–º {sort_order}")
            
            if dept_id and sort_order is not None:
                result = await db.execute(
                    select(Department).where(Department.id == dept_id)
                )
                department = result.scalar_one_or_none()
                
                if department:
                    department.sort_order = sort_order
                    db.add(department)
                    print(f"‚úÖ –û—Ç–¥–µ–ª {dept_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    print(f"‚ùå –û—Ç–¥–µ–ª {dept_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await db.commit()
        print("‚úÖ –í—Å–µ –æ—Ç–¥–µ–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return {"message": "–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}
    
    except Exception as e:
        await db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞: {str(e)}")


@router.get("/{department_id}/employees", response_model=List[dict])
async def get_department_employees(
    department_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–∞"""
    result = await db.execute(
        select(User).where(User.department_id == department_id, User.is_active == True)
    )
    employees = result.scalars().all()
    
    return [
        {
            "id": emp.id,
            "full_name": emp.full_name,
            "position": emp.position,
            "email": emp.email,
            "phone": emp.phone
        }
        for emp in employees
    ]
