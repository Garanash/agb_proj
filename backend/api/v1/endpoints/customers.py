from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from typing import List
import bcrypt

from database import get_db
from models import User, CustomerProfile, UserRole
from ..schemas import (
    CustomerRegistration,
    CustomerProfile as CustomerProfileSchema,
    CustomerProfileUpdate,
    UserResponse as UserSchema
)
from .auth import get_current_user

router = APIRouter(prefix="/customers", tags=["customers"])


@router.post("/register")
async def register_customer(
    customer_data: CustomerRegistration,
    db: AsyncSession = Depends(get_db)
):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (–∫–æ–º–ø–∞–Ω–∏–∏)"""

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {customer_data.dict()}")
    print(f"üìß Email –∫–æ–º–ø–∞–Ω–∏–∏: {customer_data.company_email}")
    print(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {customer_data.contact_person}")
    print(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {customer_data.company_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –∑–∞–Ω—è—Ç
    result = await db.execute(select(User).where(User.email == customer_data.company_email))
    existing_user = result.scalars().first()
    if existing_user:
        print(f"‚ùå Email —É–∂–µ –∑–∞–Ω—è—Ç: {customer_data.company_email}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    import secrets
    import string
    password_length = 12
    password_chars = string.ascii_letters + string.digits + "!@#$%^&*"
    generated_password = ''.join(secrets.choice(password_chars) for _ in range(password_length))
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hashed_password = bcrypt.hashpw(
        generated_password.encode('utf-8'),
        bcrypt.gensalt()
    ).decode('utf-8')

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username: —Ñ–∞–º–∏–ª–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ + –¥–æ–º–µ–Ω –≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ –Ω–∞ —á–∞—Å—Ç–∏ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)
    contact_parts = customer_data.contact_person.strip().split()
    last_name = contact_parts[0] if contact_parts else "user"  # –§–∞–º–∏–ª–∏—è –∏–ª–∏ fallback

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ email –∫–æ–º–ø–∞–Ω–∏–∏
    email_parts = customer_data.company_email.split('@')
    domain = email_parts[1] if len(email_parts) == 2 else "mail"

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É (–ø—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è)
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
    latin_last_name = ''.join(translit_map.get(char, char) for char in last_name)
    # –£–±–∏—Ä–∞–µ–º –Ω–µ-–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    latin_last_name = ''.join(c for c in latin_last_name if c.isalnum()).lower()

    # –°–æ–∑–¥–∞–µ–º username: —Ñ–∞–º–∏–ª–∏—è_–ª–∞—Ç–∏–Ω–∏—Ü–µ–π + –¥–æ–º–µ–Ω
    username = f"{latin_last_name}_{domain}"
    print(f"üî§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω username: {username} (—Ñ–∞–º–∏–ª–∏—è: {last_name} ‚Üí {latin_last_name}, –¥–æ–º–µ–Ω: {domain})")

    base_username = username
    counter = 1

    while True:
        result = await db.execute(select(User).where(User.username == username))
        if not result.scalars().first():
            break
        username = f"{base_username}_{counter}"
        counter += 1
        print(f"üîÑ Username —É–∂–µ –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º: {username}")

    print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π username: {username}")

    # –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
    contact_parts = customer_data.contact_person.strip().split()
    first_name = contact_parts[1] if len(contact_parts) > 1 else contact_parts[0] if contact_parts else "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ"
    last_name = contact_parts[0] if contact_parts else "–õ–∏—Ü–æ"

    print(f"üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} ({first_name} {last_name})")
    print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {generated_password}")
    new_user = User(
        username=username,
        email=customer_data.company_email,
        hashed_password=hashed_password,
        first_name=first_name,
        last_name=last_name,
        middle_name=contact_parts[2] if len(contact_parts) > 2 else None,
        phone=customer_data.company_phone,
        role=UserRole.CUSTOMER,
        is_active=True
    )

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...")
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID={new_user.id}, username={new_user.username}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞
    print(f"üè¢ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {customer_data.company_name}")
    customer_profile = CustomerProfile(
        user_id=new_user.id,
        company_name=customer_data.company_name,
        contact_person=customer_data.contact_person,
        phone=customer_data.company_phone,
        email=customer_data.company_email,
        address=customer_data.address,
        inn=customer_data.inn,
        kpp=customer_data.kpp,
        ogrn=customer_data.ogrn
    )

    db.add(customer_profile)
    await db.commit()
    await db.refresh(customer_profile)
    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω: ID={customer_profile.id}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await db.refresh(new_user)
    print(f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! Username: {new_user.username}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    return {
        "id": new_user.id,
        "username": new_user.username,
        "email": new_user.email,
        "first_name": new_user.first_name,
        "last_name": new_user.last_name,
        "middle_name": new_user.middle_name,
        "role": new_user.role,
        "is_active": new_user.is_active,
        "phone": new_user.phone,
        "created_at": new_user.created_at,
        "generated_password": generated_password
    }


@router.get("/profile", response_model=CustomerProfileSchema)
async def get_customer_profile(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞"""

    if current_user.role != UserRole.CUSTOMER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        )

    result = await db.execute(
        select(CustomerProfile).where(CustomerProfile.user_id == current_user.id)
    )
    profile = result.scalars().first()

    if not profile:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    return profile


@router.put("/profile", response_model=CustomerProfileSchema)
async def update_customer_profile(
    profile_update: CustomerProfileUpdate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞"""

    if current_user.role != UserRole.CUSTOMER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        )

    result = await db.execute(
        select(CustomerProfile).where(CustomerProfile.user_id == current_user.id)
    )
    profile = result.scalars().first()

    if not profile:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    for field, value in profile_update.dict(exclude_unset=True).items():
        if hasattr(profile, field):
            setattr(profile, field, value)

    await db.commit()
    await db.refresh(profile)

    return profile
