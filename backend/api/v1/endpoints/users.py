from fastapi import APIRouter, Depends, HTTPException, Request, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from passlib.context import CryptContext
from typing import List

from database import get_db
from models import User
from ..schemas import UserResponse as UserSchema, UserCreate, UserUpdate, PasswordReset, AdminPasswordReset
from .auth import get_current_user


def transliterate(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É"""
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }

    result = []
    for char in text:
        result.append(translit_dict.get(char, char))
    return ''.join(result)

router = APIRouter()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)


@router.get("/list", response_model=List[UserSchema])
async def read_users(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    result = await db.execute(select(User).where(User.is_active == True))
    users = result.scalars().all()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_list = []
    for user in users:
        user_dict = {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "middle_name": user.middle_name,
            "full_name": user.full_name,
            "role": user.role.value if hasattr(user.role, 'value') else str(user.role),
            "is_active": user.is_active,
            "is_password_changed": user.is_password_changed,
            "phone": user.phone,
            "department_id": user.department_id,
            "position": user.position,
            "avatar_url": user.avatar_url,
            "created_at": user.created_at.isoformat(),
            "updated_at": user.updated_at.isoformat() if user.updated_at else None
        }
        users_list.append(user_dict)
    
    return users_list


@router.get("/chat-users", response_model=List[UserSchema])
async def read_chat_users(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞"""
    result = await db.execute(select(User).where(User.is_active == True))
    users = result.scalars().all()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_list = []
    for user in users:
        user_dict = {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "middle_name": user.middle_name,
            "full_name": user.full_name,
            "role": user.role.value if hasattr(user.role, 'value') else str(user.role),
            "is_active": user.is_active,
            "is_password_changed": user.is_password_changed,
            "phone": user.phone,
            "department_id": user.department_id,
            "position": user.position,
            "avatar_url": user.avatar_url,
            "created_at": user.created_at.isoformat(),
            "updated_at": user.updated_at.isoformat() if user.updated_at else None
        }
        users_list.append(user_dict)
    
    return users_list


@router.get("/deactivated", response_model=List[UserSchema])
async def read_deactivated_users(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    result = await db.execute(select(User).where(User.is_active == False))
    users = result.scalars().all()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_list = []
    for user in users:
        user_dict = {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "middle_name": user.middle_name,
            "full_name": user.full_name,
            "role": user.role.value if hasattr(user.role, 'value') else str(user.role),
            "is_active": user.is_active,
            "is_password_changed": user.is_password_changed,
            "phone": user.phone,
            "department_id": user.department_id,
            "position": user.position,
            "avatar_url": user.avatar_url,
            "created_at": user.created_at.isoformat(),
            "updated_at": user.updated_at.isoformat() if user.updated_at else None
        }
        users_list.append(user_dict)
    
    return users_list


# –†–µ–¥–∏—Ä–µ–∫—Ç —Ä–æ—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
@router.get("/", response_model=List[UserSchema])
async def read_users_root(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /list –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return await read_users(current_user, db)


@router.get("/deactivated/", response_model=List[UserSchema])
async def read_deactivated_users_slash(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /deactivated –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å trailing slash"""
    return await read_deactivated_users(current_user, db)


# POST —Ä–æ—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
@router.post("/")
async def create_user_root(
    request: Request,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /create –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend POST /api/users/"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        raw_data = await request.json()
        print(f"üîç create_user_root: —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç UserCreate –≤—Ä—É—á–Ω—É—é
        user_data = UserCreate(**raw_data)
        print(f"üîç create_user_root: —Å–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç UserCreate: {user_data}")
        
        return await create_user(user_data, current_user, db)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ create_user_root: {e}")
        print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
        if "validation error" in str(e).lower():
            raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        else:
            raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.post("/create")
async def create_user(
    user_data: UserCreate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    try:
        print(f"üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
        print(f"üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(user_data)}")
        print(f"üîç –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö: {user_data.model_dump() if hasattr(user_data, 'model_dump') else user_data.__dict__}")
        print(f"üîç –ü–æ–ª–µ password: {getattr(user_data, 'password', '–ù–ï–¢')}")
        print(f"üîç –ü–æ–ª–µ password —Ä–∞–≤–Ω–æ None: {getattr(user_data, 'password', '–ù–ï–¢') is None}")
        print(f"üîç –ü–æ–ª–µ password —Ä–∞–≤–Ω–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ: {getattr(user_data, 'password', '–ù–ï–¢') == ''}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º username –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if user_data.username:
        username = user_data.username
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º username: –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∏–º–µ–Ω–∏ –∏ –æ—Ç—á–µ—Å—Ç–≤–∞ + . + —Ñ–∞–º–∏–ª–∏—è (–Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ)
        first_initial = transliterate(user_data.first_name[0].upper()) if user_data.first_name else ""
        middle_initial = transliterate(user_data.middle_name[0].upper()) if user_data.middle_name else ""
        last_name_translit = transliterate(user_data.last_name).lower() if user_data.last_name else ""

        if middle_initial:
            username = f"{first_initial}{middle_initial}.{last_name_translit}"
        else:
            username = f"{first_initial}.{last_name_translit}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –∏–ª–∏ email
    result = await db.execute(
        select(User).where((User.username == username) | (User.email == user_data.email))
    )
    existing_user = result.scalar_one_or_none()
    
    if existing_user:
        if existing_user.username == username:
            raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    password = user_data.password
    print(f"üîç –ü–∞—Ä–æ–ª—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {password}")
    if not password:
        from utils.password_generator import generate_secure_password
        password = generate_secure_password(12)
        print(f"üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hashed_password = get_password_hash(password)
    db_user = User(
        username=username,
        email=user_data.email,
        first_name=user_data.first_name,
        last_name=user_data.last_name,
        middle_name=user_data.middle_name,
        hashed_password=hashed_password,
        role=user_data.role,
        phone=user_data.phone,
        department_id=user_data.department_id,
        position=user_data.position,
        is_password_changed=False  # –ü–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    )
    
    db.add(db_user)
    await db.commit()
    await db.refresh(db_user)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    user_dict = {
        "id": db_user.id,
        "username": db_user.username,
        "email": db_user.email,
        "first_name": db_user.first_name,
        "last_name": db_user.last_name,
        "middle_name": db_user.middle_name,
        "full_name": db_user.full_name,
        "role": db_user.role.value if hasattr(db_user.role, 'value') else str(db_user.role),
        "is_active": db_user.is_active,
        "is_password_changed": db_user.is_password_changed,
        "phone": db_user.phone,
        "department_id": db_user.department_id,
        "position": db_user.position,
        "avatar_url": db_user.avatar_url,
        "created_at": db_user.created_at.isoformat(),
        "updated_at": db_user.updated_at.isoformat() if db_user.updated_at else None,
        "generated_password": password  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    }
    
    return user_dict


@router.get("/{user_id}", response_model=UserSchema)
async def read_user(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()
    
    if user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"üîç GET user {user_id}: first_name='{user.first_name}', last_name='{user.last_name}', middle_name='{user.middle_name}', position='{user.position}'")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è)
    user_dict = {
        "id": user.id,
        "username": user.username,
        "email": user.email or None,
        "first_name": user.first_name or None,
        "last_name": user.last_name or None,
        "middle_name": user.middle_name or None,
        "full_name": user.full_name or None,
        "role": user.role.value if hasattr(user.role, 'value') else str(user.role),
        "is_active": user.is_active,
        "phone": user.phone or None,
        "department_id": user.department_id or None,
        "position": user.position or None,
        "avatar_url": user.avatar_url or None,
        "created_at": user.created_at.isoformat(),
        "updated_at": user.updated_at.isoformat() if user.updated_at else None
    }
    
    print(f"üîç Serialized user_dict: {user_dict}")
    
    return user_dict


@router.get("/admin/{user_id}", response_model=UserSchema)
async def read_user_admin(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()
    
    if user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dict = {
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "middle_name": user.middle_name,
        "full_name": user.full_name,
        "role": user.role.value if hasattr(user.role, 'value') else str(user.role),
        "is_active": user.is_active,
        "phone": user.phone,
        "department_id": user.department_id,
        "position": user.position,
        "avatar_url": user.avatar_url,
        "created_at": user.created_at.isoformat(),
        "updated_at": user.updated_at.isoformat() if user.updated_at else None
    }
    
    return user_dict


@router.put("/{user_id}", response_model=UserSchema)
async def update_user(
    user_id: int,
    user_data: UserUpdate,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()
    
    if user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    print(f"üîß Raw user_data: {user_data}")
    print(f"üîß user_data type: {type(user_data)}")
    
    update_data = user_data.model_dump(exclude_unset=True)
    print(f"üîß Updating user {user_id} with data: {update_data}")
    
    if not update_data:
        print("‚ö†Ô∏è No data to update!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        user_dict = {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "middle_name": user.middle_name,
            "full_name": user.full_name,
            "role": user.role.value if hasattr(user.role, 'value') else str(user.role),
            "is_active": user.is_active,
            "is_password_changed": user.is_password_changed,
            "phone": user.phone,
            "department_id": user.department_id,
            "position": user.position,
            "avatar_url": user.avatar_url,
            "created_at": user.created_at.isoformat(),
            "updated_at": user.updated_at.isoformat() if user.updated_at else None
        }
        return user_dict
    
    for field, value in update_data.items():
        print(f"üîß Setting {field} = {value} (type: {type(value)})")
        setattr(user, field, value)
    
    print(f"üîß User before commit: first_name='{user.first_name}', last_name='{user.last_name}', middle_name='{user.middle_name}', position='{user.position}'")
    
    try:
        await db.commit()
        print(f"üîß ‚úÖ Commit successful")
    except Exception as e:
        print(f"üîß ‚ùå Commit failed: {e}")
        await db.rollback()
        raise
    
    print(f"üîß After commit, before refresh")
    
    try:
        await db.refresh(user)
        print(f"üîß ‚úÖ Refresh successful")
    except Exception as e:
        print(f"üîß ‚ùå Refresh failed: {e}")
        raise
        
    print(f"üîß User after commit: first_name='{user.first_name}', last_name='{user.last_name}', middle_name='{user.middle_name}', position='{user.position}'")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dict = {
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "middle_name": user.middle_name,
        "full_name": user.full_name,
        "role": user.role.value if hasattr(user.role, 'value') else str(user.role),
        "is_active": user.is_active,
        "phone": user.phone,
        "department_id": user.department_id,
        "position": user.position,
        "avatar_url": user.avatar_url,
        "created_at": user.created_at.isoformat(),
        "updated_at": user.updated_at.isoformat() if user.updated_at else None
    }
    
    return user_dict


@router.delete("/{user_id}")
async def delete_user(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    if user_id == current_user.id:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
    
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()
    
    if user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.is_active = False
    await db.commit()
    
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}


@router.post("/{user_id}/activate")
async def activate_user(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()
    
    if user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if user.is_active:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.is_active = True
    await db.commit()
    
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}


@router.post("/{user_id}/reset-password")
async def reset_user_password_admin(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db)
):
    """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å)"""
    print(f"üîç –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.username}, —Ä–æ–ª—å: {current_user.role}")
    
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()
    
    if user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    from utils.password_generator import generate_secure_password
    new_password = generate_secure_password(12)
    print(f"üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {new_password}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    user.hashed_password = get_password_hash(new_password)
    user.is_password_changed = False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
    
    await db.commit()
    print(f"üîç –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    
    return {
        "message": f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω",
        "generated_password": new_password
    }