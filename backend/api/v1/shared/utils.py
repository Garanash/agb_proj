"""
API v1 - –£—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import re
import hashlib
import secrets
import string
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional, Union
from functools import wraps
import logging

logger = logging.getLogger(__name__)


def generate_random_string(length: int = 32) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))


def generate_hash(data: str, algorithm: str = "sha256") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –æ—Ç —Å—Ç—Ä–æ–∫–∏"""
    hash_obj = hashlib.new(algorithm)
    hash_obj.update(data.encode('utf-8'))
    return hash_obj.hexdigest()


def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç email –∞–¥—Ä–µ—Å"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    if len(digits) == 11 and digits.startswith('7'):
        return True
    if len(digits) == 10 and digits.startswith('9'):
        return True
    
    return False


def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
    digits = re.sub(r'\D', '', phone)
    
    if len(digits) == 11 and digits.startswith('7'):
        return f"+{digits}"
    elif len(digits) == 10 and digits.startswith('9'):
        return f"+7{digits}"
    elif len(digits) == 10 and digits.startswith('8'):
        return f"+7{digits[1:]}"
    
    return phone


def validate_password_strength(password: str) -> tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
    errors = []
    
    if len(password) < 8:
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
    
    if not re.search(r'[A-Z]', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    
    if not re.search(r'[a-z]', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
    
    if not re.search(r'\d', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã")
    
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    
    return len(errors) == 0, errors


def sanitize_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    safe_filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(safe_filename) > 255:
        name, ext = safe_filename.rsplit('.', 1) if '.' in safe_filename else (safe_filename, '')
        safe_filename = name[:255-len(ext)-1] + ('.' + ext if ext else '')
    
    return safe_filename


def get_file_extension(filename: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return '.' + filename.split('.')[-1].lower() if '.' in filename else ''


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"


def get_current_timestamp() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ"""
    return datetime.now(timezone.utc).isoformat()


def parse_timestamp(timestamp_str: str) -> Optional[datetime]:
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        return datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
    except (ValueError, AttributeError):
        return None


def paginate_data(
    data: List[Any],
    page: int = 1,
    size: int = 20
) -> Dict[str, Any]:
    """–ü–∞–≥–∏–Ω–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    total = len(data)
    start = (page - 1) * size
    end = start + size
    
    items = data[start:end]
    total_pages = (total + size - 1) // size
    
    return {
        "items": items,
        "total": total,
        "page": page,
        "size": size,
        "pages": total_pages,
        "has_next": page < total_pages,
        "has_prev": page > 1
    }


def mask_sensitive_data(data: Dict[str, Any], sensitive_fields: List[str]) -> Dict[str, Any]:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    masked_data = data.copy()
    
    for field in sensitive_fields:
        if field in masked_data:
            value = str(masked_data[field])
            if len(value) > 4:
                masked_data[field] = value[:2] + "*" * (len(value) - 4) + value[-2:]
            else:
                masked_data[field] = "*" * len(value)
    
    return masked_data


def log_api_call(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ API"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = datetime.now()
        logger.info(f"üîÑ –í—ã–∑–æ–≤ {func.__name__} –≤ {start_time}")
        
        try:
            result = await func(*args, **kwargs)
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            logger.info(f"‚úÖ {func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.3f}s")
            return result
        except Exception as e:
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            logger.error(f"‚ùå {func.__name__} –æ—à–∏–±–∫–∞ –∑–∞ {duration:.3f}s: {str(e)}")
            raise
    
    return wrapper


def validate_pagination_params(page: int, size: int, max_size: int = 100) -> tuple[int, int]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    if page < 1:
        page = 1
    if size < 1:
        size = 20
    if size > max_size:
        size = max_size
    
    return page, size


def create_response(
    success: bool = True,
    message: str = "",
    data: Optional[Union[Dict, List]] = None,
    error: Optional[str] = None,
    error_code: Optional[str] = None
) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"""
    response = {
        "success": success,
        "timestamp": get_current_timestamp()
    }
    
    if message:
        response["message"] = message
    
    if data is not None:
        response["data"] = data
    
    if error:
        response["error"] = error
        if error_code:
            response["error_code"] = error_code
    
    return response
