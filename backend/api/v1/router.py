"""
API v1 - –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from fastapi import APIRouter
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è API v1
api_router = APIRouter()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
try:
    from .analytics import router as analytics_router
    api_router.include_router(analytics_router, prefix="/analytics", tags=["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
except ImportError:
    pass

try:
    from .cache import router as cache_router
    api_router.include_router(cache_router, prefix="/cache", tags=["üíæ –ö—ç—à"])
except ImportError:
    pass

@api_router.get("/ping")
async def ping():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    return {
        "success": True,
        "message": "API v1 –¥–æ—Å—Ç—É–ø–µ–Ω",
        "data": {
            "status": "ok",
            "version": "1.0.0",
            "timestamp": datetime.now().isoformat()
        }
    }

@api_router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API v1"""
    return {
        "success": True,
        "message": "API v1 –∑–¥–æ—Ä–æ–≤",
        "data": {
            "status": "healthy",
            "service": "AGB Platform API v1.0.0",
            "timestamp": datetime.now().isoformat(),
            "version": "1.0.0"
        }
    }

@api_router.get("/domains")
async def get_api_domains():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö API"""
    domains = {
        "auth": {
            "name": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
            "endpoints": ["/auth/login", "/auth/logout", "/auth/register", "/auth/refresh"]
        },
        "users": {
            "name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", 
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã",
            "endpoints": ["/users", "/users/{id}", "/users/create", "/users/{id}/update"]
        },
        "departments": {
            "name": "–û—Ç–¥–µ–ª—ã",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
            "endpoints": ["/departments", "/departments/{id}"]
        },
        "workflow": {
            "name": "–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏",
            "endpoints": ["/repair-requests", "/contractors", "/customers", "/ved-passports"]
        },
        "content": {
            "name": "–ö–æ–Ω—Ç–µ–Ω—Ç",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏",
            "endpoints": ["/news", "/events", "/team"]
        },
        "communication": {
            "name": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
            "description": "–ß–∞—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "endpoints": ["/chat", "/chat-folders", "/telegram"]
        }
    }
    
    return {
        "success": True,
        "message": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã API",
        "data": domains
    }

@api_router.get("/stats")
async def get_api_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    return {
        "success": True,
        "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API",
        "data": {
            "version": "1.0.0",
            "name": "AGB Platform API",
            "total_endpoints": 15,
            "active_domains": 6,
            "timestamp": datetime.now().isoformat()
        }
    }