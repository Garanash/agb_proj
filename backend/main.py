from fastapi import FastAPI, Request, HTTPException
from sqlalchemy import text
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from database import engine, Base
from datetime import datetime
import os
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if os.getenv("AUTO_INIT_DATA", "false").lower() == "true":
        try:
            from database import SessionLocal
            from models import User
            
            def check_and_init():
                try:
                    with SessionLocal() as db:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                        admin = db.query(User).filter(User.username == "admin").first()
                        if not admin:
                            print("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 scripts/create_admin.py")
                        else:
                            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            check_and_init()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    yield

app = FastAPI(
    title="Felix - –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä Platform",
    description="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä",
    version="1.0.0",
    lifespan=lifespan,
    redirect_slashes=False
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
from fastapi.middleware.cors import CORSMiddleware

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
@app.get("/test-dashboard")
async def test_dashboard_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã dashboard"""
    return {"message": "Dashboard test endpoint is working", "status": "ok", "timestamp": datetime.now().isoformat()}

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:3001"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    expose_headers=["*"],
    max_age=3600
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã v1 –Ω–∞–ø—Ä—è–º—É—é
from api.v1.endpoints.auth import router as auth_router
app.include_router(auth_router, prefix="/api/v1/auth", tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])

from api.v1.endpoints.users import router as users_router
app.include_router(users_router, prefix="/api/v1/users", tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])

from api.v1.endpoints.departments import router as departments_router
app.include_router(departments_router, prefix="/api/v1/departments", tags=["üè¢ –û—Ç–¥–µ–ª—ã"])

from api.v1.endpoints.company_employees import router as company_employees_router
app.include_router(company_employees_router, prefix="/api/v1/company-employees", tags=["üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"])

from api.v1.endpoints.chat import router as chat_router
app.include_router(chat_router, prefix="/api/v1/chat", tags=["üí¨ –ß–∞—Ç"])

from api.v1.endpoints.chat_rooms import router as chat_rooms_router
app.include_router(chat_rooms_router, prefix="/api/v1/chat", tags=["üí¨ –ß–∞—Ç"])

# from api.v1.endpoints.chat_unread import router as chat_unread_router
# app.include_router(chat_unread_router, prefix="/api/v1/chat", tags=["üí¨ –ß–∞—Ç"])

from api.v1.endpoints.chat_ws import router as chat_ws_router
app.include_router(chat_ws_router, prefix="/api/v1/chat", tags=["üí¨ –ß–∞—Ç"])

from api.v1.endpoints.chat_folders import router as chat_folders_router
app.include_router(chat_folders_router, prefix="/api/v1/chat-folders", tags=["üìÅ –ü–∞–ø–∫–∏ —á–∞—Ç–∞"])

from api.v1.endpoints.news import router as news_router
app.include_router(news_router, prefix="/api/v1/news", tags=["üì∞ –ù–æ–≤–æ—Å—Ç–∏"])

from api.v1.endpoints.events import router as events_router
app.include_router(events_router, prefix="/api/v1/events", tags=["üìÖ –°–æ–±—ã—Ç–∏—è"])

from api.v1.endpoints.article_matching import router as article_matching_router
app.include_router(article_matching_router, prefix="/api/v1/article-matching", tags=["üîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"])

from api.v1.endpoints.dashboard import router as dashboard_router
app.include_router(dashboard_router, prefix="/api/v1", tags=["üìä –î–∞—à–±–æ—Ä–¥"])

from api.v1.endpoints.ved_passports_simple import router as ved_passports_router
app.include_router(ved_passports_router, prefix="/api/v1/ved-passports", tags=["üìã –í–≠–î –ø–∞—Å–ø–æ—Ä—Ç–∞"])

from api.v1.endpoints.n8n_integration import router as n8n_router
app.include_router(n8n_router, prefix="/api/v1/n8n", tags=["üîÑ N8N –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"])

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API v3
from api.v3.router import api_router as v3_router
app.include_router(v3_router, prefix="/api/v3", tags=["üîç API v3"])

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.gzip import GZipMiddleware

app.add_middleware(GZipMiddleware, minimum_size=1000)
app.add_middleware(TrustedHostMiddleware, allowed_hosts=["*"])  # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–æ—Å—Ç—ã

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "detail": exc.detail,
            "type": "http_exception",
            "path": str(request.url)
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    print(f"üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "type": "internal_error",
            "path": str(request.url)
        }
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è asyncio.TimeoutError
@app.exception_handler(asyncio.TimeoutError)
async def timeout_exception_handler(request: Request, exc: asyncio.TimeoutError):
    return JSONResponse(
        status_code=504,
        content={
            "detail": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞",
            "type": "timeout_error",
            "path": str(request.url)
        }
    )

print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
if os.path.exists("uploads"):
    app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (legacy endpoint)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from database import AsyncSessionLocal
        from sqlalchemy import text
        
        async with AsyncSessionLocal() as db:
            await db.execute(text("SELECT 1"))
        
        return {
            "status": "healthy", 
            "service": "Felix Backend",
            "database": "connected",
            "timestamp": datetime.now().isoformat(),
            "note": "Use /api/v1/health for versioned health check"
        }
    except Exception as e:
        return {
            "status": "unhealthy", 
            "service": "Felix Backend",
            "database": "disconnected",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/")
async def root():
    return {"message": "Felix - –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä Platform API"}

@app.get("/api/")
async def api_root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è API"""
    return {
        "message": "Felix API",
        "version": "1.0.0",
        "api_versions": {
            "v1": "/api/v1",
            "v1_info": "/api/v1/info",
            "v1_health": "/api/v1/health"
        },
        "documentation": "/docs",
        "openapi": "/openapi.json"
    }

@app.get("/api/debug/routes")
async def debug_routes():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    routes = []
    for route in app.routes:
        if hasattr(route, 'path'):
            routes.append({
                "path": route.path,
                "methods": route.methods if hasattr(route, 'methods') else [],
                "name": route.name if hasattr(route, 'name') else "Unknown"
            })
    return {"routes": routes, "total": len(routes)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)