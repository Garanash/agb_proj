#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/Users/andreydolgov/Desktop/programming/agb_proj/backend')

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
os.environ['DATABASE_URL'] = 'sqlite+aiosqlite:///./test_local.db'

async def setup_database():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        import importlib.util
        spec = importlib.util.spec_from_file_location("database", "/Users/andreydolgov/Desktop/programming/agb_proj/backend/database_test.py")
        db_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(db_module)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        from models import Base, User, UserRole

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with db_module.engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)

        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from sqlalchemy import select
        from passlib.context import CryptContext

        pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

        async with db_module.AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await session.execute(select(User).where(User.username == "admin"))
            existing_user = result.scalar_one_or_none()

            if not existing_user:
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                hashed_password = pwd_context.hash("admin123")
                admin_user = User(
                    username="admin",
                    email="admin@localhost",
                    hashed_password=hashed_password,
                    first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    last_name="–°–∏—Å—Ç–µ–º—ã",
                    role=UserRole.ADMIN,
                    is_active=True
                )
                session.add(admin_user)
                await session.commit()
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            else:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_basic_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π API –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã API...")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        from routers.auth import router as auth_router
        from routers.users import router as users_router
        from routers.chat import router as chat_router

        print("‚úÖ –†–æ—É—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ä–æ—É—Ç–µ—Ä–æ–≤ –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã
        auth_routes = len(list(auth_router.routes))
        users_routes = len(list(users_router.routes))
        chat_routes = len(list(chat_router.routes))

        print(f"‚úÖ Auth —Ä–æ—É—Ç–µ—Ä: {auth_routes} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        print(f"‚úÖ Users —Ä–æ—É—Ç–µ—Ä: {users_routes} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        print(f"‚úÖ Chat —Ä–æ—É—Ç–µ—Ä: {chat_routes} –º–∞—Ä—à—Ä—É—Ç–æ–≤")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –õ–û–ö–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 50)

    # 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_result = await setup_database()

    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_result = await test_basic_api()

    print("\n" + "=" * 50)
    if db_result and api_result:
        print("üéâ –õ–æ–∫–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Docker:")
        print("cd /Users/andreydolgov/Desktop/programming/agb_proj")
        print("./universal_deploy.sh")
        return True
    else:
        print("üí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π")
        return False

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
