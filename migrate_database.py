#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
"""
import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def migrate_database():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"""

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    db_host = os.getenv("DB_HOST", "postgres")
    db_port = os.getenv("DB_PORT", "5432")
    db_name = os.getenv("POSTGRES_DB", "agb_felix")
    db_user = os.getenv("POSTGRES_USER", "felix_user")
    db_password = os.getenv("POSTGRES_PASSWORD", "felix_password")

    print("üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–Æ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(
            host=db_host,
            port=db_port,
            database=db_name,
            user=db_user,
            password=db_password
        )

        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_name}")

        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É company_employees
        print("\nüìã 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã company_employees...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü full_name (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        result = await conn.fetchval("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'company_employees' AND column_name = 'full_name'
        """)

        if result:
            print("   –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å full_name")

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º full_name –≤ first_name (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
            # –ù–æ –æ–±—ã—á–Ω–æ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            await conn.execute("""
                ALTER TABLE company_employees
                ADD COLUMN IF NOT EXISTS first_name VARCHAR(255),
                ADD COLUMN IF NOT EXISTS last_name VARCHAR(255),
                ADD COLUMN IF NOT EXISTS middle_name VARCHAR(255)
            """)

            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: first_name, last_name, middle_name")

            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ full_name –≤ first_name (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            await conn.execute("""
                UPDATE company_employees
                SET first_name = SPLIT_PART(full_name, ' ', 1),
                    last_name = SPLIT_PART(full_name, ' ', 2),
                    middle_name = CASE WHEN array_length(string_to_array(full_name, ' '), 1) > 2
                                      THEN SPLIT_PART(full_name, ' ', 3)
                                      ELSE NULL END
                WHERE first_name IS NULL AND full_name IS NOT NULL
            """)

            print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ full_name")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            await conn.execute("""
                ALTER TABLE company_employees
                ADD COLUMN IF NOT EXISTS first_name VARCHAR(255) DEFAULT '',
                ADD COLUMN IF NOT EXISTS last_name VARCHAR(255) DEFAULT '',
                ADD COLUMN IF NOT EXISTS middle_name VARCHAR(255)
            """)
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã")

        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü is_active –≤ —Ç–∞–±–ª–∏—Ü—É chat_rooms
        print("\nüìã 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã chat_rooms...")

        await conn.execute("""
            ALTER TABLE chat_rooms
            ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE
        """)

        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü is_active")

        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü user_id –≤ —Ç–∞–±–ª–∏—Ü—É chat_folders (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        print("\nüìã 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã chat_folders...")

        result = await conn.fetchval("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'chat_folders' AND column_name = 'user_id'
        """)

        if not result:
            await conn.execute("""
                ALTER TABLE chat_folders
                ADD COLUMN IF NOT EXISTS user_id INTEGER REFERENCES users(id)
            """)
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü user_id")
        else:
            print("   ‚úÖ –°—Ç–æ–ª–±–µ—Ü user_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # 4. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü room_id –≤ —Ç–∞–±–ª–∏—Ü—É chat_folders (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        result = await conn.fetchval("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'chat_folders' AND column_name = 'room_id'
        """)

        if not result:
            await conn.execute("""
                ALTER TABLE chat_folders
                ADD COLUMN IF NOT EXISTS room_id INTEGER REFERENCES chat_rooms(id)
            """)
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü room_id")

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ chat_room_folders
        print("\nüìã 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã chat_room_folders...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        columns = await conn.fetch("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'chat_room_folders'
            ORDER BY column_name
        """)

        print(f"   –°—Ç–æ–ª–±—Ü—ã –≤ chat_room_folders: {[col['column_name'] for col in columns]}")

        # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –º–æ–¥–µ–ª—è—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        print("\nüìã 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")

        tables = await conn.fetch("""
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)

        print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {[t['table_name'] for t in tables]}")

        await conn.close()

        print("\n" + "=" * 50)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüîÑ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
        print("   docker-compose restart backend")
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –≤ company_employees")
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü is_active –≤ chat_rooms")
        print("   ‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ chat_folders")
        print("   ‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ chat_room_folders")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await migrate_database()
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == "__main__":
    asyncio.run(main())
