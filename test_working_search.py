#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π —Ç–µ—Å—Ç –ò–ò —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
"""

import asyncio
import sys
import os
sys.path.append('/Users/andreydolgov/Desktop/programming/agb_proj/backend')

from database import get_db
from models import MatchingNomenclature
from sqlalchemy import select, or_
import re
import json

async def working_search(search_text: str):
    """–†–∞–±–æ—á–∏–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    print(f"üîç –ü–æ–∏—Å–∫: '{search_text}'")
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    numbers = re.findall(r'\d{4,8}', search_text)
    words = re.findall(r'[–∞-—è–ê-–Øa-zA-Z]{3,}', search_text)
    
    print(f"   –ß–∏—Å–ª–∞: {numbers}")
    print(f"   –°–ª–æ–≤–∞: {words}")
    
    async for db in get_db():
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        conditions = []
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–∞–º
        for number in numbers:
            conditions.extend([
                MatchingNomenclature.agb_article.ilike(f"%{number}%"),
                MatchingNomenclature.bl_article.ilike(f"%{number}%"),
                MatchingNomenclature.code_1c.ilike(f"%{number}%")
            ])
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
        for word in words:
            conditions.append(MatchingNomenclature.name.ilike(f"%{word}%"))
        
        # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        conditions.append(MatchingNomenclature.name.ilike(f"%{search_text}%"))
        
        if not conditions:
            return {"search_type": "no_conditions", "matches": []}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        query = select(MatchingNomenclature).where(
            MatchingNomenclature.is_active == True
        ).where(or_(*conditions)).limit(20)
        
        result = await db.execute(query)
        items = result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        matches = []
        for item in items:
            confidence = 0
            match_reason = ""
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            for number in numbers:
                if item.agb_article and number in item.agb_article:
                    confidence = max(confidence, 100)
                    match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ê–ì–ë"
                elif item.bl_article and number in item.bl_article:
                    confidence = max(confidence, 95)
                    match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É BL"
                elif item.code_1c and number in item.code_1c:
                    confidence = max(confidence, 90)
                    match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É 1–°"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
            if confidence < 100 and words:
                word_matches = 0
                for word in words:
                    if word.lower() in item.name.lower():
                        word_matches += 1
                
                if word_matches > 0:
                    word_confidence = (word_matches / len(words)) * 80
                    confidence = max(confidence, word_confidence)
                    match_reason = f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ {word_matches} —Å–ª–æ–≤–∞–º"
            
            if confidence > 0:
                matches.append({
                    "agb_article": item.agb_article,
                    "bl_article": item.bl_article,
                    "name": item.name,
                    "code_1c": item.code_1c,
                    "confidence": int(confidence),
                    "match_reason": match_reason,
                    "is_existing": False
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        matches.sort(key=lambda x: x['confidence'], reverse=True)
        
        result = {
            "search_type": "working_search",
            "matches": matches
        }
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
        
        return result

async def test_all_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ò –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 60)
    
    test_cases = [
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É BL
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É BL",
            "query": "25241",
            "expected": "–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –º—É—Ñ—Ç–∞ HQ"
        },
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ê–ì–ë
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ê–ì–ë", 
            "query": "4535774",
            "expected": "–ö–æ–ª—å—Ü–æ –∫–µ—Ä–Ω–æ—Ä–≤–∞—Ç–µ–ª—å–Ω–æ–µ HQ"
        },
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
            "query": "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –º—É—Ñ—Ç–∞",
            "expected": "–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –º—É—Ñ—Ç–∞"
        },
        
        # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é",
            "query": "–∫–æ–ª—å—Ü–æ –∫–µ—Ä–Ω–æ—Ä–≤–∞—Ç–µ–ª—å–Ω–æ–µ",
            "expected": "–ö–æ–ª—å—Ü–æ –∫–µ—Ä–Ω–æ—Ä–≤–∞—Ç–µ–ª—å–Ω–æ–µ"
        },
        
        # –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞",
            "query": "–±–æ–ª—Ç",
            "expected": "–±–æ–ª—Ç"
        },
        
        # –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞",
            "query": "–≥–∞–π–∫–∞",
            "expected": "–≥–∞–π–∫–∞"
        },
        
        # –¢–µ—Å—Ç 7: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        {
            "name": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º",
            "query": "BL-123456 –±–æ–ª—Ç –ú12",
            "expected": "–±–æ–ª—Ç"
        },
        
        # –¢–µ—Å—Ç 8: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        {
            "name": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º",
            "query": "–ê–ì–ë-789012 –≥–∞–π–∫–∞ –ú10",
            "expected": "–≥–∞–π–∫–∞"
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{'='*60}")
        print(f"–¢–ï–°–¢ {i}: {test_case['name']}")
        print(f"–ó–∞–ø—Ä–æ—Å: '{test_case['query']}'")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{test_case['expected']}'")
        
        try:
            result = await working_search(test_case['query'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = False
            if result['matches']:
                for match in result['matches']:
                    if test_case['expected'].lower() in match['name'].lower():
                        success = True
                        break
            
            test_result = {
                "test_name": test_case['name'],
                "query": test_case['query'],
                "expected": test_case['expected'],
                "success": success,
                "matches_count": len(result['matches']),
                "top_match": result['matches'][0]['name'] if result['matches'] else None
            }
            
            results.append(test_result)
            
            if success:
                print(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
            results.append({
                "test_name": test_case['name'],
                "query": test_case['query'],
                "expected": test_case['expected'],
                "success": False,
                "error": str(e)
            })
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    passed = sum(1 for r in results if r.get('success', False))
    total = len(results)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    for result in results:
        status = "‚úÖ" if result.get('success', False) else "‚ùå"
        print(f"{status} {result['test_name']}: {result.get('top_match', '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π')}")
    
    return results

if __name__ == "__main__":
    asyncio.run(test_all_scenarios())
