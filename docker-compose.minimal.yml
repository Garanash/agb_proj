version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: agb_postgres_minimal
    environment:
      POSTGRES_DB: agb_felix_prod
      POSTGRES_USER: felix_prod_user
      POSTGRES_PASSWORD: felix_password_secure_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U felix_prod_user -d agb_felix_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: agb_backend_minimal
    environment:
      - DATABASE_URL=postgresql://felix_prod_user:felix_password_secure_2024@postgres:5432/agb_felix_prod
      - SECRET_KEY=your-secret-key-change-in-production
      - AUTO_INIT_DATA=true
    volumes:
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod.optimized
    container_name: agb_frontend_minimal
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
