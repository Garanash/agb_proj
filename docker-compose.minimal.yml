version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: agb_postgres_minimal
    env_file:
      - production.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agb_felix_prod}
      POSTGRES_USER: ${POSTGRES_USER:-felix_prod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-production-db.sh:/docker-entrypoint-initdb.d/01-init-production-db.sh:ro
      - ./backend/init_db.py:/docker-entrypoint-initdb.d/02-init-db.py:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-felix_prod_user} -d ${POSTGRES_DB:-agb_felix_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Бекенд - FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: agb_backend_minimal
    env_file:
      - production.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_FIRST_NAME=${ADMIN_FIRST_NAME:-Администратор}
      - ADMIN_LAST_NAME=${ADMIN_LAST_NAME:-Системы}
      - PYTHONWARNINGS=ignore:Unverified HTTPS request
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Фронтенд - Next.js (минимальная версия)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod.minimal
    container_name: agb_frontend_minimal
    env_file:
      - production.env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16