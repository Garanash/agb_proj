#!/usr/bin/env python3

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: python create-admin-db.py
"""

import asyncio
import sys
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select
from passlib.context import CryptContext

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
sys.path.append('/app')
from models import User, UserRole
from database import DATABASE_URL

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

async def create_admin():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_username = "admin"
    admin_password = "admin123"
    admin_email = "admin@almazgeobur.ru"
    admin_first_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    admin_last_name = "–°–∏—Å—Ç–µ–º—ã"

    print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    print(f"–õ–æ–≥–∏–Ω: {admin_username}")
    print(f"Email: {admin_email}")
    print(f"–ò–º—è: {admin_first_name} {admin_last_name}")
    print()

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    engine = create_async_engine(DATABASE_URL, echo=False)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await session.execute(select(User).where(User.username == admin_username))
            existing_admin = result.scalar_one_or_none()

            if existing_admin:
                print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return

            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_user = User(
                username=admin_username,
                email=admin_email,
                first_name=admin_first_name,
                last_name=admin_last_name,
                middle_name="",
                hashed_password=pwd_context.hash(admin_password),
                role=UserRole.ADMIN,
                is_active=True
            )

            session.add(admin_user)
            await session.commit()
            await session.refresh(admin_user)

            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print()
            print("üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
            print(f"–õ–æ–≥–∏–Ω: {admin_username}")
            print(f"–ü–∞—Ä–æ–ª—å: {admin_password}")
            print(f"Email: {admin_email}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await session.rollback()
            raise
        finally:
            await session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await create_admin()

if __name__ == "__main__":
    asyncio.run(main())
