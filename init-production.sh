#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–µ–ø–ª–æ–µ

set -e

echo "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL..."
until docker-compose exec -T postgres pg_isready -U felix_user -d agb_felix; do
  echo "PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º..."
  sleep 5
done

echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤!"

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
echo "üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã..."
docker-compose exec -T backend python -c "
import asyncio
from database import engine
from models import Base

async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    print('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!')

asyncio.run(create_tables())
"

# –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
echo "üë§ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
docker-compose exec -T backend python init_db.py

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
docker-compose exec -T backend python -c "
import asyncio
from database import get_db_url
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

async def check_admin():
    engine = create_async_engine(get_db_url())
    async with engine.connect() as conn:
        result = await conn.execute(text('SELECT COUNT(*) FROM users WHERE role = \"admin\"'))
        count = result.scalar()
        if count > 0:
            print('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!')
        else:
            print('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await engine.dispose()

asyncio.run(check_admin())
"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –í–≠–î
echo "üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –í–≠–î..."
docker-compose exec -T backend python init_ved_nomenclature.py

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã..."
docker-compose exec -T backend python -c "
import asyncio
from database import get_db_url
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

async def check_nomenclature():
    engine = create_async_engine(get_db_url())
    async with engine.connect() as conn:
        result = await conn.execute(text('SELECT COUNT(*) FROM ved_nomenclature'))
        count = result.scalar()
        print(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ø–æ–∑–∏—Ü–∏–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –í–≠–î')
    await engine.dispose()

asyncio.run(check_nomenclature())
"

echo "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:"
echo "- ‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã"
echo "- ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (admin/admin123)"
echo "- ‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –í–≠–î –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
echo ""
echo "üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!"
