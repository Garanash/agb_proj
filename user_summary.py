#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import subprocess
from collections import Counter

def get_user_summary():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        print("üìä –°–í–û–î–ö–ê –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú –í –ë–ê–ó–ï –î–ê–ù–ù–´–• DOCKER")
        print("=" * 60)
        
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        sql_query = """
        SELECT 
            id,
            username,
            email,
            first_name,
            last_name,
            middle_name,
            role,
            is_active,
            created_at
        FROM users 
        ORDER BY id;
        """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Docker exec
        cmd = [
            "docker", "exec", "agb_proj-db-1",
            "psql", "-U", "felix_user", "-d", "agb_felix",
            "-t", "-c", sql_query.strip()
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            output = result.stdout.strip()
            if output:
                lines = output.strip().split('\n')
                users = []
                roles = []
                active_count = 0
                inactive_count = 0
                
                for line in lines:
                    if line.strip():
                        parts = [part.strip() for part in line.split('|')]
                        if len(parts) >= 8:
                            user_id = parts[0]
                            username = parts[1]
                            email = parts[2]
                            first_name = parts[3]
                            last_name = parts[4]
                            role = parts[6]
                            is_active = parts[7]
                            
                            users.append({
                                'id': user_id,
                                'username': username,
                                'name': f"{first_name} {last_name}",
                                'role': role,
                                'active': is_active == 't'
                            })
                            
                            roles.append(role)
                            if is_active == 't':
                                active_count += 1
                            else:
                                inactive_count += 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                print(f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_count}")
                print(f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {inactive_count}")
                print()
                
                # –†–æ–ª–∏
                role_counts = Counter(roles)
                print("üîë –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:")
                for role, count in role_counts.items():
                    print(f"  ‚Ä¢ {role}: {count}")
                print()
                
                # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                print("üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for user in users:
                    status = "‚úÖ" if user['active'] else "‚ùå"
                    print(f"  {status} {user['id']:2}. {user['name']} (@{user['username']}) - {user['role']}")
                
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    get_user_summary()
