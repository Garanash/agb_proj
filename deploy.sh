#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root!"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    log "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ production.env –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
create_production_env() {
    if [ ! -f "production.env" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ production.env –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
        cp production.env.example production.env
        warn "–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ production.env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
        warn "–û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏!"
        return 1
    else
        log "production.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úÖ"
        return 0
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
create_ssl_certificates() {
    if [ ! -d "ssl" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
        mkdir -p ssl
        
        # –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout ssl/key.pem \
            -out ssl/cert.pem \
            -subj "/C=RU/ST=Moscow/L=Moscow/O=AGB/CN=localhost"
        
        log "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã ‚úÖ"
        warn "–î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã!"
    else
        log "SSL –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úÖ"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p scripts
    mkdir -p ssl
    mkdir -p uploads/documents
    mkdir -p uploads/portfolio
    mkdir -p uploads/profiles
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
    chmod +x scripts/init-production-db.sh 2>/dev/null || true
    
    log "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã ‚úÖ"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_existing_containers() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º development –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø—É—â–µ–Ω—ã
    docker-compose down 2>/dev/null || true
    
    log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
build_and_start() {
    log "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    docker-compose -f docker-compose.prod.yml build --no-cache
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.prod.yml up -d
    
    log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã ‚úÖ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    if docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -U felix_prod_user -d agb_felix_prod > /dev/null 2>&1; then
        log "PostgreSQL: ‚úÖ"
    else
        error "PostgreSQL: ‚ùå"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend
    if curl -f http://localhost/api/health > /dev/null 2>&1; then
        log "Backend: ‚úÖ"
    else
        error "Backend: ‚ùå"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend
    if curl -f http://localhost/ > /dev/null 2>&1; then
        log "Frontend: ‚úÖ"
    else
        error "Frontend: ‚ùå"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Nginx
    if curl -f http://localhost/health > /dev/null 2>&1; then
        log "Nginx: ‚úÖ"
    else
        error "Nginx: ‚ùå"
        return 1
    fi
    
    log "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ"
    return 0
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
show_deployment_info() {
    log "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    info "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
    echo "  üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost"
    echo "  üîß API: http://localhost/api"
    echo "  üìä Health check: http://localhost/health"
    echo ""
    info "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    echo "  üë§ –õ–æ–≥–∏–Ω: admin"
    echo "  üîë –ü–∞—Ä–æ–ª—å: (–∏–∑ production.env)"
    echo ""
    info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  üìã –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f"
    echo "  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.prod.yml restart"
    echo "  üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose.prod.yml down"
    echo "  üìä –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.prod.yml ps"
    echo ""
    warn "–ù–µ –∑–∞–±—É–¥—å—Ç–µ:"
    echo "  üîê –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ production.env"
    echo "  üîí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è production"
    echo "  üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π—Ä–≤–æ–ª –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AGB Production"
    echo "=================================="
    
    check_root
    check_dependencies
    create_directories
    create_ssl_certificates
    
    if ! create_production_env; then
        error "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ production.env –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞!"
        exit 1
    fi
    
    stop_existing_containers
    build_and_start
    
    if check_health; then
        show_deployment_info
    else
        error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
        echo "docker-compose -f docker-compose.prod.yml logs"
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "stop")
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose -f docker-compose.prod.yml down
        log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ"
        ;;
    "restart")
        log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        docker-compose -f docker-compose.prod.yml restart
        log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã ‚úÖ"
        ;;
    "logs")
        docker-compose -f docker-compose.prod.yml logs -f
        ;;
    "status")
        docker-compose -f docker-compose.prod.yml ps
        ;;
    "health")
        check_health
        ;;
    *)
        main
        ;;
esac
