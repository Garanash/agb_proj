"""
API v1 - Middleware –∏ –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""

from fastapi import Request, Response, HTTPException
from fastapi.middleware.base import BaseHTTPMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
import time
import logging
from typing import Callable, Dict, Any
from datetime import datetime, timezone
import json

from .shared.constants import RateLimit, Security, Logging
from .shared.exceptions import RateLimitError, ServerError, create_error_response
from .shared.utils import get_current_timestamp, mask_sensitive_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class LoggingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, app, log_body: bool = False):
        super().__init__(app)
        self.log_body = log_body
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        start_time = time.time()
        request_id = generate_request_id()
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        request.state.request_id = request_id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        log_data = {
            "request_id": request_id,
            "method": request.method,
            "path": request.url.path,
            "query_params": dict(request.query_params),
            "client_ip": request.client.host,
            "user_agent": request.headers.get("user-agent", ""),
            "timestamp": get_current_timestamp()
        }
        
        if self.log_body and request.method in ["POST", "PUT", "PATCH"]:
            try:
                body = await request.body()
                if body:
                    log_data["body"] = json.loads(body.decode())
            except (json.JSONDecodeError, UnicodeDecodeError):
                log_data["body"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"
        
        logger.info(f"üîÑ {request.method} {request.url.path} - {request.client.host} - ID: {request_id}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            response = await call_next(request)
        except Exception as e:
            process_time = time.time() - start_time
            logger.error(f"‚ùå {request.method} {request.url.path} - –û—à–∏–±–∫–∞ –∑–∞ {process_time:.3f}s - ID: {request_id} - {str(e)}")
            raise
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status_emoji = "‚úÖ" if response.status_code < 400 else "‚ö†Ô∏è" if response.status_code < 500 else "‚ùå"
        logger.info(f"{status_emoji} {request.method} {request.url.path} - {response.status_code} - {process_time:.3f}s - ID: {request_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers["X-Process-Time"] = str(process_time)
        response.headers["X-Request-ID"] = request_id
        
        return response


def generate_request_id() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    import uuid
    return str(uuid.uuid4())[:8]


class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
        
        return response


class RateLimitMiddleware(BaseHTTPMiddleware):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, app, calls: int = 100, period: int = 60, burst_calls: int = 200):
        super().__init__(app)
        self.calls = calls
        self.period = period
        self.burst_calls = burst_calls
        self.clients = {}
        self.blocked_clients = {}
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        client_ip = request.client.host
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
        if client_ip in self.blocked_clients:
            if current_time < self.blocked_clients[client_ip]:
                remaining_time = int(self.blocked_clients[client_ip] - current_time)
                return JSONResponse(
                    status_code=429,
                    content={
                        "success": False,
                        "error": "IP –∞–¥—Ä–µ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                        "error_code": "RATE_LIMIT_BLOCKED",
                        "retry_after": remaining_time,
                        "details": {
                            "reason": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                            "unblock_at": datetime.fromtimestamp(self.blocked_clients[client_ip]).isoformat()
                        }
                    }
                )
            else:
                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                del self.blocked_clients[client_ip]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if client_ip in self.clients:
            self.clients[client_ip] = [
                timestamp for timestamp in self.clients[client_ip]
                if current_time - timestamp < self.period
            ]
        else:
            self.clients[client_ip] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        current_calls = len(self.clients[client_ip])
        
        if current_calls >= self.calls:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            self.blocked_clients[client_ip] = current_time + 300  # 5 –º–∏–Ω—É—Ç
            
            return JSONResponse(
                status_code=429,
                content={
                    "success": False,
                    "error": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
                    "error_code": "RATE_LIMIT_EXCEEDED",
                    "retry_after": 300,
                    "details": {
                        "current_calls": current_calls,
                        "limit": self.calls,
                        "period": self.period,
                        "blocked_until": datetime.fromtimestamp(current_time + 300).isoformat()
                    }
                }
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.clients[client_ip].append(current_time)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
        response = await call_next(request)
        response.headers["X-RateLimit-Limit"] = str(self.calls)
        response.headers["X-RateLimit-Remaining"] = str(self.calls - current_calls - 1)
        response.headers["X-RateLimit-Reset"] = str(int(current_time + self.period))
        
        return response


class APIVersionMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ API"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–∏ API
        response.headers["X-API-Version"] = "1.0.0"
        response.headers["X-API-Status"] = "active"
        
        return response


class ErrorHandlingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        try:
            response = await call_next(request)
            return response
        except HTTPException as e:
            return JSONResponse(
                status_code=e.status_code,
                content=create_error_response(e, get_current_timestamp()).dict()
            )
        except RequestValidationError as e:
            return JSONResponse(
                status_code=422,
                content=create_error_response(
                    HTTPException(status_code=422, detail="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"),
                    get_current_timestamp()
                ).dict()
            )
        except Exception as e:
            logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            return JSONResponse(
                status_code=500,
                content=create_error_response(
                    ServerError("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"),
                    get_current_timestamp()
                ).dict()
            )


class RequestSizeMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    
    def __init__(self, app, max_size: int = 10 * 1024 * 1024):  # 10MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        super().__init__(app)
        self.max_size = max_size
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        content_length = request.headers.get("content-length")
        
        if content_length and int(content_length) > self.max_size:
            return JSONResponse(
                status_code=413,
                content=create_error_response(
                    HTTPException(
                        status_code=413,
                        detail=f"–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π ({self.max_size // (1024*1024)}MB)"
                    ),
                    get_current_timestamp()
                ).dict()
            )
        
        return await call_next(request)


class CORSMiddleware(BaseHTTPMiddleware):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π CORS middleware"""
    
    def __init__(
        self,
        app,
        allow_origins: list = None,
        allow_methods: list = None,
        allow_headers: list = None,
        allow_credentials: bool = True
    ):
        super().__init__(app)
        self.allow_origins = allow_origins or ["*"]
        self.allow_methods = allow_methods or ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
        self.allow_headers = allow_headers or ["*"]
        self.allow_credentials = allow_credentials
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        origin = request.headers.get("origin")
        if origin in self.allow_origins or "*" in self.allow_origins:
            response.headers["Access-Control-Allow-Origin"] = origin if origin else "*"
        
        response.headers["Access-Control-Allow-Methods"] = ", ".join(self.allow_methods)
        response.headers["Access-Control-Allow-Headers"] = ", ".join(self.allow_headers)
        response.headers["Access-Control-Allow-Credentials"] = str(self.allow_credentials).lower()
        response.headers["Access-Control-Max-Age"] = "86400"  # 24 —á–∞—Å–∞
        
        return response


class CacheMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self, app, default_ttl: int = 300):
        super().__init__(app)
        self.default_ttl = default_ttl
        self.cache = {}
        self.cache_timestamps = {}
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
        if request.method != "GET":
            return await call_next(request)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
        cache_key = f"{request.url.path}?{request.query_params}"
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.cache:
            cache_time = self.cache_timestamps.get(cache_key, 0)
            if current_time - cache_time < self.default_ttl:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                cached_response = self.cache[cache_key]
                cached_response.headers["X-Cache"] = "HIT"
                cached_response.headers["X-Cache-TTL"] = str(int(self.default_ttl - (current_time - cache_time)))
                return cached_response
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if response.status_code == 200:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            response_body = b""
            async for chunk in response.body_iterator:
                response_body += chunk
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            from fastapi.responses import Response as FastAPIResponse
            cached_response = FastAPIResponse(
                content=response_body,
                status_code=response.status_code,
                headers=dict(response.headers)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.cache[cache_key] = cached_response
            self.cache_timestamps[cache_key] = current_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∞
            cached_response.headers["X-Cache"] = "MISS"
            cached_response.headers["X-Cache-TTL"] = str(self.default_ttl)
            
            return cached_response
        
        return response


class MetricsMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self, app):
        super().__init__(app)
        self.metrics = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "response_times": [],
            "endpoints": {},
            "status_codes": {},
            "start_time": time.time()
        }
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        start_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.metrics["total_requests"] += 1
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoint = f"{request.method} {request.url.path}"
        if endpoint not in self.metrics["endpoints"]:
            self.metrics["endpoints"][endpoint] = 0
        self.metrics["endpoints"][endpoint] += 1
        
        try:
            response = await call_next(request)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if 200 <= response.status_code < 400:
                self.metrics["successful_requests"] += 1
            else:
                self.metrics["failed_requests"] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã
            status_code = str(response.status_code)
            if status_code not in self.metrics["status_codes"]:
                self.metrics["status_codes"][status_code] = 0
            self.metrics["status_codes"][status_code] += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            response_time = time.time() - start_time
            self.metrics["response_times"].append(response_time)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –≤—Ä–µ–º–µ–Ω –æ—Ç–≤–µ—Ç–∞
            if len(self.metrics["response_times"]) > 1000:
                self.metrics["response_times"] = self.metrics["response_times"][-1000:]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            response.headers["X-Response-Time"] = f"{response_time:.3f}s"
            response.headers["X-Request-ID"] = getattr(request.state, 'request_id', 'unknown')
            
            return response
            
        except Exception as e:
            self.metrics["failed_requests"] += 1
            raise e
    
    def get_metrics(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        current_time = time.time()
        uptime = current_time - self.metrics["start_time"]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        avg_response_time = 0
        if self.metrics["response_times"]:
            avg_response_time = sum(self.metrics["response_times"]) / len(self.metrics["response_times"])
        
        return {
            "uptime_seconds": uptime,
            "total_requests": self.metrics["total_requests"],
            "successful_requests": self.metrics["successful_requests"],
            "failed_requests": self.metrics["failed_requests"],
            "success_rate": self.metrics["successful_requests"] / max(self.metrics["total_requests"], 1) * 100,
            "average_response_time": avg_response_time,
            "requests_per_second": self.metrics["total_requests"] / max(uptime, 1),
            "endpoints": self.metrics["endpoints"],
            "status_codes": self.metrics["status_codes"],
            "timestamp": datetime.fromtimestamp(current_time).isoformat()
        }
