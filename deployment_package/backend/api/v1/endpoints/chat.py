from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import select, desc
from sqlalchemy.orm import selectinload
from typing import List, Optional
from datetime import datetime
import logging

from database import get_db
from models import User, AIChatSession, AIChatMessage, ChatBot
from ..dependencies import get_current_user
from ..schemas import (
    ChatSessionCreate, 
    ChatSessionResponse, 
    ChatMessageCreate,
    ChatMessageResponse
)
from pydantic import BaseModel

class ChatBotCreate(BaseModel):
    name: str
    description: Optional[str] = None
    model_id: Optional[str] = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/sessions/", response_model=List[ChatSessionResponse])
async def get_chat_sessions(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = db.execute(
            select(AIChatSession)
            .where(AIChatSession.user_id == current_user.id)
            .order_by(desc(AIChatSession.updated_at))
            .options(selectinload(AIChatSession.messages))
        )
        sessions = result.scalars().all()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
        return [
            ChatSessionResponse(
                id=session.id,
                title=session.title,
                created_at=session.created_at,
                updated_at=session.updated_at,
                messages=[
                    ChatMessageResponse(
                        id=msg.id,
                        message_type=msg.message_type,
                        content=msg.content,
                        files_data=msg.files_data,
                        matching_results=msg.matching_results,
                        is_processing=msg.is_processing,
                        created_at=msg.created_at
                    ) for msg in session.messages
                ] if session.messages else []
            ) for session in sessions
        ]
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {str(e)}")

@router.post("/sessions/", response_model=ChatSessionResponse)
async def create_chat_session(
    session_data: ChatSessionCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    logger.info("üöÄ POST /sessions/ –≤—ã–∑–≤–∞–Ω")
    try:
        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        title = session_data.title
        if not title:
            title = f"–ß–∞—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        logger.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {title}")
        
        new_session = AIChatSession(
            user_id=current_user.id,
            title=title
        )
        
        logger.info(f"üíæ –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î...")
        db.add(new_session)
        db.commit()
        db.refresh(new_session)
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {new_session.id}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
        return ChatSessionResponse(
            id=new_session.id,
            title=new_session.title,
            created_at=new_session.created_at,
            updated_at=new_session.updated_at,
            messages=[]  # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

@router.get("/sessions/{session_id}", response_model=ChatSessionResponse)
async def get_chat_session(
    session_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    try:
        result = db.execute(
            select(AIChatSession)
            .where(
                AIChatSession.id == session_id,
                AIChatSession.user_id == current_user.id
            )
            .options(selectinload(AIChatSession.messages))
        )
        session = result.scalar_one_or_none()
        
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
        return ChatSessionResponse(
            id=session.id,
            title=session.title,
            created_at=session.created_at,
            updated_at=session.updated_at,
            messages=[
                ChatMessageResponse(
                    id=msg.id,
                    message_type=msg.message_type,
                    content=msg.content,
                    files_data=msg.files_data,
                    matching_results=msg.matching_results,
                    is_processing=msg.is_processing,
                    created_at=msg.created_at
                ) for msg in session.messages
            ] if session.messages else []
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

@router.post("/sessions/{session_id}/messages/", response_model=ChatMessageResponse)
async def create_chat_message(
    session_id: int,
    message_data: ChatMessageCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result = db.execute(
            select(AIChatSession).where(
                AIChatSession.id == session_id,
                AIChatSession.user_id == current_user.id
            )
        )
        session = result.scalar_one_or_none()
        
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = AIChatMessage(
            session_id=session_id,
            message_type="user",
            content=message_data.content,
            files_data=message_data.files_data,
            matching_results=message_data.matching_results,
            is_processing=False
        )
        
        db.add(user_message)
        db.commit()
        db.refresh(user_message)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò
        ai_message = AIChatMessage(
            session_id=session_id,
            message_type="ai",
            content="",
            is_processing=True
        )
        
        db.add(ai_message)
        db.commit()
        db.refresh(ai_message)
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
        try:
            from .article_matching import process_natural_language_query
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            ai_response = await process_natural_language_query(message_data.content, db)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò
            ai_message.content = ai_response.get("message", "")
            ai_message.matching_results = {
                "search_results": ai_response.get("search_results", []),
                "success": ai_response.get("success", False)
            }
            ai_message.is_processing = False
            
            db.commit()
            db.refresh(ai_message)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ò: {e}")
            ai_message.content = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
            ai_message.is_processing = False
            db.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return ChatMessageResponse(
            id=user_message.id,
            message_type=user_message.message_type,
            content=user_message.content,
            files_data=user_message.files_data,
            matching_results=user_message.matching_results,
            is_processing=user_message.is_processing,
            created_at=user_message.created_at
        )
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

@router.put("/messages/{message_id}/", response_model=ChatMessageResponse)
async def update_chat_message(
    message_id: int,
    message_data: ChatMessageCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        result = db.execute(
            select(AIChatMessage)
            .join(AIChatSession)
            .where(
                AIChatMessage.id == message_id,
                AIChatSession.user_id == current_user.id
            )
        )
        message = result.scalar_one_or_none()
        
        if not message:
            raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        message.content = message_data.content
        message.files_data = message_data.files_data
        message.matching_results = message_data.matching_results
        
        db.commit()
        db.refresh(message)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
        return ChatMessageResponse(
            id=message.id,
            message_type=message.message_type,
            content=message.content,
            files_data=message.files_data,
            matching_results=message.matching_results,
            is_processing=message.is_processing,
            created_at=message.created_at
        )
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

@router.delete("/sessions/{session_id}/")
async def delete_chat_session(
    session_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    try:
        result = db.execute(
            select(AIChatSession).where(
                AIChatSession.id == session_id,
                AIChatSession.user_id == current_user.id
            )
        )
        session = result.scalar_one_or_none()
        
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        db.delete(session)
        db.commit()
        
        return {"message": "–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞"}
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
@router.get("/folders/", response_model=List[dict])
def get_folders(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –ø–∞–ø–∫–∏ —á–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–ø–æ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.get("/unread-summary", response_model=dict)
def get_unread_summary(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å–≤–æ–¥–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        return {
            "unread_counts": {},
            "total_unread": 0
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

# Endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
@router.get("/bots/", response_model=List[dict])
def get_chat_bots(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤"""
    try:
        result = db.execute(
            select(ChatBot)
            .where(ChatBot.is_active == True)
            .order_by(ChatBot.created_at.desc())
        )
        bots = result.scalars().all()
        
        return [
            {
                "id": bot.id,
                "name": bot.name,
                "description": bot.description,
                "model_id": bot.model_id,
                "is_active": bot.is_active,
                "created_at": bot.created_at.isoformat() if bot.created_at else None
            } for bot in bots
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.post("/bots/", response_model=dict)
def create_chat_bot(
    bot_data: ChatBotCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ—Ç–æ–≤)
        if current_user.role != "admin":
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        new_bot = ChatBot(
            name=bot_data.name,
            description=bot_data.description,
            model_id=bot_data.model_id,
            is_active=True,
            created_by=current_user.id
        )
        
        db.add(new_bot)
        db.commit()
        db.refresh(new_bot)
        
        return {
            "id": new_bot.id,
            "name": new_bot.name,
            "description": new_bot.description,
            "model_id": new_bot.model_id,
            "is_active": new_bot.is_active,
            "created_at": new_bot.created_at.isoformat() if new_bot.created_at else None
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.put("/bots/{bot_id}/", response_model=dict)
def update_chat_bot(
    bot_id: int,
    name: Optional[str] = None,
    description: Optional[str] = None,
    model_id: Optional[str] = None,
    is_active: Optional[bool] = None,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if current_user.role != "admin":
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        result = db.execute(
            select(ChatBot).where(ChatBot.id == bot_id)
        )
        bot = result.scalar_one_or_none()
        
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if name is not None:
            bot.name = name
        if description is not None:
            bot.description = description
        if model_id is not None:
            bot.model_id = model_id
        if is_active is not None:
            bot.is_active = is_active
        
        db.commit()
        db.refresh(bot)
        
        return {
            "id": bot.id,
            "name": bot.name,
            "description": bot.description,
            "model_id": bot.model_id,
            "is_active": bot.is_active,
            "created_at": bot.created_at.isoformat() if bot.created_at else None
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@router.delete("/bots/{bot_id}/")
def delete_chat_bot(
    bot_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if current_user.role != "admin":
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        result = db.execute(
            select(ChatBot).where(ChatBot.id == bot_id)
        )
        bot = result.scalar_one_or_none()
        
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot.is_active = False
        db.commit()
        
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")