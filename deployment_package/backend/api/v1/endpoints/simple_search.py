"""
–ü—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –ò–ò
"""

from sqlalchemy import select, or_
from sqlalchemy.ext.asyncio import AsyncSession
from models import MatchingNomenclature
import re

def parse_simple_search(search_text: str) -> dict:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_text = search_text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã)
    numbers = re.findall(r'\d{4,8}', search_text)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è)
    words = re.findall(r'[–∞-—è–ê-–Øa-zA-Z]{3,}', search_text)
    
    return {
        'numbers': numbers,
        'words': words,
        'original': search_text
    }

async def simple_smart_search(search_text: str, db: AsyncSession) -> dict:
    """–ü—Ä–æ—Å—Ç–æ–π —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –ò–ò"""
    try:
        print(f"üîç simple_smart_search: '{search_text}'")
        
        # –ü–∞—Ä—Å–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        parsed = parse_simple_search(search_text)
        print(f"   –ß–∏—Å–ª–∞: {parsed['numbers']}")
        print(f"   –°–ª–æ–≤–∞: {parsed['words']}")
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        conditions = []
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–∞–º (–∞—Ä—Ç–∏–∫—É–ª—ã)
        for number in parsed['numbers']:
            conditions.extend([
                MatchingNomenclature.agb_article.ilike(f"%{number}%"),
                MatchingNomenclature.bl_article.ilike(f"%{number}%"),
                MatchingNomenclature.code_1c.ilike(f"%{number}%")
            ])
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º (–Ω–∞–∑–≤–∞–Ω–∏—è)
        for word in parsed['words']:
            conditions.append(MatchingNomenclature.name.ilike(f"%{word}%"))
        
        # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        conditions.append(MatchingNomenclature.name.ilike(f"%{search_text}%"))
        
        if not conditions:
            return {"search_type": "no_conditions", "matches": []}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        query = select(MatchingNomenclature).where(
            MatchingNomenclature.is_active == True
        ).where(or_(*conditions)).limit(20)
        
        result = await db.execute(query)
        items = result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        matches = []
        for item in items:
            confidence = 0
            match_reason = ""
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            for number in parsed['numbers']:
                if item.agb_article and number in item.agb_article:
                    confidence = max(confidence, 100)
                    match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ê–ì–ë"
                elif item.bl_article and number in item.bl_article:
                    confidence = max(confidence, 95)
                    match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É BL"
                elif item.code_1c and number in item.code_1c:
                    confidence = max(confidence, 90)
                    match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É 1–°"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
            if confidence < 100 and parsed['words']:
                word_matches = 0
                for word in parsed['words']:
                    if word.lower() in item.name.lower():
                        word_matches += 1
                
                if word_matches > 0:
                    word_confidence = (word_matches / len(parsed['words'])) * 80
                    confidence = max(confidence, word_confidence)
                    match_reason = f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ {word_matches} —Å–ª–æ–≤–∞–º"
            
            if confidence > 0:
                matches.append({
                    "agb_article": item.agb_article,
                    "bl_article": item.bl_article,
                    "name": item.name,
                    "code_1c": item.code_1c,
                    "confidence": int(confidence),
                    "match_reason": match_reason,
                    "is_existing": False
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        matches.sort(key=lambda x: x['confidence'], reverse=True)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        return {
            "search_type": "simple_search",
            "matches": matches
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ simple_smart_search: {e}")
        import traceback
        traceback.print_exc()
        return {"search_type": "error", "matches": []}
