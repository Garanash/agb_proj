"""
–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_, func, desc
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import httpx
import json
import asyncio
import logging

from database import get_db
from ..schemas import (
    IntegrationCreate, IntegrationUpdate, IntegrationResponse,
    WebhookConfig, IntegrationTestResult, SuccessResponse, ErrorResponse
)
from ..models import SystemSettings, SystemLog
from ..utils import PermissionManager, ActivityLogger, encryption_manager
from ...v1.dependencies import get_current_user
from models import User

router = APIRouter()
logger = logging.getLogger(__name__)


class IntegrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    SUPPORTED_SERVICES = {
        "telegram": {
            "name": "Telegram Bot",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –±–æ—Ç–æ–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "config_fields": ["bot_token", "chat_id", "parse_mode"],
            "webhook_supported": True
        },
        "slack": {
            "name": "Slack",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ Slack –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "config_fields": ["webhook_url", "channel", "username"],
            "webhook_supported": True
        },
        "discord": {
            "name": "Discord",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Discord –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "config_fields": ["webhook_url", "username", "avatar_url"],
            "webhook_supported": True
        },
        "webhook": {
            "name": "Generic Webhook",
            "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π webhook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
            "config_fields": ["url", "method", "headers", "auth_type"],
            "webhook_supported": False
        },
        "n8n": {
            "name": "n8n Automation",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å n8n –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
            "config_fields": ["webhook_url", "api_key", "workflow_id"],
            "webhook_supported": True
        },
        "zapier": {
            "name": "Zapier",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Zapier –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
            "config_fields": ["webhook_url", "api_key"],
            "webhook_supported": True
        }
    }
    
    @staticmethod
    async def test_integration(integration_type: str, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º"""
        try:
            if integration_type == "telegram":
                return await IntegrationManager._test_telegram(config)
            elif integration_type == "slack":
                return await IntegrationManager._test_slack(config)
            elif integration_type == "discord":
                return await IntegrationManager._test_discord(config)
            elif integration_type == "webhook":
                return await IntegrationManager._test_webhook(config)
            elif integration_type == "n8n":
                return await IntegrationManager._test_n8n(config)
            elif integration_type == "zapier":
                return await IntegrationManager._test_zapier(config)
            else:
                return {
                    "success": False,
                    "error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                    "details": f"–¢–∏–ø {integration_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ {integration_type}: {str(e)}")
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                "details": str(e)
            }
    
    @staticmethod
    async def _test_telegram(config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram"""
        bot_token = config.get("bot_token")
        chat_id = config.get("chat_id")
        
        if not bot_token or not chat_id:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                "details": "–¢—Ä–µ–±—É—é—Ç—Å—è bot_token –∏ chat_id"
            }
        
        try:
            async with httpx.AsyncClient() as client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
                response = await client.get(f"https://api.telegram.org/bot{bot_token}/getMe")
                if response.status_code != 200:
                    return {
                        "success": False,
                        "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞",
                        "details": response.text
                    }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = {
                    "chat_id": chat_id,
                    "text": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AGB Platform",
                    "parse_mode": config.get("parse_mode", "HTML")
                }
                
                response = await client.post(
                    f"https://api.telegram.org/bot{bot_token}/sendMessage",
                    json=test_message
                )
                
                if response.status_code == 200:
                    return {
                        "success": True,
                        "message": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                        "bot_info": response.json().get("result", {}).get("from", {})
                    }
                else:
                    return {
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                        "details": response.text
                    }
        except Exception as e:
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram",
                "details": str(e)
            }
    
    @staticmethod
    async def _test_slack(config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack"""
        webhook_url = config.get("webhook_url")
        
        if not webhook_url:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL",
                "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è webhook_url"
            }
        
        try:
            async with httpx.AsyncClient() as client:
                test_payload = {
                    "text": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AGB Platform",
                    "channel": config.get("channel"),
                    "username": config.get("username", "AGB Platform")
                }
                
                response = await client.post(webhook_url, json=test_payload)
                
                if response.status_code == 200:
                    return {
                        "success": True,
                        "message": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ Slack —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    }
                else:
                    return {
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack",
                        "details": response.text
                    }
        except Exception as e:
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Slack",
                "details": str(e)
            }
    
    @staticmethod
    async def _test_discord(config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Discord"""
        webhook_url = config.get("webhook_url")
        
        if not webhook_url:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL",
                "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è webhook_url"
            }
        
        try:
            async with httpx.AsyncClient() as client:
                test_payload = {
                    "content": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AGB Platform",
                    "username": config.get("username", "AGB Platform"),
                    "avatar_url": config.get("avatar_url")
                }
                
                response = await client.post(webhook_url, json=test_payload)
                
                if response.status_code in [200, 204]:
                    return {
                        "success": True,
                        "message": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Discord —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    }
                else:
                    return {
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord",
                        "details": response.text
                    }
        except Exception as e:
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discord",
                "details": str(e)
            }
    
    @staticmethod
    async def _test_webhook(config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π webhook"""
        url = config.get("url")
        method = config.get("method", "POST")
        
        if not url:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL",
                "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è url"
            }
        
        try:
            async with httpx.AsyncClient() as client:
                test_payload = {
                    "test": True,
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AGB Platform",
                    "timestamp": datetime.utcnow().isoformat()
                }
                
                headers = config.get("headers", {})
                if config.get("auth_type") == "bearer":
                    headers["Authorization"] = f"Bearer {config.get('auth_token', '')}"
                elif config.get("auth_type") == "basic":
                    import base64
                    auth_string = f"{config.get('username', '')}:{config.get('password', '')}"
                    headers["Authorization"] = f"Basic {base64.b64encode(auth_string.encode()).decode()}"
                
                if method.upper() == "POST":
                    response = await client.post(url, json=test_payload, headers=headers)
                elif method.upper() == "PUT":
                    response = await client.put(url, json=test_payload, headers=headers)
                else:
                    response = await client.get(url, headers=headers)
                
                return {
                    "success": response.status_code < 400,
                    "message": f"Webhook –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}",
                    "status_code": response.status_code,
                    "response": response.text[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
                }
        except Exception as e:
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ webhook",
                "details": str(e)
            }
    
    @staticmethod
    async def _test_n8n(config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å n8n"""
        webhook_url = config.get("webhook_url")
        api_key = config.get("api_key")
        
        if not webhook_url:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL",
                "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è webhook_url"
            }
        
        try:
            async with httpx.AsyncClient() as client:
                test_payload = {
                    "test": True,
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AGB Platform",
                    "timestamp": datetime.utcnow().isoformat()
                }
                
                headers = {}
                if api_key:
                    headers["X-N8N-API-KEY"] = api_key
                
                response = await client.post(webhook_url, json=test_payload, headers=headers)
                
                if response.status_code in [200, 201]:
                    return {
                        "success": True,
                        "message": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å n8n —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    }
                else:
                    return {
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n",
                        "details": response.text
                    }
        except Exception as e:
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n",
                "details": str(e)
            }
    
    @staticmethod
    async def _test_zapier(config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Zapier"""
        webhook_url = config.get("webhook_url")
        
        if not webhook_url:
            return {
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL",
                "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è webhook_url"
            }
        
        try:
            async with httpx.AsyncClient() as client:
                test_payload = {
                    "test": True,
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AGB Platform",
                    "timestamp": datetime.utcnow().isoformat()
                }
                
                response = await client.post(webhook_url, json=test_payload)
                
                if response.status_code in [200, 201]:
                    return {
                        "success": True,
                        "message": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Zapier —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    }
                else:
                    return {
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Zapier",
                        "details": response.text
                    }
        except Exception as e:
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Zapier",
                "details": str(e)
            }
    
    @staticmethod
    async def send_notification(
        integration_type: str, 
        config: Dict[str, Any], 
        message: str, 
        data: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        try:
            if integration_type == "telegram":
                return await IntegrationManager._send_telegram_message(config, message, data)
            elif integration_type == "slack":
                return await IntegrationManager._send_slack_message(config, message, data)
            elif integration_type == "discord":
                return await IntegrationManager._send_discord_message(config, message, data)
            elif integration_type == "webhook":
                return await IntegrationManager._send_webhook_message(config, message, data)
            elif integration_type == "n8n":
                return await IntegrationManager._send_n8n_message(config, message, data)
            elif integration_type == "zapier":
                return await IntegrationManager._send_zapier_message(config, message, data)
            else:
                return {
                    "success": False,
                    "error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {integration_type}: {str(e)}")
            return {
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "details": str(e)
            }
    
    @staticmethod
    async def _send_telegram_message(config: Dict[str, Any], message: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        bot_token = config.get("bot_token")
        chat_id = config.get("chat_id")
        
        if not bot_token or not chat_id:
            return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "chat_id": chat_id,
                    "text": message,
                    "parse_mode": config.get("parse_mode", "HTML")
                }
                
                if data:
                    payload.update(data)
                
                response = await client.post(
                    f"https://api.telegram.org/bot{bot_token}/sendMessage",
                    json=payload
                )
                
                return {
                    "success": response.status_code == 200,
                    "response": response.json() if response.status_code == 200 else None
                }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_slack_message(config: Dict[str, Any], message: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Slack"""
        webhook_url = config.get("webhook_url")
        
        if not webhook_url:
            return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL"}
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "text": message,
                    "channel": config.get("channel"),
                    "username": config.get("username", "AGB Platform")
                }
                
                if data:
                    payload.update(data)
                
                response = await client.post(webhook_url, json=payload)
                
                return {
                    "success": response.status_code == 200,
                    "response": response.text
                }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_discord_message(config: Dict[str, Any], message: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord"""
        webhook_url = config.get("webhook_url")
        
        if not webhook_url:
            return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL"}
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "content": message,
                    "username": config.get("username", "AGB Platform"),
                    "avatar_url": config.get("avatar_url")
                }
                
                if data:
                    payload.update(data)
                
                response = await client.post(webhook_url, json=payload)
                
                return {
                    "success": response.status_code in [200, 204],
                    "response": response.text
                }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_webhook_message(config: Dict[str, Any], message: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook"""
        url = config.get("url")
        method = config.get("method", "POST")
        
        if not url:
            return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL"}
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "message": message,
                    "timestamp": datetime.utcnow().isoformat()
                }
                
                if data:
                    payload.update(data)
                
                headers = config.get("headers", {})
                if config.get("auth_type") == "bearer":
                    headers["Authorization"] = f"Bearer {config.get('auth_token', '')}"
                elif config.get("auth_type") == "basic":
                    import base64
                    auth_string = f"{config.get('username', '')}:{config.get('password', '')}"
                    headers["Authorization"] = f"Basic {base64.b64encode(auth_string.encode()).decode()}"
                
                if method.upper() == "POST":
                    response = await client.post(url, json=payload, headers=headers)
                elif method.upper() == "PUT":
                    response = await client.put(url, json=payload, headers=headers)
                else:
                    response = await client.get(url, headers=headers)
                
                return {
                    "success": response.status_code < 400,
                    "status_code": response.status_code,
                    "response": response.text
                }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_n8n_message(config: Dict[str, Any], message: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ n8n"""
        webhook_url = config.get("webhook_url")
        
        if not webhook_url:
            return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL"}
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "message": message,
                    "timestamp": datetime.utcnow().isoformat()
                }
                
                if data:
                    payload.update(data)
                
                headers = {}
                if config.get("api_key"):
                    headers["X-N8N-API-KEY"] = config["api_key"]
                
                response = await client.post(webhook_url, json=payload, headers=headers)
                
                return {
                    "success": response.status_code in [200, 201],
                    "response": response.text
                }
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_zapier_message(config: Dict[str, Any], message: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Zapier"""
        webhook_url = config.get("webhook_url")
        
        if not webhook_url:
            return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç webhook URL"}
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "message": message,
                    "timestamp": datetime.utcnow().isoformat()
                }
                
                if data:
                    payload.update(data)
                
                response = await client.post(webhook_url, json=payload)
                
                return {
                    "success": response.status_code in [200, 201],
                    "response": response.text
                }
        except Exception as e:
            return {"success": False, "error": str(e)}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
@router.get("/integrations/supported", response_model=List[Dict[str, Any]])
async def get_supported_integrations():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    return [
        {
            "type": service_type,
            "name": service_info["name"],
            "description": service_info["description"],
            "config_fields": service_info["config_fields"],
            "webhook_supported": service_info["webhook_supported"]
        }
        for service_type, service_info in IntegrationManager.SUPPORTED_SERVICES.items()
    ]


@router.get("/integrations", response_model=List[IntegrationResponse])
async def get_integrations(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    await PermissionManager.require_permission(db, current_user.id, "settings.read")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    result = await db.execute(
        select(SystemSettings).where(
            and_(
                SystemSettings.category == "integrations",
                SystemSettings.is_public == True
            )
        )
    )
    settings = result.scalars().all()
    
    integrations = []
    for setting in settings:
        try:
            config = json.loads(setting.value) if setting.data_type == "json" else {"value": setting.value}
            integrations.append({
                "id": setting.id,
                "name": setting.key,
                "type": config.get("type", "unknown"),
                "is_active": config.get("is_active", True),
                "config": {k: v for k, v in config.items() if k not in ["type", "is_active"]},
                "created_at": setting.created_at,
                "updated_at": setting.updated_at
            })
        except json.JSONDecodeError:
            continue
    
    return integrations


@router.post("/integrations", response_model=IntegrationResponse)
async def create_integration(
    integration_data: IntegrationCreate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    await PermissionManager.require_permission(db, current_user.id, "settings.update")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if integration_data.type not in IntegrationManager.SUPPORTED_SERVICES:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        "type": integration_data.type,
        "is_active": integration_data.is_active,
        **integration_data.config
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    setting = SystemSettings(
        category="integrations",
        key=integration_data.name,
        value=json.dumps(config),
        data_type="json",
        is_public=True,
        description=f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è {integration_data.type}"
    )
    
    db.add(setting)
    await db.commit()
    await db.refresh(setting)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await ActivityLogger.log_activity(
        db, current_user.id, "create", "integration", str(setting.id)
    )
    
    return {
        "id": setting.id,
        "name": setting.key,
        "type": integration_data.type,
        "is_active": integration_data.is_active,
        "config": integration_data.config,
        "created_at": setting.created_at,
        "updated_at": setting.updated_at
    }


@router.post("/integrations/{integration_id}/test", response_model=IntegrationTestResult)
async def test_integration(
    integration_id: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    await PermissionManager.require_permission(db, current_user.id, "settings.read")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    result = await db.execute(
        select(SystemSettings).where(SystemSettings.id == integration_id)
    )
    setting = result.scalar_one_or_none()
    
    if not setting:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    try:
        config = json.loads(setting.value) if setting.data_type == "json" else {"value": setting.value}
        integration_type = config.get("type")
        
        if not integration_type:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
            )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        test_result = await IntegrationManager.test_integration(integration_type, config)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        await ActivityLogger.log_activity(
            db, current_user.id, "test_integration", "integration", str(integration_id),
            details=test_result
        )
        
        return IntegrationTestResult(**test_result)
        
    except json.JSONDecodeError:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        )


@router.post("/integrations/{integration_id}/send", response_model=SuccessResponse)
async def send_notification(
    integration_id: int,
    message: str,
    data: Optional[Dict[str, Any]] = None,
    background_tasks: BackgroundTasks = None,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    await PermissionManager.require_permission(db, current_user.id, "notifications.send")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    result = await db.execute(
        select(SystemSettings).where(SystemSettings.id == integration_id)
    )
    setting = result.scalar_one_or_none()
    
    if not setting:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    try:
        config = json.loads(setting.value) if setting.data_type == "json" else {"value": setting.value}
        integration_type = config.get("type")
        
        if not integration_type:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
            )
        
        if not config.get("is_active", True):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if background_tasks:
            background_tasks.add_task(
                IntegrationManager.send_notification,
                integration_type,
                config,
                message,
                data
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await ActivityLogger.log_activity(
                db, current_user.id, "send_notification", "integration", str(integration_id),
                details={"message": message[:100], "type": integration_type}
            )
            
            return SuccessResponse(message="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            result = await IntegrationManager.send_notification(
                integration_type, config, message, data
            )
            
            if result["success"]:
                return SuccessResponse(message="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail=result["error"]
                )
                
    except json.JSONDecodeError:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        )


@router.delete("/integrations/{integration_id}", response_model=SuccessResponse)
async def delete_integration(
    integration_id: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    await PermissionManager.require_permission(db, current_user.id, "settings.update")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    result = await db.execute(
        select(SystemSettings).where(SystemSettings.id == integration_id)
    )
    setting = result.scalar_one_or_none()
    
    if not setting:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await db.delete(setting)
    await db.commit()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await ActivityLogger.log_activity(
        db, current_user.id, "delete", "integration", str(integration_id)
    )
    
    return SuccessResponse(message="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
