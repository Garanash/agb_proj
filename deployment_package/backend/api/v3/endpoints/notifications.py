"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_, func, desc
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import json
import asyncio
import logging

from database import get_db
from ..schemas import (
    NotificationCreate, NotificationResponse, NotificationUpdate,
    NotificationTemplate, NotificationStats, SuccessResponse, ErrorResponse
)
from ..models import SystemSettings, SystemLog
from models import User
from ..utils import PermissionManager, ActivityLogger, encryption_manager
from ...v1.dependencies import get_current_user
from .integrations import IntegrationManager

router = APIRouter()
logger = logging.getLogger(__name__)


class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    @staticmethod
    async def send_notification(
        db: AsyncSession,
        user_id: int,
        title: str,
        message: str,
        notification_type: str = "info",
        data: Optional[Dict[str, Any]] = None,
        channels: List[str] = ["email", "in_app"]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await db.execute(select(User).where(User.id == user_id))
            user = user_result.scalar_one_or_none()
            
            if not user:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            notification_data = {
                "user_id": user_id,
                "title": title,
                "message": message,
                "type": notification_type,
                "data": data or {},
                "channels": channels,
                "status": "pending",
                "created_at": datetime.utcnow().isoformat()
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await ActivityLogger.log_activity(
                db, user_id, "notification_sent", "notification", str(user_id),
                details=notification_data
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            results = {}
            
            for channel in channels:
                if channel == "email":
                    result = await NotificationManager._send_email_notification(
                        db, user, title, message, notification_type, data
                    )
                    results["email"] = result
                
                elif channel == "telegram":
                    result = await NotificationManager._send_telegram_notification(
                        db, user, title, message, notification_type, data
                    )
                    results["telegram"] = result
                
                elif channel == "slack":
                    result = await NotificationManager._send_slack_notification(
                        db, user, title, message, notification_type, data
                    )
                    results["slack"] = result
                
                elif channel == "discord":
                    result = await NotificationManager._send_discord_notification(
                        db, user, title, message, notification_type, data
                    )
                    results["discord"] = result
                
                elif channel == "webhook":
                    result = await NotificationManager._send_webhook_notification(
                        db, user, title, message, notification_type, data
                    )
                    results["webhook"] = result
            
            return {
                "success": True,
                "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                "channels": results,
                "notification_data": notification_data
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_email_notification(
        db: AsyncSession,
        user: User,
        title: str,
        message: str,
        notification_type: str,
        data: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            email_settings_result = await db.execute(
                select(SystemSettings).where(
                    and_(
                        SystemSettings.category == "integrations",
                        SystemSettings.key.like("%email%"),
                        SystemSettings.is_public == True
                    )
                )
            )
            email_settings = email_settings_result.scalars().first()
            
            if not email_settings:
                return {"success": False, "error": "Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
            
            config = json.loads(email_settings.value) if email_settings.data_type == "json" else {}
            
            if not config.get("is_active", True):
                return {"success": False, "error": "Email –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å–æ–æ–±—â–µ–Ω–∏–µ
            html_message = f"""
            <html>
            <body>
                <h2>{title}</h2>
                <p>{message}</p>
                <p><small>–¢–∏–ø: {notification_type}</small></p>
                {f'<p><small>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}</small></p>' if data else ''}
                <hr>
                <p><small>AGB Platform - {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}</small></p>
            </body>
            </html>
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º IntegrationManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = await IntegrationManager.send_notification(
                "email",
                config,
                html_message,
                data
            )
            
            return result
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_telegram_notification(
        db: AsyncSession,
        user: User,
        title: str,
        message: str,
        notification_type: str,
        data: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            telegram_settings_result = await db.execute(
                select(SystemSettings).where(
                    and_(
                        SystemSettings.category == "integrations",
                        SystemSettings.key.like("%telegram%"),
                        SystemSettings.is_public == True
                    )
                )
            )
            telegram_settings = telegram_settings_result.scalars().first()
            
            if not telegram_settings:
                return {"success": False, "error": "Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
            
            config = json.loads(telegram_settings.value) if telegram_settings.data_type == "json" else {}
            
            if not config.get("is_active", True):
                return {"success": False, "error": "Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            telegram_message = f"üîî *{title}*\n\n{message}\n\nüìã –¢–∏–ø: {notification_type}"
            
            if data:
                telegram_message += f"\n\nüìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º IntegrationManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = await IntegrationManager.send_notification(
                "telegram",
                config,
                telegram_message,
                data
            )
            
            return result
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_slack_notification(
        db: AsyncSession,
        user: User,
        title: str,
        message: str,
        notification_type: str,
        data: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Slack
            slack_settings_result = await db.execute(
                select(SystemSettings).where(
                    and_(
                        SystemSettings.category == "integrations",
                        SystemSettings.key.like("%slack%"),
                        SystemSettings.is_public == True
                    )
                )
            )
            slack_settings = slack_settings_result.scalars().first()
            
            if not slack_settings:
                return {"success": False, "error": "Slack –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
            
            config = json.loads(slack_settings.value) if slack_settings.data_type == "json" else {}
            
            if not config.get("is_active", True):
                return {"success": False, "error": "Slack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Slack
            slack_message = f"üîî *{title}*\n\n{message}\n\nüìã –¢–∏–ø: {notification_type}"
            
            if data:
                slack_message += f"\n\nüìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º IntegrationManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = await IntegrationManager.send_notification(
                "slack",
                config,
                slack_message,
                data
            )
            
            return result
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_discord_notification(
        db: AsyncSession,
        user: User,
        title: str,
        message: str,
        notification_type: str,
        data: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Discord
            discord_settings_result = await db.execute(
                select(SystemSettings).where(
                    and_(
                        SystemSettings.category == "integrations",
                        SystemSettings.key.like("%discord%"),
                        SystemSettings.is_public == True
                    )
                )
            )
            discord_settings = discord_settings_result.scalars().first()
            
            if not discord_settings:
                return {"success": False, "error": "Discord –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
            
            config = json.loads(discord_settings.value) if discord_settings.data_type == "json" else {}
            
            if not config.get("is_active", True):
                return {"success": False, "error": "Discord –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Discord
            discord_message = f"üîî **{title}**\n\n{message}\n\nüìã –¢–∏–ø: {notification_type}"
            
            if data:
                discord_message += f"\n\nüìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º IntegrationManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = await IntegrationManager.send_notification(
                "discord",
                config,
                discord_message,
                data
            )
            
            return result
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def _send_webhook_notification(
        db: AsyncSession,
        user: User,
        title: str,
        message: str,
        notification_type: str,
        data: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
            webhook_settings_result = await db.execute(
                select(SystemSettings).where(
                    and_(
                        SystemSettings.category == "integrations",
                        SystemSettings.key.like("%webhook%"),
                        SystemSettings.is_public == True
                    )
                )
            )
            webhook_settings = webhook_settings_result.scalars().first()
            
            if not webhook_settings:
                return {"success": False, "error": "Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
            
            config = json.loads(webhook_settings.value) if webhook_settings.data_type == "json" else {}
            
            if not config.get("is_active", True):
                return {"success": False, "error": "Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
            webhook_data = {
                "title": title,
                "message": message,
                "type": notification_type,
                "user": {
                    "id": user.id,
                    "username": user.username,
                    "email": user.email
                },
                "timestamp": datetime.utcnow().isoformat(),
                "data": data or {}
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º IntegrationManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = await IntegrationManager.send_notification(
                "webhook",
                config,
                json.dumps(webhook_data, ensure_ascii=False),
                webhook_data
            )
            
            return result
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def get_notification_stats(db: AsyncSession, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            start_date = datetime.utcnow() - timedelta(days=days)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
            stats_query = select(
                func.count(SystemLog.id).label('total'),
                func.count(SystemLog.id).filter(
                    SystemLog.details.like('%"notification_sent"%')
                ).label('notifications_sent')
            ).where(
                SystemLog.created_at >= start_date
            )
            
            result = await db.execute(stats_query)
            stats = result.fetchone()
            
            return {
                "period_days": days,
                "total_activities": stats.total or 0,
                "notifications_sent": stats.notifications_sent or 0,
                "success_rate": (stats.notifications_sent / stats.total * 100) if stats.total > 0 else 0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            return {"error": str(e)}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
@router.post("/notifications/send", response_model=SuccessResponse)
async def send_notification(
    notification_data: NotificationCreate,
    background_tasks: BackgroundTasks = None,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    await PermissionManager.require_permission(db, current_user.id, "notifications.send")
    
    if background_tasks:
        background_tasks.add_task(
            NotificationManager.send_notification,
            db,
            notification_data.user_id,
            notification_data.title,
            notification_data.message,
            notification_data.type,
            notification_data.data,
            notification_data.channels
        )
        
        return SuccessResponse(message="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
    else:
        result = await NotificationManager.send_notification(
            db,
            notification_data.user_id,
            notification_data.title,
            notification_data.message,
            notification_data.type,
            notification_data.data,
            notification_data.channels
        )
        
        if result["success"]:
            return SuccessResponse(message=result["message"])
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=result["error"]
            )


@router.post("/notifications/broadcast", response_model=SuccessResponse)
async def broadcast_notification(
    title: str,
    message: str,
    notification_type: str = "info",
    channels: List[str] = ["email", "in_app"],
    user_ids: Optional[List[int]] = None,
    background_tasks: BackgroundTasks = None,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    await PermissionManager.require_permission(db, current_user.id, "notifications.send")
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
    if not user_ids:
        users_result = await db.execute(select(User.id).where(User.is_active == True))
        user_ids = [row[0] for row in users_result.fetchall()]
    
    if background_tasks:
        for user_id in user_ids:
            background_tasks.add_task(
                NotificationManager.send_notification,
                db,
                user_id,
                title,
                message,
                notification_type,
                {},
                channels
            )
        
        return SuccessResponse(message=f"–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        results = []
        for user_id in user_ids:
            result = await NotificationManager.send_notification(
                db,
                user_id,
                title,
                message,
                notification_type,
                {},
                channels
            )
            results.append(result)
        
        successful = sum(1 for r in results if r["success"])
        return SuccessResponse(message=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful} –∏–∑ {len(user_ids)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.get("/notifications/stats", response_model=NotificationStats)
async def get_notification_stats(
    days: int = Query(30, ge=1, le=365),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await PermissionManager.require_permission(db, current_user.id, "analytics.read")
    
    stats = await NotificationManager.get_notification_stats(db, days)
    
    return NotificationStats(**stats)


@router.get("/notifications/templates", response_model=List[NotificationTemplate])
async def get_notification_templates(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await PermissionManager.require_permission(db, current_user.id, "notifications.manage")
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    templates_result = await db.execute(
        select(SystemSettings).where(
            and_(
                SystemSettings.category == "notification_templates",
                SystemSettings.is_public == True
            )
        )
    )
    templates = templates_result.scalars().all()
    
    notification_templates = []
    for template in templates:
        try:
            config = json.loads(template.value) if template.data_type == "json" else {"value": template.value}
            notification_templates.append({
                "id": template.id,
                "name": template.key,
                "title_template": config.get("title_template", ""),
                "message_template": config.get("message_template", ""),
                "type": config.get("type", "info"),
                "channels": config.get("channels", ["email"]),
                "variables": config.get("variables", []),
                "description": template.description,
                "created_at": template.created_at,
                "updated_at": template.updated_at
            })
        except json.JSONDecodeError:
            continue
    
    return notification_templates


@router.post("/notifications/templates", response_model=NotificationTemplate)
async def create_notification_template(
    template_data: NotificationTemplate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await PermissionManager.require_permission(db, current_user.id, "notifications.manage")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞
    config = {
        "title_template": template_data.title_template,
        "message_template": template_data.message_template,
        "type": template_data.type,
        "channels": template_data.channels,
        "variables": template_data.variables
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    template = SystemSettings(
        category="notification_templates",
        key=template_data.name,
        value=json.dumps(config),
        data_type="json",
        is_public=True,
        description=template_data.description
    )
    
    db.add(template)
    await db.commit()
    await db.refresh(template)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await ActivityLogger.log_activity(
        db, current_user.id, "create", "notification_template", str(template.id)
    )
    
    return {
        "id": template.id,
        "name": template.key,
        "title_template": template_data.title_template,
        "message_template": template_data.message_template,
        "type": template_data.type,
        "channels": template_data.channels,
        "variables": template_data.variables,
        "description": template_data.description,
        "created_at": template.created_at,
        "updated_at": template.updated_at
    }


@router.post("/notifications/test", response_model=SuccessResponse)
async def test_notification(
    user_id: int,
    title: str = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
    message: str = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
    channels: List[str] = ["email"],
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    await PermissionManager.require_permission(db, current_user.id, "notifications.send")
    
    result = await NotificationManager.send_notification(
        db,
        user_id,
        title,
        message,
        "test",
        {"test": True},
        channels
    )
    
    if result["success"]:
        return SuccessResponse(message="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=result["error"]
        )
