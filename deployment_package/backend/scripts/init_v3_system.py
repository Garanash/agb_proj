#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã v3
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import async_session, Base, engine
from api.v3.utils import RoleManager, encryption_manager
from api.v3.models import SystemSettings, EmailSettings, ApiKeySettings
from models import User
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession


async def create_tables():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã v3"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü v3...")
    
    async with engine.begin() as conn:
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã v3
        await conn.run_sync(Base.metadata.create_all)
    
    print("–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


async def create_default_roles():
    """–°–æ–∑–¥–∞—Ç—å —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
    
    async with async_session() as db:
        await RoleManager.create_default_roles(db)
    
    print("–†–æ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


async def create_default_settings():
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
    
    async with async_session() as db:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        default_settings = [
            {
                'category': 'general',
                'key': 'app_name',
                'value': 'AGB Platform',
                'data_type': 'string',
                'is_public': True,
                'description': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
            },
            {
                'category': 'general',
                'key': 'app_version',
                'value': '3.0.0',
                'data_type': 'string',
                'is_public': True,
                'description': '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
            },
            {
                'category': 'security',
                'key': 'session_timeout',
                'value': '86400',
                'data_type': 'int',
                'is_public': False,
                'description': '–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö'
            },
            {
                'category': 'security',
                'key': 'password_min_length',
                'value': '8',
                'data_type': 'int',
                'is_public': True,
                'description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è'
            },
            {
                'category': 'ui',
                'key': 'default_theme',
                'value': 'light',
                'data_type': 'string',
                'is_public': True,
                'description': '–¢–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
            },
            {
                'category': 'ui',
                'key': 'items_per_page',
                'value': '20',
                'data_type': 'int',
                'is_public': True,
                'description': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
            },
            {
                'category': 'notifications',
                'key': 'enable_email_notifications',
                'value': 'true',
                'data_type': 'bool',
                'is_public': False,
                'description': '–í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            },
            {
                'category': 'notifications',
                'key': 'enable_push_notifications',
                'value': 'true',
                'data_type': 'bool',
                'is_public': False,
                'description': '–í–∫–ª—é—á–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            }
        ]
        
        for setting_data in default_settings:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            existing = await db.execute(
                select(SystemSettings).where(
                    SystemSettings.category == setting_data['category'],
                    SystemSettings.key == setting_data['key']
                )
            )
            
            if not existing.scalar_one_or_none():
                setting = SystemSettings(**setting_data)
                db.add(setting)
        
        await db.commit()
    
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


async def assign_admin_roles():
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    print("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...")
    
    async with async_session() as db:
        from api.v3.models import Role as RoleV3, UserRole as UserRoleV3
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        super_admin_role = await db.execute(
            select(RoleV3).where(RoleV3.name == 'super_admin')
        )
        super_admin_role = super_admin_role.scalar_one_or_none()
        
        if not super_admin_role:
            print("–†–æ–ª—å super_admin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é admin
        admin_users = await db.execute(
            select(User).where(User.role == 'admin')
        )
        admin_users = admin_users.scalars().all()
        
        for user in admin_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–æ–ª–∏
            existing_role = await db.execute(
                select(UserRoleV3).where(
                    UserRoleV3.user_id == user.id,
                    UserRoleV3.role_id == super_admin_role.id,
                    UserRoleV3.is_active == True
                )
            )
            
            if not existing_role.scalar_one_or_none():
                user_role = UserRoleV3(
                    user_id=user.id,
                    role_id=super_admin_role.id,
                    assigned_by=user.id,  # –°–∞–º–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    is_active=True
                )
                db.add(user_role)
                print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å super_admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
        
        await db.commit()
    
    print("–†–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


async def create_sample_email_settings():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ email"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email...")
    
    async with async_session() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        existing = await db.execute(select(EmailSettings))
        if existing.scalar_one_or_none():
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Gmail
        gmail_settings = EmailSettings(
            name="Gmail SMTP",
            smtp_server="smtp.gmail.com",
            smtp_port=587,
            username="your-email@gmail.com",
            password=encryption_manager.encrypt("your-app-password"),
            use_tls=True,
            use_ssl=False,
            from_email="your-email@gmail.com",
            from_name="AGB Platform",
            is_active=False,  # –ù–µ–∞–∫—Ç–∏–≤–Ω–æ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            is_default=True
        )
        
        db.add(gmail_settings)
        await db.commit()
    
    print("–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ email —Å–æ–∑–¥–∞–Ω—ã!")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã v3...")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await create_tables()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await create_default_roles()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await create_default_settings()
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await assign_admin_roles()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ email
        await create_sample_email_settings()
        
        print("=" * 50)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ v3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print()
        print("–ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:")
        print("- –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        print("- –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ (super_admin, admin, manager, user)")
        print("- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("- –ù–∞–∑–Ω–∞—á–µ–Ω—ã —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        print("- –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ email")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ email –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        print("2. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
