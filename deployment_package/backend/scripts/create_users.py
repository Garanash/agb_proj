"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import SessionLocal
from models import User, Department, UserRole
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def create_department_if_not_exists(db, name: str, description: str = ""):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    dept = db.query(Department).filter(Department.name == name).first()
    if not dept:
        dept = Department(name=name, description=description)
        db.add(dept)
        db.commit()
        db.refresh(dept)
    return dept

def create_users():
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—ã
        departments = {
            "admin": create_department_if_not_exists(db, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª"),
            "manager": create_department_if_not_exists(db, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
            "employee": create_department_if_not_exists(db, "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª"),
            "user": create_department_if_not_exists(db, "–û–±—â–∏–π", "–û–±—â–∏–π –æ—Ç–¥–µ–ª"),
            "ved_passport": create_department_if_not_exists(db, "–í–≠–î", "–û—Ç–¥–µ–ª –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        }
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        users_to_create = [
            # ADMIN (2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            {
                "username": "admin1",
                "email": "admin1@almazgeobur.ru",
                "first_name": "–ò–≤–∞–Ω",
                "last_name": "–ê–¥–º–∏–Ω–æ–≤",
                "middle_name": "–ü–µ—Ç—Ä–æ–≤–∏—á",
                "role": UserRole.ADMIN,
                "department": "admin",
                "position": "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            },
            {
                "username": "admin2",
                "email": "admin2@almazgeobur.ru",
                "first_name": "–ú–∞—Ä–∏—è",
                "last_name": "–°–∏—Å—Ç–µ–º–æ–≤–∞",
                "middle_name": "–ò–≤–∞–Ω–æ–≤–Ω–∞",
                "role": UserRole.ADMIN,
                "department": "admin",
                "position": "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            },
            
            # MANAGER (2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            {
                "username": "manager1",
                "email": "manager1@almazgeobur.ru",
                "first_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
                "last_name": "–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
                "middle_name": "–°–µ—Ä–≥–µ–µ–≤–∏—á",
                "role": UserRole.MANAGER,
                "department": "manager",
                "position": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞"
            },
            {
                "username": "manager2",
                "email": "manager2@almazgeobur.ru",
                "first_name": "–ï–ª–µ–Ω–∞",
                "last_name": "–£–ø—Ä–∞–≤–ª–µ–Ω—Ü–µ–≤–∞",
                "middle_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
                "role": UserRole.MANAGER,
                "department": "manager",
                "position": "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
            },
            
            # EMPLOYEE (2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            {
                "username": "employee1",
                "email": "employee1@almazgeobur.ru",
                "first_name": "–î–º–∏—Ç—Ä–∏–π",
                "last_name": "–†–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
                "middle_name": "–ù–∏–∫–æ–ª–∞–µ–≤–∏—á",
                "role": UserRole.EMPLOYEE,
                "department": "employee",
                "position": "–ò–Ω–∂–µ–Ω–µ—Ä"
            },
            {
                "username": "employee2",
                "email": "employee2@almazgeobur.ru",
                "first_name": "–û–ª—å–≥–∞",
                "last_name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤–∞",
                "middle_name": "–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞",
                "role": UserRole.EMPLOYEE,
                "department": "employee",
                "position": "–¢–µ—Ö–Ω–∏–∫"
            },
            
            # USER (2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            {
                "username": "user1",
                "email": "user1@almazgeobur.ru",
                "first_name": "–°–µ—Ä–≥–µ–π",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–≤",
                "middle_name": "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
                "role": UserRole.USER,
                "department": "user",
                "position": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
            },
            {
                "username": "user2",
                "email": "user2@almazgeobur.ru",
                "first_name": "–ê–Ω–Ω–∞",
                "last_name": "–ö–ª–∏–µ–Ω—Ç–æ–≤–∞",
                "middle_name": "–°–µ—Ä–≥–µ–µ–≤–Ω–∞",
                "role": UserRole.USER,
                "department": "user",
                "position": "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
            },
            
            # VED_PASSPORT (2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            {
                "username": "ved1",
                "email": "ved1@almazgeobur.ru",
                "first_name": "–í–ª–∞–¥–∏–º–∏—Ä",
                "last_name": "–í—ç–¥–æ–≤",
                "middle_name": "–ê–Ω–¥—Ä–µ–µ–≤–∏—á",
                "role": UserRole.VED_PASSPORT,
                "department": "ved_passport",
                "position": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –í–≠–î"
            },
            {
                "username": "ved2",
                "email": "ved2@almazgeobur.ru",
                "first_name": "–¢–∞—Ç—å—è–Ω–∞",
                "last_name": "–ü–∞—Å–ø–æ—Ä—Ç–æ–≤–∞",
                "middle_name": "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
                "role": UserRole.VED_PASSPORT,
                "department": "ved_passport",
                "position": "–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –í–≠–î"
            }
        ]
        
        created_count = 0
        skipped_count = 0
        
        for user_data in users_to_create:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.query(User).filter(User.username == user_data["username"]).first()
            if existing_user:
                print(f"‚è≠Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                skipped_count += 1
                continue
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                username=user_data["username"],
                email=user_data["email"],
                first_name=user_data["first_name"],
                last_name=user_data["last_name"],
                middle_name=user_data["middle_name"],
                hashed_password=get_password_hash("password123"),
                role=user_data["role"],
                department_id=departments[user_data["department"]].id,
                position=user_data["position"],
                is_active=True,
                is_password_changed=False
            )
            
            db.add(user)
            created_count += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']} ({user_data['role']}) - {user_data['first_name']} {user_data['last_name']}")
        
        db.commit()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ:")
        print(f"   –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {created_count}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped_count}")
        print(f"\nüîë –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: password123")
        print(f"   (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ)")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        print(f"\nüë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º:")
        for role in UserRole:
            users = db.query(User).filter(User.role == role).all()
            print(f"\n   {role.value.upper()}:")
            for user in users:
                print(f"     - {user.username}: {user.first_name} {user.last_name} ({user.email})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_users()
