"""
Telegram Bot Service –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
"""
import asyncio
import logging
from typing import Dict, Any
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import os

from models import TelegramBot, TelegramUser, TelegramNotification, RepairRequest, ContractorResponse, UserRole
from database import get_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º"""

    def __init__(self):
        self.bots: Dict[str, Bot] = {}
        self.dispatchers: Dict[str, Dispatcher] = {}
        self.database_url = os.getenv(
            "DATABASE_URL",
            "postgresql://felix_user:felix_password@postgres:5432/agb_felix"
        )

        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π engine –¥–ª—è –±–æ—Ç–∞
        self.engine = create_engine(self.database_url, echo=False)
        self.session = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)

    async def init_bots(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        main_bot_token = "8394091922:AAF2l0X7slM6apRNf2ju25aqklwSrG1ATNg"
        
        try:
            bot = Bot(
                token=main_bot_token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            dp = Dispatcher()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.register_handlers(dp)

            self.bots[main_bot_token] = bot
            self.dispatchers[main_bot_token] = dp

            logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

        # –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏–∑ –ë–î
        with self.session() as session:
            from sqlalchemy import select
            result = session.execute(
                select(TelegramBot).where(TelegramBot.is_active == True)
            )
            bots = result.scalars().all()

            for bot_data in bots:
                if bot_data.token == main_bot_token:
                    continue  # –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    
                try:
                    bot = Bot(
                        token=bot_data.token,
                        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
                    )
                    dp = Dispatcher()

                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    self.register_handlers(dp)

                    self.bots[bot_data.token] = bot
                    self.dispatchers[bot_data.token] = dp

                    logger.info(f"‚úÖ –ë–æ—Ç {bot_data.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_data.name}: {e}")

    def register_handlers(self, dp: Dispatcher):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @dp.message()
        async def handle_message(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                with self.session() as session:
                    await self.process_message(message, session)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        @dp.callback_query()
        async def handle_callback(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
            try:
                with self.session() as session:
                    await self.process_callback(callback, session)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

    async def process_message(self, message: Message, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = message.chat.id
        text = message.text or ""
        user = message.from_user

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username} ({user.id}): {text}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await self.save_telegram_user(session, user, chat_id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text.startswith("/start"):
            await self.handle_start_command(message, session)
        elif text.startswith("/help"):
            await self.handle_help_command(message, session)
        elif text.startswith("/requests"):
            await self.handle_requests_command(message, session)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            await message.reply(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )

    async def process_callback(self, callback: CallbackQuery, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫—É"""
        callback_data = callback.data

        if callback_data.startswith("respond_"):
            request_id = int(callback_data.split("_")[1])
            await self.handle_response_callback(callback, request_id, session)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    async def handle_start_command(self, message: Message, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.</b>

–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –∏ –ø–æ–º–æ–≥–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∫–ª–∏–∫–∞–º–∏.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/requests - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
/my_responses - –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏

–í—ã —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è".
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="show_requests")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
        ])

        await message.reply(welcome_text, reply_markup=keyboard)

    async def handle_help_command(self, message: Message, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/requests - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
/my_responses - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ—Ç–∫–ª–∏–∫–∏

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞—è–≤–∫–∞–º–∏:</b>
1. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
2. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" —á—Ç–æ–±—ã –≤—ã—Ä–∞–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å
3. –í–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫—É

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
"""

        await message.reply(help_text)

    async def handle_requests_command(self, message: Message, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /requests"""
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
        from sqlalchemy import select
        result = session.execute(
            select(RepairRequest).where(RepairRequest.status == "active").limit(10)
        )
        requests = result.scalars().all()

        if not requests:
            await message.reply("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")
            return

        response_text = "<b>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"

        for req in requests:
            response_text += f"""
üÜî <b>–ó–∞—è–≤–∫–∞ #{req.id}</b>
üìù {req.description[:100]}{'...' if len(req.description) > 100 else ''}
üè¢ {req.city or '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ {req.preferred_date.strftime('%d.%m.%Y') if req.preferred_date else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
---
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_requests")]
        ])

        await message.reply(response_text, reply_markup=keyboard)

    async def handle_response_callback(self, callback: CallbackQuery, request_id: int, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É"""
        user = callback.from_user

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
        from sqlalchemy import select
        result = session.execute(
            select(TelegramUser).where(TelegramUser.telegram_id == user.id)
        )
        telegram_user = result.scalars().first()

        if not telegram_user:
            await callback.answer("‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = session.execute(
            select(ContractorResponse).where(
                ContractorResponse.request_id == request_id,
                ContractorResponse.contractor_id == telegram_user.user_id
            )
        )
        existing_response = result.scalars().first()

        if existing_response:
            await callback.answer("‚úÖ –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É")
            return

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
        from models import ContractorResponse, ResponseStatus, ContractorProfile
        from sqlalchemy import select
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        result = session.execute(
            select(ContractorProfile).where(ContractorProfile.user_id == telegram_user.user_id)
        )
        contractor_profile = result.scalars().first()
        
        if not contractor_profile:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        new_response = ContractorResponse(
            request_id=request_id,
            contractor_id=contractor_profile.id,
            comment="–û—Ç–∫–ª–∏–∫ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç",
            status=ResponseStatus.PENDING
        )

        session.add(new_response)
        session.commit()

        await callback.answer("‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
        bot = self.bots.get(list(self.bots.keys())[0])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        if bot:
            await bot.send_message(
                chat_id=user.id,
                text="‚úÖ <b>–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∑–∞–∫–∞–∑—á–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏."
            )

    async def send_new_request_notification(self, request_id: int, session):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select
        result = session.execute(
            select(RepairRequest).where(RepairRequest.id == request_id)
        )
        request = result.scalars().first()

        if not request:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å Telegram
        result = session.execute(
            select(TelegramUser).join(User).where(User.role == UserRole.CONTRACTOR)
        )
        contractors = result.scalars().all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üõ†Ô∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç!</b>

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {request.description}
üìç <b>–ê–¥—Ä–µ—Å:</b> {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè¢ <b>–ì–æ—Ä–æ–¥:</b> {request.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {request.preferred_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚ö° <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b> {request.urgency or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìÖ <b>–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞:</b> {request.preferred_date.strftime('%d.%m.%Y') if request.preferred_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

–ó–∞–∫–∞–∑—á–∏–∫: {request.customer_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞—è–≤–∫—É",
                callback_data=f"respond_{request.id}"
            )]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for bot_token, bot in self.bots.items():
            for contractor in contractors:
                try:
                    result = await bot.send_message(
                        chat_id=contractor.telegram_id,
                        text=message,
                        reply_markup=keyboard
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
                    notification = TelegramNotification(
                        telegram_user_id=contractor.id,
                        message_type="new_request",
                        message_text=message,
                        message_id=result.message_id,
                        chat_id=contractor.telegram_id,
                        repair_request_id=request.id
                    )
                    session.add(notification)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        session.commit()

    async def send_request_to_contractors(self, request_id: int, session):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –≤ –±–æ—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        from sqlalchemy import select
        result = session.execute(
            select(RepairRequest).where(RepairRequest.id == request_id)
        )
        request = result.scalars().first()

        if not request:
            logger.error(f"–ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å Telegram
        result = session.execute(
            select(TelegramUser).join(User).where(User.role == UserRole.CONTRACTOR)
        )
        contractors = result.scalars().all()

        if not contractors:
            logger.warning("–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üõ†Ô∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç!</b>

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{request.manager_comment or request.description}

üìç <b>–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:</b>
{request.region or ''}, {request.city or ''}, {request.address or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}

üí∞ <b>–¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏:</b> {request.final_price:,} ‚ÇΩ

üìÖ <b>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</b> {request.created_at.strftime('%d.%m.%Y %H:%M')}

‚ö° <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b> {request.urgency or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üè¢ <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {request.equipment_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É",
                callback_data=f"respond_{request.id}"
            )]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for bot_token, bot in self.bots.items():
            for contractor in contractors:
                try:
                    result = await bot.send_message(
                        chat_id=contractor.telegram_id,
                        text=message,
                        reply_markup=keyboard
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
                    notification = TelegramNotification(
                        telegram_user_id=contractor.id,
                        message_type="request_sent_to_bot",
                        message_text=message,
                        message_id=result.message_id,
                        chat_id=contractor.telegram_id,
                        repair_request_id=request.id
                    )
                    session.add(notification)

                    logger.info(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {contractor.telegram_id}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {contractor.telegram_id}: {e}")

        session.commit()
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(contractors)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")

    async def save_telegram_user(self, session, user, chat_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        from sqlalchemy import select

        result = session.execute(
            select(TelegramUser).where(TelegramUser.telegram_id == user.id)
        )
        existing_user = result.scalars().first()

        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
            telegram_user = TelegramUser(
                user_id=1,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            session.add(telegram_user)
            session.commit()

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        if not self.bots:
            logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            return

        tasks = []

        for bot_token, dp in self.dispatchers.items():
            bot = self.bots[bot_token]
            task = asyncio.create_task(dp.start_polling(bot))
            tasks.append(task)
            logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω polling –¥–ª—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º {bot_token[:10]}...")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks, return_exceptions=True)

    async def stop_bots(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        for bot in self.bots.values():
            await bot.session.close()
        logger.info("üõë –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramBotService()


async def start_telegram_service():
    """–ó–∞–ø—É—Å–∫ Telegram —Å–µ—Ä–≤–∏—Å–∞"""
    await telegram_service.init_bots()

    if telegram_service.bots:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–æ–≤...")
        await telegram_service.start_polling()
    else:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤")


async def notify_new_request(request_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)"""
    with telegram_service.session() as session:
        await telegram_service.send_new_request_notification(request_id, session)


async def send_request_to_bot(request_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –±–æ—Ç –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)"""
    with telegram_service.session() as session:
        await telegram_service.send_request_to_contractors(request_id, session)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(start_telegram_service())
