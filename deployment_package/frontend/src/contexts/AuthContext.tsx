'use client'

import React, { createContext, useContext, useState, useEffect } from 'react'
import { getApiUrl } from '@/utils/api';
import type { User, AuthContextType } from '../types/index';
import axios from 'axios'

// –¢–∏–ø—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ @/types

export const AuthContext = createContext<AuthContextType | undefined>(undefined)

// useAuth –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ @/hooks/useAuth
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null)
  const [token, setToken] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [hasInitialized, setHasInitialized] = useState(false)

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ axios –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    console.log('AuthContext useEffect started')
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window === 'undefined') {
      console.log('Not on client side, setting isLoading to false')
      setIsLoading(false)
      setHasInitialized(true)
      return
    }

    const storedToken = localStorage.getItem('access_token')
    console.log('Stored token found:', !!storedToken)
    if (storedToken) {
      setToken(storedToken)
      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      console.log('Token found, checking validity')
      checkTokenValidity()
    } else {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      console.log('No token found, setting isLoading to false')
      setIsLoading(false)
      setHasInitialized(true)
    }
  }, [])

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (token && !user) {
      console.log('Token available but no user, checking validity')
      checkTokenValidity()
    }
  }, [token])

  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
  useEffect(() => {
    const timeout = setTimeout(() => {
      if (!hasInitialized) {
        console.log('Auth initialization timeout, forcing completion')
        setIsLoading(false)
        setHasInitialized(true)
      }
    }, 5000) // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    return () => clearTimeout(timeout)
  }, [hasInitialized])

  const checkTokenValidity = async () => {
    try {
      const apiUrl = getApiUrl()
      console.log('üîç API URL for token validation:', apiUrl)
      console.log('üîç Making request to:', `${apiUrl}/api/v1/auth/me`)
      console.log('üîç Current axios headers:', axios.defaults.headers.common)
      const response = await axios.get(`${apiUrl}/api/v1/auth/me`)
      console.log('‚úÖ Response received:', response.status, response.data)
      setUser(response.data)
      console.log('‚úÖ User loaded:', response.data)
    } catch (error: any) {
      console.error('‚ùå Token validation error:', error)
      console.error('‚ùå Error details:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      })
      // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      localStorage.removeItem('access_token')
      setToken(null)
      delete axios.defaults.headers.common['Authorization']
    } finally {
      console.log('üèÅ Setting isLoading to false and hasInitialized to true')
      setIsLoading(false)
      setHasInitialized(true)
    }
  }

  const login = async (username: string, password: string): Promise<boolean> => {
    try {
      const apiUrl = getApiUrl()
      const response = await axios.post(`${apiUrl}/api/v1/auth/login`, {
        username,
        password
      })

      const { access_token, user: userData } = response.data

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (typeof window !== 'undefined') {
        localStorage.setItem('access_token', access_token)
      }
      setToken(access_token)
      axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`

      setUser(userData)
      return true
    } catch (error: any) {
      console.error('Login error:', error.message)
      return false
    }
  }

  const logout = async () => {
    try {
      const apiUrl = getApiUrl()
      await axios.post(`${apiUrl}/api/v1/auth/logout`)
    } catch (error) {
      console.error('Logout error:', error)
    } finally {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      if (typeof window !== 'undefined') {
        localStorage.removeItem('access_token')
      }
      setToken(null)
      delete axios.defaults.headers.common['Authorization']
      setUser(null)
    }
  }

  const refreshUser = async () => {
    try {
      const apiUrl = getApiUrl()
      const response = await axios.get(`${apiUrl}/api/v1/auth/me`)
      setUser(response.data)
    } catch (error) {
      console.error('Refresh user error:', error)
    }
  }

  const value: AuthContextType = {
    user,
    token,
    login,
    logout,
    refreshUser,
    isLoading: isLoading || !hasInitialized,
    isAuthenticated: !!user
  }

  console.log('AuthContext value:', { user: !!user, token: !!token, isLoading, isAuthenticated: !!user })

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}
