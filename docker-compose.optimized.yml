services:
  # PostgreSQL - оптимизированная конфигурация
  postgres:
    image: postgres:15-alpine
    container_name: agb_postgres
    env_file:
      - config/env/production.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agb_felix_prod}
      POSTGRES_USER: ${POSTGRES_USER:-felix_prod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-default_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Оптимизация памяти
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 4MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup/init-production-db.sh:/docker-entrypoint-initdb.d/01-init-production-db.sh:ro
    networks:
      - app-network
    restart: unless-stopped
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-felix_prod_user} -d ${POSTGRES_DB:-agb_felix_prod}"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis - оптимизированная конфигурация
  redis:
    image: redis:7-alpine
    container_name: agb_redis
    restart: unless-stopped
    # Оптимизация Redis
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - app-network
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OCR сервис - только если нужен
  ocr:
    build:
      context: ./infrastructure/ocr
      dockerfile: Dockerfile
    container_name: agb_ocr
    restart: unless-stopped
    volumes:
      - uploads_data:/app/uploads
    networks:
      - app-network
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - ocr  # Запускается только при необходимости

  # Бекенд - FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agb_backend
    env_file:
      - config/env/production.env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://felix_prod_user:default_password@postgres:5432/agb_felix_prod}
      - SECRET_KEY=${SECRET_KEY:-default_secret_key_change_in_production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_FIRST_NAME=${ADMIN_FIRST_NAME:-Администратор}
      - ADMIN_LAST_NAME=${ADMIN_LAST_NAME:-Системы}
      - PYTHONWARNINGS=ignore:Unverified HTTPS request
      - REDIS_URL=redis://redis:6379/0
      # Оптимизация Python
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    networks:
      - app-network
    restart: unless-stopped
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Фронтенд - Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: agb_frontend
    env_file:
      - config/env/production.env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost/api}
      - NODE_ENV=production
      # Оптимизация Node.js
      - NODE_OPTIONS=--max-old-space-size=512
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx
  nginx:
    build:
      context: ./infrastructure/nginx
      dockerfile: Dockerfile.prod
    container_name: agb_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
      - uploads_data:/app/uploads
    networks:
      - app-network
    restart: unless-stopped
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # n8n - только при необходимости
  n8n:
    image: n8nio/n8n:latest
    container_name: agb_n8n
    restart: unless-stopped
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME:-n8n_prod}
      - DB_POSTGRESDB_USER=${N8N_DB_USER:-n8n_prod_user}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD:-n8n_default_password}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-n8n_admin_password}
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=regular
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=1
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=console,file
      - N8N_DEFAULT_LOCALE=ru
      - N8N_METRICS=true
      - N8N_DIAGNOSTICS_ENABLED=true
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_custom:/data/custom
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - automation  # Запускается только при необходимости

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  n8n_data:
    driver: local
  n8n_custom:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
