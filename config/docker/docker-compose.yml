version: "3.8"

services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: test_platform_postgres
    env_file:
      - ../env/.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-test_platform_db}
      POSTGRES_USER: ${POSTGRES_USER:-test_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    networks:
      - test-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-test_user} -d ${POSTGRES_DB:-test_platform_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Бекенд - FastAPI
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: test_platform_backend
    command: ./start.sh
    env_file:
      - ../env/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-test_user}:${POSTGRES_PASSWORD:-test_password}@postgres:5432/${POSTGRES_DB:-test_platform_db}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@localhost}
      ADMIN_FIRST_NAME: ${ADMIN_FIRST_NAME:-Администратор}
      ADMIN_LAST_NAME: ${ADMIN_LAST_NAME:-Системы}
    volumes:
      - uploads_data:/app/uploads
    networks:
      - test-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Фронтенд - Next.js
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: test_platform_frontend
    env_file:
      - ../env/.env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-/api}
      NODE_ENV: ${NODE_ENV:-production}
    volumes:
      - /app/node_modules
      - static_files:/app/.next/static
    networks:
      - test-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n - платформа автоматизации
  n8n:
    image: n8nio/n8n:latest
    container_name: agb_n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME:-n8n}
      - DB_POSTGRESDB_USER=${N8N_DB_USER:-n8n_user}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD:-n8n_password}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-admin123}
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=regular
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=console,file
      - N8N_DEFAULT_LOCALE=ru
      - N8N_METRICS=true
      - N8N_DIAGNOSTICS_ENABLED=true
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_custom:/data/custom
      - ./n8n/workflows:/home/node/.n8n/workflows:ro
      - ./n8n/credentials:/home/node/.n8n/credentials:ro
    networks:
      - test-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis для очередей n8n
  redis:
    image: redis:7-alpine
    container_name: agb_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx
  nginx:
    build:
      context: ../../infrastructure/nginx
      dockerfile: Dockerfile
    container_name: test_platform_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../infrastructure/ssl:/etc/nginx/ssl:ro
      - uploads_data:/app/uploads:ro
      - static_files:/app/static:ro
    networks:
      - test-network
    depends_on:
      - frontend
      - backend
      - n8n
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  uploads_data:
  static_files:
  n8n_data:
  n8n_custom:
  redis_data:

networks:
  test-network:
    driver: bridge