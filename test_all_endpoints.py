#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""
import asyncio
import httpx
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class APIEndpointTester:
    """–¢–µ—Å—Ç–µ—Ä API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""

    def __init__(self, base_url="http://localhost"):
        self.base_url = base_url
        self.client = None
        self.token = None
        self.user = None
        self.test_results = {}

    async def __aenter__(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.client:
            await self.client.aclose()

    def log_result(self, test_name, success, message=""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results[test_name] = {
            "success": success,
            "message": message
        }
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}: {message}")

    async def test_health(self):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            response = await self.client.get(f"{self.base_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                self.log_result("API Health", True, f"Status: {data.get('status', 'unknown')}")
                return True
            else:
                self.log_result("API Health", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_result("API Health", False, str(e))
            return False

    async def test_auth_login(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            login_data = {
                "username": "admin",
                "password": "admin123"
            }
            response = await self.client.post(
                f"{self.base_url}/api/auth/login",
                json=login_data
            )

            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user = data.get("user")
                self.log_result("Auth Login", True, f"User: {self.user['username']}")
                return True
            else:
                self.log_result("Auth Login", False, f"Status: {response.status_code}")
                return False
        except Exception as e:
            self.log_result("Auth Login", False, str(e))
            return False

    async def test_get_users(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = await self.client.get(
                f"{self.base_url}/api/users/list",
                headers=headers
            )

            if response.status_code == 200:
                users = response.json()
                self.log_result("Get Users", True, f"Found {len(users)} users")
                return users
            else:
                self.log_result("Get Users", False, f"Status: {response.status_code}")
                return None
        except Exception as e:
            self.log_result("Get Users", False, str(e))
            return None

    async def test_create_chat(self, users):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
            participants = []
            for user in users[:2]:
                if user['id'] != self.user['id']:
                    participants.append(user['id'])
                    break

            chat_data = {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç API",
                "description": "–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–æ–º",
                "is_private": False,
                "participants": participants,
                "bots": []
            }

            response = await self.client.post(
                f"{self.base_url}/api/chat/rooms/",
                json=chat_data,
                headers=headers
            )

            if response.status_code == 200:
                chat = response.json()
                self.log_result("Create Chat", True, f"Chat ID: {chat['id']}")
                return chat
            else:
                error_data = response.json()
                self.log_result("Create Chat", False, f"Error: {error_data.get('detail', 'Unknown')}")
                return None
        except Exception as e:
            self.log_result("Create Chat", False, str(e))
            return None

    async def test_create_employee(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}

            employee_data = {
                "first_name": "–ò–≤–∞–Ω",
                "last_name": "–ò–≤–∞–Ω–æ–≤",
                "middle_name": "–ò–≤–∞–Ω–æ–≤–∏—á",
                "position": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                "department_id": 1,
                "email": "ivan@test.com",
                "phone": "+7(999)123-45-67"
            }

            response = await self.client.post(
                f"{self.base_url}/api/company-employees/",
                json=employee_data,
                headers=headers
            )

            if response.status_code == 200:
                employee = response.json()
                self.log_result("Create Employee", True, f"Employee: {employee['first_name']} {employee['last_name']}")
                return employee
            else:
                error_data = response.json()
                self.log_result("Create Employee", False, f"Error: {error_data.get('detail', 'Unknown')}")
                return None
        except Exception as e:
            self.log_result("Create Employee", False, str(e))
            return None

    async def test_create_event(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}

            from datetime import datetime, timedelta
            now = datetime.utcnow()
            start_time = now + timedelta(hours=1)
            end_time = start_time + timedelta(hours=1)

            event_data = {
                "title": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ API",
                "description": "–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–æ–º",
                "start_date": start_time.isoformat(),
                "end_date": end_time.isoformat(),
                "event_type": "meeting",
                "is_public": False,
                "participants": []
            }

            response = await self.client.post(
                f"{self.base_url}/api/events/",
                json=event_data,
                headers=headers
            )

            if response.status_code == 200:
                event = response.json()
                self.log_result("Create Event", True, f"Event: {event['title']}")
                return event
            else:
                error_data = response.json()
                self.log_result("Create Event", False, f"Error: {error_data.get('detail', 'Unknown')}")
                return None
        except Exception as e:
            self.log_result("Create Event", False, str(e))
            return None

    async def test_get_departments(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = await self.client.get(
                f"{self.base_url}/api/departments/list",
                headers=headers
            )

            if response.status_code == 200:
                departments = response.json()
                self.log_result("Get Departments", True, f"Found {len(departments)} departments")
                return departments
            else:
                self.log_result("Get Departments", False, f"Status: {response.status_code}")
                return None
        except Exception as e:
            self.log_result("Get Departments", False, str(e))
            return None

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API")
        print("=" * 60)

        # 1. –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è
        if not await self.test_health():
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return False

        # 2. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not await self.test_auth_login():
            print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return False

        # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await self.test_get_users()
        if not users:
            print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
        departments = await self.test_get_departments()
        if not departments:
            print("‚ö†Ô∏è –û—Ç–¥–µ–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = await self.test_create_employee()

        # 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        event = await self.test_create_event()

        # 7. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
        if users and len(users) > 1:
            chat = await self.test_create_chat(users)
        else:
            self.log_result("Create Chat", False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞")

        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")

        successful_tests = 0
        total_tests = len(self.test_results)

        for test_name, result in self.test_results.items():
            if result["success"]:
                successful_tests += 1

        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}/{total_tests}")

        if successful_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–õ–ê–¢–§–û–†–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            return True
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    base_url = os.getenv("API_URL", "http://localhost")

    async with APIEndpointTester(base_url) as tester:
        success = await tester.run_all_tests()

        if success:
            print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–õ–ê–¢–§–û–†–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        else:
            print("\n‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!")

if __name__ == "__main__":
    asyncio.run(main())
