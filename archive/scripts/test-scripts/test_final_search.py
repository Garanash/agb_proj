#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ò–ò —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
"""

import asyncio
import sys
import os
sys.path.append('/Users/andreydolgov/Desktop/programming/agb_proj/backend')

from database import get_db
from models import MatchingNomenclature
from sqlalchemy import select, or_
import re

async def final_search_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ò –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 60)
    
    test_queries = [
        "25241",
        "4535774", 
        "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –º—É—Ñ—Ç–∞",
        "–∫–æ–ª—å—Ü–æ –∫–µ—Ä–Ω–æ—Ä–≤–∞—Ç–µ–ª—å–Ω–æ–µ",
        "–±–æ–ª—Ç",
        "–≥–∞–π–∫–∞",
        "BL-123456 –±–æ–ª—Ç –ú12",
        "–ê–ì–ë-789012 –≥–∞–π–∫–∞ –ú10"
    ]
    
    async for db in get_db():
        for query in test_queries:
            print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
            numbers = re.findall(r'\d{4,8}', query)
            words = re.findall(r'[–∞-—è–ê-–Øa-zA-Z]{3,}', query)
            
            print(f"   –ß–∏—Å–ª–∞: {numbers}")
            print(f"   –°–ª–æ–≤–∞: {words}")
            
            # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
            conditions = []
            
            # –ü–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–∞–º
            for number in numbers:
                conditions.extend([
                    MatchingNomenclature.agb_article.ilike(f"%{number}%"),
                    MatchingNomenclature.bl_article.ilike(f"%{number}%"),
                    MatchingNomenclature.code_1c.ilike(f"%{number}%")
                ])
            
            # –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
            for word in words:
                conditions.append(MatchingNomenclature.name.ilike(f"%{word}%"))
            
            # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
            conditions.append(MatchingNomenclature.name.ilike(f"%{query}%"))
            
            if not conditions:
                print("   ‚ùå –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞")
                continue
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            query_obj = select(MatchingNomenclature).where(
                MatchingNomenclature.is_active == True
            ).where(or_(*conditions)).limit(5)
            
            result = await db.execute(query_obj)
            items = result.scalars().all()
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(items)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
            for item in items:
                confidence = 0
                match_reason = ""
                
                # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                for number in numbers:
                    if item.agb_article and number in item.agb_article:
                        confidence = max(confidence, 100)
                        match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ê–ì–ë"
                    elif item.bl_article and number in item.bl_article:
                        confidence = max(confidence, 95)
                        match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É BL"
                    elif item.code_1c and number in item.code_1c:
                        confidence = max(confidence, 90)
                        match_reason = "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É 1–°"
                
                if confidence < 100 and words:
                    word_matches = 0
                    for word in words:
                        if word.lower() in item.name.lower():
                            word_matches += 1
                    
                    if word_matches > 0:
                        word_confidence = (word_matches / len(words)) * 80
                        confidence = max(confidence, word_confidence)
                        match_reason = f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ {word_matches} —Å–ª–æ–≤–∞–º"
                
                print(f"      - {item.agb_article} | {item.bl_article} | {item.name[:50]}... | {confidence}% | {match_reason}")
        
        break

if __name__ == "__main__":
    asyncio.run(final_search_test())
