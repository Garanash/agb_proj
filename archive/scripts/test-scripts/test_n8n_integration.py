#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000/api/v1"
N8N_URL = "http://localhost:5678"

def test_n8n_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è n8n"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è n8n...")
    try:
        response = requests.get(f"{N8N_URL}/healthz", timeout=10)
        if response.status_code == 200:
            print("‚úÖ n8n –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå n8n –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n: {e}")
        return False

def test_webhook_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç webhook n8n"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook n8n...")
    try:
        test_data = {
            "event_type": "passport_created",
            "data": {
                "passport_number": "TEST-001",
                "order_number": "ORDER-001",
                "creator": {
                    "first_name": "–¢–µ—Å—Ç",
                    "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                }
            },
            "timestamp": "2024-01-01T12:00:00Z",
            "source": "test_script"
        }
        
        response = requests.post(
            f"{N8N_URL}/webhook/agb-platform",
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Webhook n8n —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"–û—Ç–≤–µ—Ç: {response.json()}")
            return True
        else:
            print(f"‚ùå Webhook n8n –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook: {e}")
        return False

def test_agb_api():
    """–¢–µ—Å—Ç API AGB Platform"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API AGB Platform...")
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API AGB Platform –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå API AGB Platform –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_n8n_workflows():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ workflows –≤ n8n"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ workflows –≤ n8n...")
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å workflows —á–µ—Ä–µ–∑ API (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        response = requests.get(f"{N8N_URL}/api/v1/workflows", timeout=10)
        if response.status_code == 200:
            workflows = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(workflows)} workflows")
            for workflow in workflows:
                print(f"  - {workflow.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {workflow.get('id')})")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å workflows: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workflows: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AGB Platform + n8n")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ó–¥–æ—Ä–æ–≤—å–µ n8n
    results.append(test_n8n_health())
    
    # –¢–µ—Å—Ç 2: API AGB Platform
    results.append(test_agb_api())
    
    # –¢–µ—Å—Ç 3: Webhook n8n
    results.append(test_webhook_direct())
    
    # –¢–µ—Å—Ç 4: Workflows n8n
    results.append(test_n8n_workflows())
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")
    
    if all(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    print("\nüåê –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print(f"  - n8n: {N8N_URL}")
    print(f"  - AGB Platform API: {API_BASE_URL}")
    print(f"  - n8n Webhook: {N8N_URL}/webhook/agb-platform")

if __name__ == "__main__":
    main()
