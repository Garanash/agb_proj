#!/usr/bin/env python3
import requests
import json

def test_new_mapping_search():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º...")
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    response = requests.post("http://localhost:8000/api/v1/auth/login", json=login_data)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.status_code} - {response.text}")
        return
    
    token = response.json()["access_token"]
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token[:20]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
    response = requests.get("http://localhost:8000/api/v1/article-matching/mappings/", headers=headers)
    if response.status_code == 200:
        mappings = response.json()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(mappings)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
        if mappings:
            print("üìã –ü—Ä–∏–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π:")
            for i, mapping in enumerate(mappings[:3]):
                print(f"   {i+1}. {mapping['contractor_article']} -> {mapping['agb_article']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {response.status_code}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö
    test_articles = [
        "–û–•–ö–£-000184 –£–ë–† - –ö—É–Ω–¥—É–º–∏ –°–º–∞–∑–∫–∞ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è GRIZZLY (–≤–µ–¥—Ä–æ 17 –∫–≥.) 10 —à—Ç",
        "940006/2 –°–º–∞–∑–∫–∞ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è",
        "–¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞"
    ]
    
    for test_article in test_articles:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫: '{test_article}'")
        
        data = {
            "message": test_article
        }
        
        response = requests.post("http://localhost:8000/api/v1/article-matching/ai-process/", 
                               headers=headers, 
                               data=data)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '')[:200]}...")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {len(result.get('matching_results', []))}")
            
            for i, match in enumerate(result.get('matching_results', [])):
                print(f"   {i+1}. {match.get('contractor_article')} -> {match.get('agb_article')} (matched: {match.get('matched')})")
                if hasattr(match, 'is_existing_mapping') and match.get('is_existing_mapping'):
                    print(f"      üîÑ –ù–∞–π–¥–µ–Ω–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")

if __name__ == "__main__":
    test_new_mapping_search()
