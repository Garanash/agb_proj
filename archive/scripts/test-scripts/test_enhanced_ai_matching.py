#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ò–ò
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.database import get_db
from backend.api.v1.endpoints.article_matching import smart_search_with_ai, analyze_item_with_ai

async def test_ai_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ò–ò"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ò–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    test_items = [
        "–ë–æ–ª—Ç –ú12—Ö20 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
        "–°–º–∞–∑–∫–∞ –ª–∏—Ç–∏–µ–≤–∞—è –õ–∏—Ç–æ–ª-24",
        "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ä–µ–∑–∏–Ω–æ–≤–∞—è –∫—Ä—É–≥–ª–∞—è",
        "–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 50–º–º",
        "–ö—Ä–∞—Å–∫–∞ —ç–º–∞–ª—å –ü–§-115 –±–µ–ª–∞—è",
        "–ö–∞–±–µ–ª—å –í–í–ì 3—Ö2.5",
        "–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫ LED –ø–æ—Ç–æ–ª–æ—á–Ω—ã–π",
        "–ö—Ä–∞–Ω —à–∞—Ä–æ–≤—ã–π 1/2 –¥—é–π–º–∞"
    ]
    
    async for db in get_db():
        for item in test_items:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{item}'")
            print("-" * 30)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ò–ò
            try:
                analysis = await analyze_item_with_ai(item, db)
                print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(analysis.get('keywords', []))}")
                print(f"üìù –°–∏–Ω–æ–Ω–∏–º—ã: {', '.join(analysis.get('synonyms', []))}")
                print(f"üîç –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {analysis.get('enhanced_queries', [])}")
                print(f"üìã –ê–Ω–∞–ª–∏–∑: {analysis.get('analysis', '–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞')}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
            try:
                search_result = await smart_search_with_ai(item, db)
                search_type = search_result.get("search_type", "unknown")
                matches = search_result.get("matches", [])
                
                print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {search_type}")
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
                
                if matches:
                    for i, match in enumerate(matches[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"  {i+1}. {match.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        print(f"     –ê–ì–ë: {match.get('agb_article', '–ù–µ—Ç')}")
                        print(f"     BL: {match.get('bl_article', '–ù–µ—Ç')}")
                        print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match.get('confidence', 0)}%")
                        if match.get('enhanced_query'):
                            print(f"     –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {match.get('enhanced_query')}")
                else:
                    print("  ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            
            print()
        
        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for

async def test_enhanced_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ –Ω–∞–π—Ç–∏—Å—å —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
    test_items = [
        "–ö—Ä–µ–ø–µ–∂–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ –º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ",
        "–°–º–∞–∑—ã–≤–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª",
        "–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç",
        "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–∑–¥–µ–ª–∏–µ"
    ]
    
    async for db in get_db():
        for item in test_items:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: '{item}'")
            print("-" * 40)
            
            try:
                result = await smart_search_with_ai(item, db)
                search_type = result.get("search_type", "unknown")
                matches = result.get("matches", [])
                ai_analysis = result.get("ai_analysis", {})
                
                print(f"üîç –¢–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
                
                if search_type == "enhanced_ai_match":
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ò–ò!")
                    print(f"üìä –ê–Ω–∞–ª–∏–∑ –ò–ò: {ai_analysis.get('analysis', '–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞')}")
                    print(f"üîë –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ai_analysis.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                if matches:
                    for i, match in enumerate(matches[:2]):
                        print(f"  {i+1}. {match.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match.get('confidence', 0)}%")
                        if match.get('enhanced_query'):
                            print(f"     –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {match.get('enhanced_query')}")
                else:
                    print("  ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    if ai_analysis:
                        print(f"  üìä –ê–Ω–∞–ª–∏–∑ –ò–ò: {ai_analysis.get('analysis', '–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞')}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            print()
        
        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    print("=" * 70)
    
    try:
        await test_ai_analysis()
        await test_enhanced_search()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
