#!/usr/bin/env python3
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/Users/andreydolgov/Desktop/programming/agb_proj/backend')

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from api.v1.endpoints.article_matching import smart_search_with_ai
from models import ArticleMapping

async def test_debug_mapping_search():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º"""
    print("üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL = "postgresql+asyncpg://postgres:postgres@localhost:5432/agb_db"
    engine = create_async_engine(DATABASE_URL)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    async with async_session() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        from sqlalchemy import select
        result = await db.execute(select(ArticleMapping).limit(5))
        mappings = result.scalars().all()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(mappings)} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤ –ë–î:")
        for mapping in mappings:
            print(f"   - {mapping.contractor_article} -> {mapping.agb_article}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º smart_search_with_ai
        test_text = "–û–•–ö–£-000184 –£–ë–† - –ö—É–Ω–¥—É–º–∏ –°–º–∞–∑–∫–∞ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è GRIZZLY"
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º smart_search_with_ai —Å: '{test_text}'")
        
        try:
            result = await smart_search_with_ai(test_text, db)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_debug_mapping_search())
