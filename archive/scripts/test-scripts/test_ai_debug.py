#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ò–ò —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
"""

import requests
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/andreydolgov/Desktop/programming/agb_proj/backend')

def test_ai_search_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ò–ò –ø–æ–∏—Å–∫–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò –ø–æ–∏—Å–∫...")
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    print("\n1. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É '1299650'")
    url = "http://localhost:8000/api/v1/article-matching/smart-search/"
    
    test_data = {
        "search_text": "1299650"
    }
    
    try:
        response = requests.post(url, json=test_data)
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"–¢–∏–ø –ø–æ–∏—Å–∫–∞: {result.get('search_type', 'unknown')}")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(result.get('matches', []))}")
            for match in result.get('matches', []):
                print(f"  - {match.get('agb_article', '')} | {match.get('name', '')} | {match.get('confidence', 0)}%")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

def test_ai_processing():
    """–¢–µ—Å—Ç –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\n2. –¢–µ—Å—Ç –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
    url = "http://localhost:8000/api/v1/article-matching/ai-process/"
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    test_text = """
    –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É
    
    –ê—Ä—Ç–∏–∫—É–ª: 940002/1
    –û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ–ª—Ç –ú8—Ö20
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 —à—Ç
    
    –ê—Ä—Ç–∏–∫—É–ª: 940003/1  
    –û–ø–∏—Å–∞–Ω–∏–µ: –ì–∞–π–∫–∞ –ú8
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 50 —à—Ç
    
    –ê—Ä—Ç–∏–∫—É–ª: 940004/1
    –û–ø–∏—Å–∞–Ω–∏–µ: –®–∞–π–±–∞ –ú8
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 200 —à—Ç
    """
    
    try:
        response = requests.post(url, data={"message": test_text})
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(result.get('matching_results', []))}")
            for match in result.get('matching_results', []):
                print(f"  - {match.get('contractor_article', '')} | {match.get('description', '')} | {match.get('matched', False)}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

def test_natural_language():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
    print("\n3. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")
    url = "http://localhost:8000/api/v1/article-matching/ai-process/"
    
    test_queries = [
        "–ù–∞–π–¥–∏ –±–æ–ª—Ç—ã –ú8",
        "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –≥–∞–π–∫–∏",
        "–ò—â—É —à–ø–∏–Ω–¥–µ–ª—å –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞",
        "–ù—É–∂–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –º—É—Ñ—Ç—ã"
    ]
    
    for query in test_queries:
        print(f"\n–ó–∞–ø—Ä–æ—Å: '{query}'")
        try:
            response = requests.post(url, data={"message": query})
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '')}")
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(result.get('matching_results', []))}")
            else:
                print(f"–û—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

if __name__ == "__main__":
    test_ai_search_detailed()
    test_ai_processing()
    test_natural_language()
