#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from database import async_session
from models import ContractorRequest, ContractorRequestItem, ArticleMapping, VEDNomenclature
from sqlalchemy import select


async def create_test_request():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞"""
    
    print("üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞...")
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
    test_items = [
        {
            "line_number": 42,
            "contractor_article": "1299650",
            "description": "–®–ø–∏–Ω–¥–µ–ª—å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ H/HU, 25231, SDT",
            "unit": "—à—Ç",
            "quantity": 5,
            "category": "–î–ª—è –±—É—Ä–µ–Ω–∏—è"
        },
        {
            "line_number": 43,
            "contractor_article": "1298240",
            "description": "–í—Ç—É–ª–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏ 306131, SDT",
            "unit": "—à—Ç",
            "quantity": 12,
            "category": "–î–ª—è –±—É—Ä–µ–Ω–∏—è"
        },
        {
            "line_number": 44,
            "contractor_article": "1298244",
            "description": "–ü—Ä—É–∂–∏–Ω–∞ –º—è–≥–∫–∞—è N/H/P, —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏, 104966, SDT",
            "unit": "—à—Ç",
            "quantity": 10,
            "category": "–î–ª—è –±—É—Ä–µ–Ω–∏—è"
        },
        {
            "line_number": 45,
            "contractor_article": "1299679",
            "description": "–©–µ–∫–∞ –≤–µ—Ä—Ö–Ω—è—è –¥–ª—è –∫–ª—é—á–∞ —Ä–∞–∑–≤–æ–¥–Ω–æ–≥–æ 24\", 14947, SDT",
            "unit": "—à—Ç",
            "quantity": 8,
            "category": "–î–ª—è –±—É—Ä–µ–Ω–∏—è"
        },
        {
            "line_number": 46,
            "contractor_article": "1299680",
            "description": "–©–µ–∫–∞ –≤–µ—Ä—Ö–Ω—è—è –¥–ª—è –∫–ª—é—á–∞ —Ä–∞–∑–≤–æ–¥–Ω–æ–≥–æ 36\", 14950, SDT",
            "unit": "—à—Ç",
            "quantity": 8,
            "category": "–î–ª—è –±—É—Ä–µ–Ω–∏—è"
        },
        {
            "line_number": 47,
            "contractor_article": "1299682",
            "description": "–©–µ–∫–∞ –Ω–∏–∂–Ω—è—è –∏ —à—Ç–∏—Ñ—Ç –≤ —Å–±–æ—Ä–µ –¥–ª—è –∫–ª—é—á–∞ —Ä–∞–∑–≤–æ–¥–Ω–æ–≥–æ 24\", 14946, SDT",
            "unit": "—à—Ç",
            "quantity": 8,
            "category": "–î–ª—è –±—É—Ä–µ–Ω–∏—è"
        }
    ]
    
    async with async_session() as db:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            request_number = f"TEST_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            test_request = ContractorRequest(
                request_number=request_number,
                contractor_name="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
                request_date=datetime.now(),
                total_items=len(test_items),
                created_by=1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            )
            
            db.add(test_request)
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—è–≤–∫–∏
            for item_data in test_items:
                test_item = ContractorRequestItem(
                    request_id=test_request.id,
                    line_number=item_data["line_number"],
                    contractor_article=item_data["contractor_article"],
                    description=item_data["description"],
                    unit=item_data["unit"],
                    quantity=item_data["quantity"],
                    category=item_data["category"]
                )
                db.add(test_item)
            
            await db.commit()
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {request_number}")
            print(f"üìä ID –∑–∞—è–≤–∫–∏: {test_request.id}")
            print(f"üìã –ü–æ–∑–∏—Ü–∏–π: {len(test_items)}")
            
            return test_request.id
            
        except Exception as e:
            await db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {e}")
            raise


async def create_test_mappings():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    
    print("üîó –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–æ–≤
    test_mappings = [
        {
            "contractor_article": "1299650",
            "contractor_description": "–®–ø–∏–Ω–¥–µ–ª—å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ H/HU, 25231, SDT",
            "agb_article": "AGB-SPINDLE-HU-25231",
            "agb_description": "–®–ø–∏–Ω–¥–µ–ª—å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ H/HU",
            "bl_article": "BL-SPINDLE-HU-25231",
            "bl_description": "–®–ø–∏–Ω–¥–µ–ª—å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ H/HU (BL)",
            "packaging_factor": 1,
            "unit": "—à—Ç"
        },
        {
            "contractor_article": "1298240",
            "contractor_description": "–í—Ç—É–ª–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏ 306131, SDT",
            "agb_article": "AGB-SLEEVE-306131",
            "agb_description": "–í—Ç—É–ª–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏ 306131",
            "bl_article": "BL-SLEEVE-306131",
            "bl_description": "–í—Ç—É–ª–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏ 306131 (BL)",
            "packaging_factor": 2,
            "unit": "—à—Ç"
        },
        {
            "contractor_article": "1298244",
            "contractor_description": "–ü—Ä—É–∂–∏–Ω–∞ –º—è–≥–∫–∞—è N/H/P, —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏, 104966, SDT",
            "agb_article": "AGB-SPRING-104966",
            "agb_description": "–ü—Ä—É–∂–∏–Ω–∞ –º—è–≥–∫–∞—è N/H/P, —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏, 104966",
            "bl_article": "BL-SPRING-104966",
            "bl_description": "–ü—Ä—É–∂–∏–Ω–∞ –º—è–≥–∫–∞—è N/H/P, —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏, 104966 (BL)",
            "packaging_factor": 5,
            "unit": "—à—Ç"
        }
    ]
    
    async with async_session() as db:
        try:
            loaded_count = 0
            
            for mapping_data in test_mappings:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                existing = await db.execute(
                    select(ArticleMapping).where(
                        ArticleMapping.contractor_article == mapping_data["contractor_article"],
                        ArticleMapping.agb_article == mapping_data["agb_article"]
                    )
                )
                if existing.scalar_one_or_none():
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                new_mapping = ArticleMapping(
                    contractor_article=mapping_data["contractor_article"],
                    contractor_description=mapping_data["contractor_description"],
                    agb_article=mapping_data["agb_article"],
                    agb_description=mapping_data["agb_description"],
                    bl_article=mapping_data["bl_article"],
                    bl_description=mapping_data["bl_description"],
                    packaging_factor=mapping_data["packaging_factor"],
                    unit=mapping_data["unit"]
                )
                
                db.add(new_mapping)
                loaded_count += 1
            
            await db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {loaded_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
            
        except Exception as e:
            await db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {e}")
            raise


async def test_matching_algorithm():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
    
    from difflib import SequenceMatcher
    
    def calculate_similarity(text1: str, text2: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
        return SequenceMatcher(None, text1.lower(), text2.lower()).ratio()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_descriptions = [
        "–®–ø–∏–Ω–¥–µ–ª—å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ H/HU, 25231, SDT",
        "–í—Ç—É–ª–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏ 306131, SDT",
        "–ü—Ä—É–∂–∏–Ω–∞ –º—è–≥–∫–∞—è N/H/P, —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏, 104966, SDT",
        "–©–µ–∫–∞ –≤–µ—Ä—Ö–Ω—è—è –¥–ª—è –∫–ª—é—á–∞ —Ä–∞–∑–≤–æ–¥–Ω–æ–≥–æ 24\", 14947, SDT",
        "–©–µ–∫–∞ –≤–µ—Ä—Ö–Ω—è—è –¥–ª—è –∫–ª—é—á–∞ —Ä–∞–∑–≤–æ–¥–Ω–æ–≥–æ 36\", 14950, SDT",
        "–©–µ–∫–∞ –Ω–∏–∂–Ω—è—è –∏ —à—Ç–∏—Ñ—Ç –≤ —Å–±–æ—Ä–µ –¥–ª—è –∫–ª—é—á–∞ —Ä–∞–∑–≤–æ–¥–Ω–æ–≥–æ 24\", 14946, SDT"
    ]
    
    test_nomenclature = [
        {"name": "–®–ø–∏–Ω–¥–µ–ª—å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞ H/HU", "article": "AGB-SPINDLE-HU-25231"},
        {"name": "–í—Ç—É–ª–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏ 306131", "article": "AGB-SLEEVE-306131"},
        {"name": "–ü—Ä—É–∂–∏–Ω–∞ –º—è–≥–∫–∞—è N/H/P, —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏, 104966", "article": "AGB-SPRING-104966"},
        {"name": "–ö–ª—é—á —Ä–∞–∑–≤–æ–¥–Ω–æ–π 24\"", "article": "AGB-WRENCH-24"},
        {"name": "–ö–ª—é—á —Ä–∞–∑–≤–æ–¥–Ω–æ–π 36\"", "article": "AGB-WRENCH-36"},
        {"name": "–©–µ–∫–∞ –¥–ª—è –∫–ª—é—á–∞ —Ä–∞–∑–≤–æ–¥–Ω–æ–≥–æ 24\"", "article": "AGB-WRENCH-CHEEK-24"}
    ]
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
    print("-" * 80)
    
    for desc in test_descriptions:
        best_match = None
        best_score = 0.0
        
        for nom in test_nomenclature:
            name_score = calculate_similarity(desc, nom["name"])
            article_score = calculate_similarity(desc, nom["article"])
            combined_score = max(name_score, article_score * 0.8)
            
            if combined_score > best_score:
                best_score = combined_score
                best_match = nom
        
        if best_match and best_score > 0.3:
            print(f"‚úÖ {desc[:50]}...")
            print(f"   ‚Üí {best_match['name']} ({best_match['article']})")
            print(f"   ‚Üí –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {int(best_score * 100)}%")
        else:
            print(f"‚ùå {desc[:50]}...")
            print(f"   ‚Üí –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    print("=" * 70)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        await create_test_mappings()
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
        request_id = await create_test_request()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        await test_matching_algorithm()
        
        print("=" * 70)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìù ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {request_id}")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoints:")
        print(f"   - GET /api/v1/article-matching/requests/{request_id}")
        print(f"   - POST /api/v1/article-matching/requests/{request_id}/match")
        print(f"   - GET /api/v1/article-matching/requests/{request_id}/export/excel")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())



