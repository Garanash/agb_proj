#!/bin/bash

# üîç AGB Project - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –±–µ–∫–µ–Ω–¥–∞
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

echo "üîç AGB Project - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –±–µ–∫–µ–Ω–¥–∞"
echo "==========================================="

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose ps

echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ backend..."
docker-compose ps backend

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –±–µ–∫–µ–Ω–¥–∞
echo ""
log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –±–µ–∫–µ–Ω–¥–∞:"
echo "====================================="
docker-compose logs --tail=50 backend

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL..."
if docker-compose exec -T postgres pg_isready -U felix_prod_user -d agb_felix_prod > /dev/null 2>&1; then
    log_success "PostgreSQL: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
else
    log_error "PostgreSQL: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–µ–∫–µ–Ω–¥–∞..."
docker-compose exec backend env | grep -E "(DATABASE|REDIS|SECRET)" | head -10

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –±–µ–∫–µ–Ω–¥–∞..."
if curl -f http://localhost:8000/api/health > /dev/null 2>&1; then
    log_success "API Health: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
    curl -s http://localhost:8000/api/health | head -5
else
    log_error "API Health: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã..."
netstat -tlnp | grep -E "(8000|5432|6379)" || echo "–ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

# 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º backend..."
docker stats --no-stream backend

# 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
if [ -f "config/env/production.env" ]; then
    log_success "production.env: ‚úÖ –ù–∞–π–¥–µ–Ω"
    echo "–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:"
    head -10 config/env/production.env
else
    log_error "production.env: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
fi

# 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo ""
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ requirements.txt..."
if [ -f "backend/requirements.txt" ]; then
    log_success "requirements.txt: ‚úÖ –ù–∞–π–¥–µ–Ω"
    echo "–ü–µ—Ä–≤—ã–µ 10 –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:"
    head -10 backend/requirements.txt
else
    log_error "requirements.txt: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
fi

# 10. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
echo ""
log_warning "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
echo "====================="
echo "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∫–µ–Ω–¥:"
echo "   docker-compose restart backend"
echo ""
echo "2. –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –±–µ–∫–µ–Ω–¥:"
echo "   docker-compose build --no-cache backend"
echo "   docker-compose up -d backend"
echo ""
echo "3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:"
echo "   docker-compose logs -f backend"
echo ""
echo "4. –ó–∞–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:"
echo "   docker-compose exec backend bash"
echo ""
echo "5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
echo "   docker-compose exec backend python -c \"import psycopg2; print('DB OK')\""

log_info "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
