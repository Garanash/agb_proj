#!/bin/bash

# üöÄ AGB Project - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å
    AVAILABLE_MEMORY=$(free -m | awk 'NR==2{printf "%.0f", $7}')
    if [ "$AVAILABLE_MEMORY" -lt 2048 ]; then
        log_warning "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${AVAILABLE_MEMORY}MB –ø–∞–º—è—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2GB."
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        log_success "–î–æ—Å—Ç—É–ø–Ω–æ ${AVAILABLE_MEMORY}MB –ø–∞–º—è—Ç–∏"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    AVAILABLE_SPACE=$(df / | tail -1 | awk '{print $4}')
    if [ "$AVAILABLE_SPACE" -lt 2000000 ]; then
        log_warning "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${AVAILABLE_SPACE}KB"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${AVAILABLE_SPACE}KB"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
cleanup_system() {
    log_info "–û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose down -v 2>/dev/null || true
    
    # –û—á–∏—â–∞–µ–º Docker
    docker system prune -f
    
    # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
    docker image prune -f
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ swap —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
create_swap() {
    if [ ! -f /swapfile ]; then
        log_info "–°–æ–∑–¥–∞–µ–º swap —Ñ–∞–π–ª..."
        sudo fallocate -l 2G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
        log_success "Swap —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    else
        log_success "Swap —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ü–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞
build_gradually() {
    log_info "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—ç—Ç–∞–ø–Ω—É—é —Å–±–æ—Ä–∫—É..."
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    log_info "–°–±–æ—Ä–∫–∞ PostgreSQL..."
    docker-compose -f docker-compose.optimized.yml build postgres
    docker-compose -f docker-compose.optimized.yml up -d postgres
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã
    log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
    sleep 30
    
    # 2. Redis
    log_info "–°–±–æ—Ä–∫–∞ Redis..."
    docker-compose -f docker-compose.optimized.yml build redis
    docker-compose -f docker-compose.optimized.yml up -d redis
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
    log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis..."
    sleep 15
    
    # 3. Backend
    log_info "–°–±–æ—Ä–∫–∞ Backend..."
    docker-compose -f docker-compose.optimized.yml build backend
    docker-compose -f docker-compose.optimized.yml up -d backend
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Backend
    log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Backend..."
    sleep 60
    
    # 4. Frontend
    log_info "–°–±–æ—Ä–∫–∞ Frontend..."
    docker-compose -f docker-compose.optimized.yml build frontend
    docker-compose -f docker-compose.optimized.yml up -d frontend
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Frontend
    log_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Frontend..."
    sleep 30
    
    # 5. Nginx
    log_info "–°–±–æ—Ä–∫–∞ Nginx..."
    docker-compose -f docker-compose.optimized.yml build nginx
    docker-compose -f docker-compose.optimized.yml up -d nginx
    
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f docker-compose.optimized.yml ps
    
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if docker-compose -f docker-compose.optimized.yml exec -T postgres pg_isready -U felix_prod_user -d agb_felix_prod > /dev/null 2>&1; then
        log_success "PostgreSQL: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "PostgreSQL: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker-compose -f docker-compose.optimized.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
        log_success "Redis: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "Redis: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
    if curl -f http://localhost:8000/api/health > /dev/null 2>&1; then
        log_success "Backend: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:8000)"
    else
        log_warning "Backend: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
    if curl -f http://localhost:3000 > /dev/null 2>&1; then
        log_success "Frontend: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost:3000)"
    else
        log_warning "Frontend: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
    if curl -f http://localhost > /dev/null 2>&1; then
        log_success "Nginx: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (http://localhost)"
    else
        log_warning "Nginx: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
monitor_resources() {
    log_info "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:"
    free -h
    echo ""
    
    echo "üíø –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:"
    df -h
    echo ""
    
    echo "‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ CPU:"
    top -bn1 | head -10
    echo ""
    
    echo "üê≥ Docker —Ä–µ—Å—É—Ä—Å—ã:"
    docker system df
    echo ""
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    echo ""
    echo "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
    echo "=================================="
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
    echo "   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost"
    echo "   ‚Ä¢ API: http://localhost/api"
    echo "   ‚Ä¢ Backend (–ø—Ä—è–º–æ–π): http://localhost:8000"
    echo "   ‚Ä¢ Frontend (–ø—Ä—è–º–æ–π): http://localhost:3000"
    echo ""
    echo "üë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
    echo "   ‚Ä¢ –õ–æ–≥–∏–Ω: admin"
    echo "   ‚Ä¢ –ü–∞—Ä–æ–ª—å: $(grep ADMIN_PASSWORD config/env/production.env | cut -d'=' -f2)"
    echo ""
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.optimized.yml ps"
    echo "   ‚Ä¢ –õ–æ–≥–∏: docker-compose -f docker-compose.optimized.yml logs -f"
    echo "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose.optimized.yml down"
    echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.optimized.yml restart"
    echo ""
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   ‚Ä¢ –†–µ—Å—É—Ä—Å—ã: ./diagnose-server.sh"
    echo "   ‚Ä¢ –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: docker-compose -f docker-compose.optimized.yml logs -f"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ AGB Project - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "========================================="
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_resources
    cleanup_system
    create_swap
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    build_gradually
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    check_status
    monitor_resources
    show_access_info
    
    echo ""
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'screen' –∏–ª–∏ 'nohup' –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
}

# –ó–∞–ø—É—Å–∫
main "$@"
