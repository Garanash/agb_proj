#!/bin/bash

# üîç AGB Project - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

echo "üîç AGB Project - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
echo "===================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
check_system_resources() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã..."
    
    echo "üíæ –ü–∞–º—è—Ç—å:"
    free -h
    echo ""
    
    echo "üíø –î–∏—Å–∫:"
    df -h
    echo ""
    
    echo "‚ö° CPU:"
    top -bn1 | head -20
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    AVAILABLE_SPACE=$(df / | tail -1 | awk '{print $4}')
    if [ "$AVAILABLE_SPACE" -lt 2000000 ]; then  # –ú–µ–Ω—å—à–µ 2GB
        log_warning "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${AVAILABLE_SPACE}KB"
    else
        log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${AVAILABLE_SPACE}KB"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker..."
    
    if ! systemctl is-active --quiet docker; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        return 1
    fi
    
    log_success "Docker –∑–∞–ø—É—â–µ–Ω"
    
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker ps -a
    echo ""
    
    echo "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker:"
    docker system df
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_container_logs() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    for container in $(docker ps -a --format "{{.Names}}"); do
        echo "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container"
        echo "----------------------------------------"
        docker logs --tail=20 "$container" 2>&1 | head -10
        echo ""
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks
check_health_checks() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º health checks..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
    services=("postgres" "redis" "backend" "frontend" "nginx")
    
    for service in "${services[@]}"; do
        if docker ps --format "{{.Names}}" | grep -q "$service"; then
            health_status=$(docker inspect --format='{{.State.Health.Status}}' "$service" 2>/dev/null || echo "no-health-check")
            if [ "$health_status" = "healthy" ]; then
                log_success "$service: ‚úÖ –ó–¥–æ—Ä–æ–≤"
            elif [ "$health_status" = "unhealthy" ]; then
                log_error "$service: ‚ùå –ù–µ–∑–¥–æ—Ä–æ–≤"
            else
                log_warning "$service: ‚ö†Ô∏è  –ë–µ–∑ health check –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
            fi
        else
            log_warning "$service: ‚ö†Ô∏è  –ù–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã..."
    
    echo "üåê –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:"
    netstat -tlnp | grep -E ':(80|443|3000|8000|5432|6379|5678)' || echo "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_configuration() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    
    if [ ! -f "config/env/production.env" ]; then
        log_error "–§–∞–π–ª config/env/production.env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    echo "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    grep -E "^(POSTGRES_|SECRET_KEY|ADMIN_|DOMAIN)" config/env/production.env | head -10
    echo ""
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
show_recommendations() {
    echo ""
    echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:"
    echo "================================"
    echo ""
    echo "1. üîß –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞–º—è—Ç–∏:"
    echo "   - –£–≤–µ–ª–∏—á—å—Ç–µ swap: sudo fallocate -l 2G /swapfile && sudo chmod 600 /swapfile && sudo mkswap /swapfile && sudo swapon /swapfile"
    echo "   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: sudo systemctl stop n8n (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω)"
    echo ""
    echo "2. üê≥ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Docker:"
    echo "   - –û—á–∏—Å—Ç–∏—Ç–µ Docker: docker system prune -a -f"
    echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker: sudo systemctl restart docker"
    echo ""
    echo "3. üì¶ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–±–æ—Ä–∫–æ–π:"
    echo "   - –°–æ–±–µ—Ä–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É: docker-compose build postgres"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏: docker-compose build --no-cache 2>&1 | tee build.log"
    echo ""
    echo "4. üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫:"
    echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ñ–æ–Ω–µ: nohup ./deploy-server.sh > deploy.log 2>&1 &"
    echo "   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ screen: screen -S deploy ./deploy-server.sh"
    echo ""
    echo "5. üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏: docker-compose logs -f"
    echo "   - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã: htop"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_system_resources
    check_docker_status
    check_container_logs
    check_health_checks
    check_ports
    check_configuration
    show_recommendations
    
    echo ""
    log_info "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—à–µ."
}

# –ó–∞–ø—É—Å–∫
main "$@"
