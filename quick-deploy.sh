#!/bin/bash
set -e

# üöÄ AGB Project - –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./quick-deploy.sh [domain] [admin_password]

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
DOMAIN=${1:-"localhost"}
ADMIN_PASSWORD=${2:-"admin123"}

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π AGB –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –¥–æ–º–µ–Ω: $DOMAIN"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    fi
    
    log "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ production.env
create_production_env() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ production.env..."
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    SECRET_KEY=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ë–î
    DB_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
    
    cat > config/env/production.env << EOF
# Production Environment Variables
# Database
POSTGRES_DB=agb_felix_prod
POSTGRES_USER=felix_prod_user
POSTGRES_PASSWORD=$DB_PASSWORD
DATABASE_URL=postgresql+asyncpg://felix_prod_user:$DB_PASSWORD@postgres:5432/agb_felix_prod

# JWT Security
SECRET_KEY=$SECRET_KEY
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440

# Application Settings
DEBUG=false
ENVIRONMENT=production
AUTO_INIT_DATA=true

# Admin User
ADMIN_USERNAME=admin
ADMIN_PASSWORD=$ADMIN_PASSWORD
ADMIN_EMAIL=admin@$DOMAIN
ADMIN_FIRST_NAME=–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
ADMIN_LAST_NAME=–°–∏—Å—Ç–µ–º—ã

# Frontend API URL
NEXT_PUBLIC_API_URL=https://$DOMAIN/api

# CORS Settings
ALLOWED_HOSTS=$DOMAIN,www.$DOMAIN
CORS_ORIGINS=https://$DOMAIN,https://www.$DOMAIN

# File Upload Settings
MAX_UPLOAD_SIZE=10485760
ALLOWED_EXTENSIONS=pdf,doc,docx,xls,xlsx,png,jpg,jpeg,gif

# Logging
LOG_LEVEL=WARNING
LOG_FILE=/app/logs/agb_prod.log

# Security
SESSION_COOKIE_SECURE=true
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=Lax

# Rate Limiting
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# Backup Settings
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 4 * * *
BACKUP_RETENTION_DAYS=30

# n8n Settings
N8N_HOST=$DOMAIN
N8N_PROTOCOL=https
N8N_WEBHOOK_URL=https://$DOMAIN/n8n
N8N_DB_NAME=n8n_prod
N8N_DB_USER=n8n_prod_user
N8N_DB_PASSWORD=$DB_PASSWORD
N8N_USER=admin
N8N_PASSWORD=$ADMIN_PASSWORD
N8N_LOG_LEVEL=info

# Nginx Settings
NGINX_PORT=80
NGINX_SSL_PORT=443
EOF

    log "‚úÖ production.env —Å–æ–∑–¥–∞–Ω"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_existing() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    docker-compose -f config/docker/docker-compose.prod.yml down 2>/dev/null || true
    
    log "‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
build_and_start() {
    log "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    docker-compose -f config/docker/docker-compose.prod.yml up -d --build
    
    log "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
check_health() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
    local services=("postgres" "backend" "frontend" "nginx")
    for service in "${services[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "$service"; then
            log "‚úÖ $service: –∑–∞–ø—É—â–µ–Ω"
        else
            warn "‚ùå $service: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    log "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:"
    echo "   Frontend: https://$DOMAIN"
    echo "   API: https://$DOMAIN/api"
    echo "   API Docs: https://$DOMAIN/api/docs"
    echo "   n8n: https://$DOMAIN/n8n"
    echo ""
    echo "üë§ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
    echo "   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / $ADMIN_PASSWORD"
    echo ""
    echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f config/docker/docker-compose.prod.yml ps
    echo ""
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   –°—Ç–∞—Ç—É—Å: docker-compose -f config/docker/docker-compose.prod.yml ps"
    echo "   –õ–æ–≥–∏: docker-compose -f config/docker/docker-compose.prod.yml logs -f"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f config/docker/docker-compose.prod.yml down"
    echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f config/docker/docker-compose.prod.yml restart"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_dependencies
    create_production_env
    stop_existing
    build_and_start
    check_health
    show_access_info
}

# –ó–∞–ø—É—Å–∫
main "$@"
