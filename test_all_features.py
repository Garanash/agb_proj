#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""
import asyncio
import httpx
import json
from typing import Dict, Any

class PlatformTester:
    def __init__(self, base_url: str = "http://localhost"):
        self.base_url = base_url
        self.token = None
        self.user = None

    async def login(self, username: str = "admin", password: str = "admin123") -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
        print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/api/auth/login",
                    json={"username": username, "password": password},
                    timeout=10.0
                )

                if response.status_code == 200:
                    data = response.json()
                    self.token = data.get("access_token")
                    self.user = data.get("user")
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.user['username']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def test_api_health(self) -> bool:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
        print("üìä –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API")

        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{self.base_url}/api/health", timeout=5.0)
                if response.status_code == 200:
                    print("‚úÖ API –∑–¥–æ—Ä–æ–≤—å–µ: OK")
                    return True
                else:
                    print(f"‚ùå API –∑–¥–æ—Ä–æ–≤—å–µ: {response.status_code}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è API: {e}")
            return False

    async def test_users_api(self) -> bool:
        """–¢–µ—Å—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞"""
        print("üë• –¢–µ—Å—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞")

        if not self.token:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False

        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/users/chat-users",
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=10.0
                )

                if response.status_code == 200:
                    users = response.json()
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    if len(users) > 0:
                        print(f"   –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users[0]['username']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    async def test_departments_api(self) -> bool:
        """–¢–µ—Å—Ç API –æ—Ç–¥–µ–ª–æ–≤"""
        print("üè¢ –¢–µ—Å—Ç API –æ—Ç–¥–µ–ª–æ–≤")

        if not self.token:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False

        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/departments/list",
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=10.0
                )

                if response.status_code == 200:
                    departments = response.json()
                    print(f"‚úÖ –û—Ç–¥–µ–ª—ã: {len(departments)} –æ—Ç–¥–µ–ª–æ–≤")
                    if len(departments) > 0:
                        print(f"   –ü–µ—Ä–≤—ã–π –æ—Ç–¥–µ–ª: {departments[0]['name']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–æ–≤: {e}")
            return False

    async def test_employees_api(self) -> bool:
        """–¢–µ—Å—Ç API —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
        print("üë∑ –¢–µ—Å—Ç API —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏")

        if not self.token:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False

        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/company-employees/",
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=10.0
                )

                if response.status_code == 200:
                    employees = response.json()
                    print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
                    if len(employees) > 0:
                        print(f"   –ü–µ—Ä–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employees[0]['first_name']} {employees[0]['last_name']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
            return False

    async def test_event_creation(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        print("üìÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")

        if not self.token or not self.user:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False

        try:
            async with httpx.AsyncClient() as client:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                users_response = await client.get(
                    f"{self.base_url}/api/users/chat-users",
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=10.0
                )

                if users_response.status_code != 200:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return False

                users = users_response.json()
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
                participants = []
                for user in users[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if user['id'] != self.user['id']:
                        participants.append(user['id'])
                        if len(participants) >= 2:  # –ú–∞–∫—Å–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                            break

                if len(participants) == 0:
                    print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
                    participants = [self.user['id']]  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                from datetime import datetime, timedelta
                now = datetime.now()
                start_time = now + timedelta(days=1, hours=10)
                end_time = start_time + timedelta(hours=1)

                event_data = {
                    "title": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                    "description": "–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–æ–º",
                    "start_date": start_time.isoformat(),
                    "end_date": end_time.isoformat(),
                    "event_type": "meeting",
                    "is_public": False,
                    "participants": participants
                }

                print(f"   –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...")

                response = await client.post(
                    f"{self.base_url}/api/events/",
                    json=event_data,
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=15.0
                )

                if response.status_code == 200:
                    event = response.json()
                    print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {event['title']}")
                    print(f"   ID: {event['id']}")
                    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.get('participants', []))}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            return False

    async def test_chat_rooms(self) -> bool:
        """–¢–µ—Å—Ç API —á–∞—Ç-–∫–æ–º–Ω–∞—Ç"""
        print("üí¨ –¢–µ—Å—Ç API —á–∞—Ç-–∫–æ–º–Ω–∞—Ç")

        if not self.token:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False

        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/chat/rooms/",
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=10.0
                )

                if response.status_code == 200:
                    rooms = response.json()
                    print(f"‚úÖ –ß–∞—Ç-–∫–æ–º–Ω–∞—Ç—ã: {len(rooms)} –∫–æ–º–Ω–∞—Ç")
                    if len(rooms) > 0:
                        print(f"   –ü–µ—Ä–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: {rooms[0]['name']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç-–∫–æ–º–Ω–∞—Ç: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç-–∫–æ–º–Ω–∞—Ç: {e}")
            return False

    async def test_bots_api(self) -> bool:
        """–¢–µ—Å—Ç API —á–∞—Ç-–±–æ—Ç–æ–≤"""
        print("ü§ñ –¢–µ—Å—Ç API —á–∞—Ç-–±–æ—Ç–æ–≤")

        if not self.token:
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False

        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/chat/bots/",
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=10.0
                )

                if response.status_code == 200:
                    bots = response.json()
                    print(f"‚úÖ –ß–∞—Ç-–±–æ—Ç—ã: {len(bots)} –±–æ—Ç–æ–≤")
                    if len(bots) > 0:
                        print(f"   –ü–µ—Ä–≤—ã–π –±–æ—Ç: {bots[0]['name']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç–æ–≤: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç-–±–æ—Ç–æ–≤: {e}")
            return False

    async def run_all_tests(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–õ–ê–¢–§–û–†–ú–´")
        print("=" * 60)

        results = {}

        # 1. –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API
        results['api_health'] = await self.test_api_health()

        # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        results['login'] = await self.login()

        if results['login']:
            # 3. –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            results['users_api'] = await self.test_users_api()

            # 4. –¢–µ—Å—Ç –æ—Ç–¥–µ–ª–æ–≤
            results['departments_api'] = await self.test_departments_api()

            # 5. –¢–µ—Å—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            results['employees_api'] = await self.test_employees_api()

            # 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            results['event_creation'] = await self.test_event_creation()

            # 7. –¢–µ—Å—Ç —á–∞—Ç-–∫–æ–º–Ω–∞—Ç
            results['chat_rooms'] = await self.test_chat_rooms()

            # 8. –¢–µ—Å—Ç –±–æ—Ç–æ–≤
            results['bots_api'] = await self.test_bots_api()
        else:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Å–º—ã—Å–ª–∞
            results['users_api'] = False
            results['departments_api'] = False
            results['employees_api'] = False
            results['event_creation'] = False
            results['chat_rooms'] = False
            results['bots_api'] = False

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)

        all_passed = True
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print("25")
            if not result:
                all_passed = False

        print("=" * 60)
        if all_passed:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–õ–ê–¢–§–û–†–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!")
        print("=" * 60)

        return results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys

    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost"

    print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞: {base_url}")

    tester = PlatformTester(base_url)
    results = await tester.run_all_tests()

    # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    failed_tests = [name for name, result in results.items() if not result]
    if failed_tests:
        print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: {', '.join(failed_tests)}")
        sys.exit(1)
    else:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(0)

if __name__ == "__main__":
    asyncio.run(main())
