#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Docker
# –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
info "1. –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps -a

echo ""

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
info "2. –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker-compose -f docker-compose.prod.yml logs --tail=50

echo ""

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
info "3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö:"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
if docker ps | grep -q "agb_backend_prod"; then
    info "Backend –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
    docker exec agb_backend_prod env | grep -E "(DATABASE_URL|SECRET_KEY|NEXT_PUBLIC_API_URL)" || echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
else
    warning "Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
if docker ps | grep -q "agb_frontend_prod"; then
    info "Frontend –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
    docker exec agb_frontend_prod env | grep -E "(NEXT_PUBLIC_API_URL|NODE_ENV)" || echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
else
    warning "Frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

echo ""

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª production.env
info "4. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ production.env:"
if [[ -f "production.env" ]]; then
    cat production.env | grep -E "(DATABASE_URL|NEXT_PUBLIC_API_URL|POSTGRES_PASSWORD)" || echo "–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
else
    error "–§–∞–π–ª production.env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

echo ""

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
info "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
if curl -f http://localhost:3000 >/dev/null 2>&1; then
    success "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"
else
    warning "‚ö†Ô∏è –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∫–µ–Ω–¥
if curl -f http://localhost:8000/api/health >/dev/null 2>&1; then
    success "‚úÖ –ë–µ–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000"
else
    warning "‚ö†Ô∏è –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Nginx
if curl -f http://localhost >/dev/null 2>&1; then
    success "‚úÖ Nginx –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 80"
else
    warning "‚ö†Ô∏è Nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 80"
fi

echo ""

# 6. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
info "6. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º:"
echo ""
echo "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo ""
echo "üîß Backend (FastAPI):"
echo "   docker exec -it agb_backend_prod /bin/bash"
echo "   docker exec -it agb_backend_prod /bin/sh"
echo ""
echo "üåê Frontend (Next.js):"
echo "   docker exec -it agb_frontend_prod /bin/sh"
echo ""
echo "üóÑÔ∏è PostgreSQL:"
echo "   docker exec -it agb_postgres_prod psql -U felix_prod_user -d agb_felix_prod"
echo ""
echo "üåç Nginx:"
echo "   docker exec -it agb_nginx_prod /bin/sh"
echo ""

# 7. –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
info "7. –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
echo ""
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:"
echo "   docker-compose -f docker-compose.prod.yml logs -f"
echo ""
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞:"
echo "   docker-compose -f docker-compose.prod.yml restart frontend"
echo "   docker-compose -f docker-compose.prod.yml restart backend"
echo ""
echo "üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:"
echo "   docker-compose -f docker-compose.prod.yml down"
echo "   docker-compose -f docker-compose.prod.yml up -d --build"
echo ""
echo "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ:"
echo "   df -h"
echo "   docker system df"
echo ""

success "üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
