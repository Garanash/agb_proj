#!/bin/bash

echo "üöÄ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï AGB PROJECT –ß–ï–†–ï–ó GIT"
echo "====================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if [ "$EUID" -eq 0 ]; then
    echo "‚ùå –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root!"
    echo "   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ sudo"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Git
if ! command -v git &> /dev/null; then
    echo "‚ùå Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git: sudo apt install git (Ubuntu) –∏–ª–∏ sudo yum install git (CentOS)"
    exit 1
fi

echo "‚úÖ Git –¥–æ—Å—Ç—É–ø–µ–Ω: $(git --version)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if ! command -v docker &> /dev/null; then
    echo ""
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux"
        exit 1
    fi
    
    case $OS in
        ubuntu|debian)
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –¥–ª—è Ubuntu/Debian..."
            sudo apt update
            sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        centos|rhel|fedora)
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –¥–ª—è CentOS/RHEL/Fedora..."
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        *)
            echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $OS"
            echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/engine/install/"
            exit 1
            ;;
    esac
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Docker
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    sudo usermod -aG docker $USER
    
    echo "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "‚ö†Ô∏è –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ Docker"
    echo "   –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    exit 0
fi

echo "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ Docker
if ! docker ps &> /dev/null; then
    echo ""
    echo "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ Docker!"
    echo "   –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker..."
    sudo usermod -aG docker $USER
    echo "‚ö†Ô∏è –ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ Docker"
    echo "   –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    exit 0
fi

echo "‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
if [ -d "agb_proj" ]; then
    echo ""
    echo "üìÅ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π agb_proj"
    echo "   –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º..."
    cd agb_proj
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if [ -n "$(git status --porcelain)" ]; then
        echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ stash..."
        git stash push -m "Auto-stash before update $(date)"
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    git fetch origin
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é
    if [ "$1" = "latest" ] || [ -z "$1" ]; then
        echo "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é..."
        git checkout master
        git pull origin master
    else
        echo "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Å–∏—é $1..."
        git checkout "$1"
    fi
else
    echo ""
    echo "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    REPO_URL="https://github.com/Garanash/agb_proj.git"
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    git clone "$REPO_URL"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
        cd agb_proj
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é
        if [ "$1" = "latest" ] || [ -z "$1" ]; then
            echo "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é..."
            git checkout master
        else
            echo "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Å–∏—é $1..."
            git checkout "$1"
        fi
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
REQUIRED_FILES=(
    "database_backup_full.sql"
    "config/docker/docker-compose.prod.yml"
    "config/env/production.env"
    "backend/"
    "frontend/"
)

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."
for file in "${REQUIRED_FILES[@]}"; do
    if [ -e "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file - –ù–ï –ù–ê–ô–î–ï–ù!"
        echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        exit 1
    fi
done

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env down 2>/dev/null || true

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ volumes (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
echo ""
echo "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
docker volume prune -f

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ PostgreSQL
echo ""
echo "üêò –ó–∞–ø—É—Å–∫ PostgreSQL..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env up -d postgres

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL..."
if ! docker ps | grep -q "agb_postgres_prod"; then
    echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs agb_postgres_prod"
    exit 1
fi

echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω"

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo ""
echo "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞..."
docker exec -i agb_postgres_prod psql -U agb_user -d postgres < database_backup_full.sql

if [ $? -eq 0 ]; then
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ PostgreSQL: docker logs agb_postgres_prod"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
TABLES_COUNT=$(docker exec agb_postgres_prod psql -U agb_user -d agb_prod -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')

if [ "$TABLES_COUNT" -gt 0 ]; then
    echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ $TABLES_COUNT —Ç–∞–±–ª–∏—Ü"
else
    echo "‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
echo ""
echo "üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
USERS_COUNT=$(docker exec agb_postgres_prod psql -U agb_user -d agb_prod -t -c "SELECT COUNT(*) FROM users;" | tr -d ' ')

if [ "$USERS_COUNT" -gt 0 ]; then
    echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ $USERS_COUNT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
else
    echo "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
echo ""
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks..."
for service in postgres redis backend frontend nginx; do
    container_name="agb_${service}_prod"
    if docker ps | grep -q "$container_name"; then
        health=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "no-health-check")
        echo "  $service: $health"
    else
        echo "  $service: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
done

# –¢–µ—Å—Ç–∏—Ä—É–µ–º API
echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
sleep 10

# –ü–æ–ª—É—á–∞–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s ifconfig.me || echo "localhost")
echo "üåê IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
echo ""
echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check..."
HEALTH_RESPONSE=$(curl -s "http://$SERVER_IP:8000/api/health" || echo "error")

if [[ "$HEALTH_RESPONSE" == *"healthy"* ]]; then
    echo "‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "   –û—Ç–≤–µ—Ç: $HEALTH_RESPONSE"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º frontend
echo ""
echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend..."
FRONTEND_RESPONSE=$(curl -s -I "http://$SERVER_IP" | head -1 || echo "error")

if [[ "$FRONTEND_RESPONSE" == *"200"* ]] || [[ "$FRONTEND_RESPONSE" == *"HTTP"* ]]; then
    echo "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "   –û—Ç–≤–µ—Ç: $FRONTEND_RESPONSE"
fi

echo ""
echo "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ß–ï–†–ï–ó GIT –ó–ê–í–ï–†–®–ï–ù–û!"
echo ""
echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
echo "  - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/Garanash/agb_proj.git"
echo "  - –í–µ—Ä—Å–∏—è: $(git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD)"
echo "  - –¢–∞–±–ª–∏—Ü –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $TABLES_COUNT"
echo "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: $USERS_COUNT"
echo "  - –°–µ—Ä–≤–µ—Ä: $SERVER_IP"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
echo "  - Frontend: http://$SERVER_IP"
echo "  - Backend API: http://$SERVER_IP:8000"
echo "  - API Docs: http://$SERVER_IP:8000/docs"
echo ""
echo "üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
echo "  - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123"
echo "  - –ú–µ–Ω–µ–¥–∂–µ—Ä 1: manager1 / ManagerPass123!"
echo "  - –ú–µ–Ω–µ–¥–∂–µ—Ä 2: manager2 / ManagerPass123!"
echo "  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1: employee1 / EmployeePass123!"
echo "  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 2: employee2 / EmployeePass123!"
echo "  - –í–≠–î —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ved_passport1 / VedPass123!"
echo "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user1 / UserPass123!"
echo ""
echo "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env logs"
echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env restart"
echo "  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env down"
echo "  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞: git pull && docker-compose restart"
echo ""
echo "üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º:"
echo "  - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: cd agb_proj"
echo "  - –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥: git pull"
echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose restart"
