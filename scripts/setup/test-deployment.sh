#!/bin/bash
set -e

# üß™ AGB Project - –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
check_http() {
    local url=$1
    local name=$2
    local timeout=${3:-10}
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ $name: $url"
    
    if curl -s --max-time $timeout "$url" > /dev/null 2>&1; then
        log "‚úÖ $name: –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        error "‚ùå $name: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container() {
    local container_name=$1
    local service_name=$2
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_name"
    
    if docker ps --format "table {{.Names}}" | grep -q "^$container_name$"; then
        local status=$(docker inspect --format='{{.State.Status}}' "$container_name")
        if [ "$status" = "running" ]; then
            log "‚úÖ $service_name: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
            return 0
        else
            error "‚ùå $service_name: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: $status)"
            return 1
        fi
    else
        error "‚ùå $service_name: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    local container_name="agb_postgres_prod"
    local db_name="agb_felix_prod"
    local user="felix_prod_user"
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $db_name"
    
    if docker exec "$container_name" pg_isready -U "$user" -d "$db_name" > /dev/null 2>&1; then
        log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –¥–æ—Å—Ç—É–ø–Ω–∞"
        return 0
    else
        error "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
check_api() {
    local base_url="http://localhost:8000"
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    check_http "$base_url/api/health" "API Health" 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º info endpoint
    check_http "$base_url/api/info" "API Info" 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docs endpoint
    check_http "$base_url/docs" "API Documentation" 5
    
    log "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: —Ä–∞–±–æ—Ç–∞—é—Ç"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
check_frontend() {
    local base_url="http://localhost:3000"
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    check_http "$base_url" "Frontend" 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —á–µ—Ä–µ–∑ Nginx
    check_http "http://localhost/api/health" "Nginx API Proxy" 5
    
    log "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥: —Ä–∞–±–æ—Ç–∞–µ—Ç"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    local services=("agb_frontend_prod" "agb_backend_prod" "agb_nginx_prod" "agb_postgres_prod")
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏"
    
    for service in "${services[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "^$service$"; then
            local error_count=$(docker logs "$service" 2>&1 | grep -i "error\|exception\|fatal" | wc -l)
            if [ "$error_count" -gt 0 ]; then
                warn "‚ö†Ô∏è $service: –Ω–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
                docker logs "$service" 2>&1 | grep -i "error\|exception\|fatal" | tail -5
            else
                log "‚úÖ $service: –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            fi
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    local memory_usage=$(docker stats --no-stream --format "table {{.MemUsage}}" | grep -v "MEM USAGE" | head -4 | awk '{print $1}' | sed 's/MiB//' | awk '{sum+=$1} END {print sum}')
    
    if [ "$memory_usage" -lt 2000 ]; then
        log "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}MB (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
    else
        warn "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}MB (–≤—ã—Å–æ–∫–æ–µ)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API
    local response_time=$(curl -s -w "%{time_total}" -o /dev/null "http://localhost:8000/api/health")
    local response_ms=$(echo "$response_time * 1000" | bc)
    
    if (( $(echo "$response_time < 1.0" | bc -l) )); then
        log "‚úÖ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: ${response_ms}ms (–æ—Ç–ª–∏—á–Ω–æ)"
    elif (( $(echo "$response_time < 3.0" | bc -l) )); then
        log "‚úÖ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: ${response_ms}ms (—Ö–æ—Ä–æ—à–æ)"
    else
        warn "‚ö†Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: ${response_ms}ms (–º–µ–¥–ª–µ–Ω–Ω–æ)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
check_security() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ production –ø–∞—Ä–æ–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ dev
    if [ -f "config/env/.env" ]; then
        if grep -q "admin123\|test123\|password" config/env/.env; then
            warn "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –≤ .env —Ñ–∞–π–ª–µ"
        else
            log "‚úÖ –ü–∞—Ä–æ–ª–∏ –≤ .env —Ñ–∞–π–ª–µ –≤—ã–≥–ª—è–¥—è—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑–º–µ–Ω–µ–Ω
    if [ -f "config/env/production.env" ]; then
        if grep -q "your-super-secret-key-change-this-in-production" config/env/production.env; then
            warn "‚ö†Ô∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –≤ production.env"
        else
            log "‚úÖ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ production.env –∏–∑–º–µ–Ω–µ–Ω"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    local report_file="logs/deployment-test-$(date +%Y%m%d_%H%M%S).txt"
    
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: $report_file"
    
    mkdir -p logs
    
    {
        echo "==========================================="
        echo "AGB Project - –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
        echo "–î–∞—Ç–∞: $(date)"
        echo "==========================================="
        echo ""
        
        echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        
        echo "=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ==="
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
        echo ""
        
        echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ==="
        echo "Frontend: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)"
        echo "Backend API: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/health)"
        echo "Nginx: $(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/health)"
        echo ""
        
        echo "=== –õ–æ–≥–∏ —Å –æ—à–∏–±–∫–∞–º–∏ ==="
        for service in agb_frontend_prod agb_backend_prod agb_nginx_prod; do
            if docker ps --format "table {{.Names}}" | grep -q "^$service$"; then
                echo "--- $service ---"
                docker logs "$service" 2>&1 | grep -i "error\|exception\|fatal" | tail -3
                echo ""
            fi
        done
        
    } > "$report_file"
    
    log "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AGB Project"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! docker info > /dev/null 2>&1; then
        error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
    check_container "agb_postgres_prod" "PostgreSQL"
    check_container "agb_backend_prod" "Backend"
    check_container "agb_frontend_prod" "Frontend"
    check_container "agb_nginx_prod" "Nginx"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ==="
    check_database
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ API ==="
    check_api
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ==="
    check_frontend
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ ==="
    check_logs
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ==="
    check_performance
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    log "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ==="
    check_security
    echo ""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report
    
    log "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    log "üåê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost"
    log "üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
}

# –ó–∞–ø—É—Å–∫
main "$@"
