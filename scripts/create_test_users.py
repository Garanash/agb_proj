#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –≤—Å–µ–º–∏ —Ä–æ–ª—è–º–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ PYTHONPATH
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

from database import AsyncSessionLocal
from models import User, Department
from passlib.context import CryptContext
from sqlalchemy import text

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

async def create_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –≤—Å–µ–º–∏ —Ä–æ–ª—è–º–∏"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_users = [
        {
            "username": "admin",
            "email": "admin@almazgeobur.ru",
            "password": "AdminPass123!",
            "first_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "last_name": "–°–∏—Å—Ç–µ–º—ã",
            "role": "admin",
            "position": "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        },
        {
            "username": "manager1",
            "email": "manager1@almazgeobur.ru",
            "password": "ManagerPass123!",
            "first_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
            "last_name": "–ü–µ—Ç—Ä–æ–≤",
            "middle_name": "–ò–≤–∞–Ω–æ–≤–∏—á",
            "role": "manager",
            "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"
        },
        {
            "username": "employee1",
            "email": "employee1@almazgeobur.ru",
            "password": "EmployeePass123!",
            "first_name": "–ú–∞—Ä–∏—è",
            "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
            "middle_name": "–ü–µ—Ç—Ä–æ–≤–Ω–∞",
            "role": "employee",
            "position": "–ò–Ω–∂–µ–Ω–µ—Ä-—Ç–µ—Ö–Ω–æ–ª–æ–≥"
        },
        {
            "username": "ved_passport1",
            "email": "ved1@almazgeobur.ru",
            "password": "VedPass123!",
            "first_name": "–ï–ª–µ–Ω–∞",
            "last_name": "–ö–æ–∑–ª–æ–≤–∞",
            "middle_name": "–°–µ—Ä–≥–µ–µ–≤–Ω–∞",
            "role": "ved_passport",
            "position": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –í–≠–î"
        },
        {
            "username": "user1",
            "email": "user1@almazgeobur.ru",
            "password": "UserPass123!",
            "first_name": "–î–º–∏—Ç—Ä–∏–π",
            "last_name": "–í–æ–ª–∫–æ–≤",
            "middle_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
            "role": "user",
            "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∑–∞–∫—É–ø–∫–∞–º"
        },
        {
            "username": "manager2",
            "email": "manager2@almazgeobur.ru",
            "password": "ManagerPass123!",
            "first_name": "–û–ª—å–≥–∞",
            "last_name": "–ú–æ—Ä–æ–∑–æ–≤–∞",
            "middle_name": "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
            "role": "manager",
            "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É"
        },
        {
            "username": "employee2",
            "email": "employee2@almazgeobur.ru",
            "password": "EmployeePass123!",
            "first_name": "–ò–≥–æ—Ä—å",
            "last_name": "–ù–æ–≤–∏–∫–æ–≤",
            "middle_name": "–ü–µ—Ç—Ä–æ–≤–∏—á",
            "role": "employee",
            "position": "–¢–µ—Ö–Ω–∏–∫-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"
        }
    ]
    
    try:
        async with AsyncSessionLocal() as db:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—ã
            departments = [
                {"name": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂", "description": "–û—Ç–¥–µ–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–¥–∞–∂–∞–º"},
                {"name": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª", "description": "–û—Ç–¥–µ–ª –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"},
                {"name": "–û—Ç–¥–µ–ª –í–≠–î", "description": "–û—Ç–¥–µ–ª –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"},
                {"name": "–û—Ç–¥–µ–ª –∑–∞–∫—É–ø–æ–∫", "description": "–û—Ç–¥–µ–ª –ø–æ –∑–∞–∫—É–ø–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"},
                {"name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª", "description": "–û—Ç–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"}
            ]
            
            created_departments = []
            for dept_data in departments:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–¥–µ–ª
                result = await db.execute(
                    text("SELECT id FROM departments WHERE name = :name"),
                    {"name": dept_data["name"]}
                )
                existing = result.fetchone()
                
                if not existing:
                    dept = Department(
                        name=dept_data["name"],
                        description=dept_data["description"],
                        is_active=True,
                        sort_order=len(created_departments)
                    )
                    db.add(dept)
                    await db.flush()
                    created_departments.append(dept)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª: {dept.name}")
                else:
                    print(f"‚ÑπÔ∏è –û—Ç–¥–µ–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dept_data['name']}")
                    created_departments.append({"id": existing[0], "name": dept_data["name"]})
            
            await db.commit()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            created_users = []
            for i, user_data in enumerate(test_users):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                result = await db.execute(
                    text("SELECT id FROM users WHERE username = :username"),
                    {"username": user_data["username"]}
                )
                existing = result.fetchone()
                
                if not existing:
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ—Ç–¥–µ–ª (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
                    dept_id = created_departments[i % len(created_departments)].id if hasattr(created_departments[i % len(created_departments)], 'id') else created_departments[i % len(created_departments)]["id"]
                    
                    user = User(
                        username=user_data["username"],
                        email=user_data["email"],
                        hashed_password=get_password_hash(user_data["password"]),
                        first_name=user_data["first_name"],
                        last_name=user_data["last_name"],
                        middle_name=user_data.get("middle_name"),
                        role=user_data["role"],
                        position=user_data["position"],
                        department_id=dept_id,
                        is_active=True,
                        is_password_changed=True
                    )
                    
                    db.add(user)
                    await db.flush()
                    created_users.append(user)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} ({user.role})")
                else:
                    print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_data['username']}")
            
            await db.commit()
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {len(created_users)} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for user in created_users:
                print(f"  - {user.full_name} ({user.username}) - {user.role} - {user.position}")
            
            print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:")
            for dept in created_departments:
                dept_name = dept.name if hasattr(dept, 'name') else dept["name"]
                print(f"  - {dept_name}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()
        raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–¥–µ–ª–æ–≤...")
    
    try:
        await create_test_users()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
