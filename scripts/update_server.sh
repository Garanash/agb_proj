#!/bin/bash

echo "üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–î–ê –ù–ê –°–ï–†–í–ï–†–ï"
echo "============================"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if [ ! -f "config/docker/docker-compose.prod.yml" ]; then
    echo "‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
    echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å docker-compose.prod.yml"
    exit 1
fi

echo "‚úÖ –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Git
if ! command -v git &> /dev/null; then
    echo "‚ùå Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git: sudo apt install git (Ubuntu) –∏–ª–∏ sudo yum install git (CentOS)"
    exit 1
fi

echo "‚úÖ Git –¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
echo ""
echo "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Git:"
git status --porcelain

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
if [ -n "$(git status --porcelain)" ]; then
    echo ""
    echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
    echo "   –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ stash..."
    git stash push -m "Auto-stash before update $(date)"
    echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stash"
fi

# –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
echo ""
echo "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
git fetch origin

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
LOCAL=$(git rev-parse HEAD)
REMOTE=$(git rev-parse origin/master)

if [ "$LOCAL" = "$REMOTE" ]; then
    echo "‚úÖ –ö–æ–¥ —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç"
else
    echo "üîÑ –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º..."
    git pull origin master
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞!"
        echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: git status"
        exit 1
    fi
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env down

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
echo ""
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env build --no-cache

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
echo ""
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks..."
for service in postgres redis backend frontend nginx; do
    container_name="agb_${service}_prod"
    if docker ps | grep -q "$container_name"; then
        health=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "no-health-check")
        echo "  $service: $health"
    else
        echo "  $service: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
done

# –¢–µ—Å—Ç–∏—Ä—É–µ–º API
echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
sleep 10

SERVER_IP=$(curl -s ifconfig.me || echo "localhost")
echo "üåê IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
HEALTH_RESPONSE=$(curl -s "http://$SERVER_IP:8000/api/health" || echo "error")

if [[ "$HEALTH_RESPONSE" == *"healthy"* ]]; then
    echo "‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
else
    echo "‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    echo "   –û—Ç–≤–µ—Ç: $HEALTH_RESPONSE"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs agb_backend_prod"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º frontend
FRONTEND_RESPONSE=$(curl -s -I "http://$SERVER_IP" | head -1 || echo "error")

if [[ "$FRONTEND_RESPONSE" == *"200"* ]] || [[ "$FRONTEND_RESPONSE" == *"HTTP"* ]]; then
    echo "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
else
    echo "‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    echo "   –û—Ç–≤–µ—Ç: $FRONTEND_RESPONSE"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs agb_frontend_prod"
fi

echo ""
echo "üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo ""
echo "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
echo "  - –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
echo "  - –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
echo "  - –°–µ—Ä–≤–µ—Ä: $SERVER_IP"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
echo "  - Frontend: http://$SERVER_IP"
echo "  - Backend API: http://$SERVER_IP:8000"
echo "  - API Docs: http://$SERVER_IP:8000/docs"
echo ""
echo "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env logs"
echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env restart"
echo "  - –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: git reset --hard HEAD~1 && docker-compose restart"
echo ""
echo "üîç –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs CONTAINER_NAME"
echo "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: docker ps"
echo "  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose restart"
echo "  4. –û—Ç–∫–∞—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git reset --hard HEAD~1"
