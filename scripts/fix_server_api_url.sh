#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° API URL –ù–ê –°–ï–†–í–ï–†–ï"
echo "=========================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -eq 0 ]; then
    echo "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  $0 <server_ip> [username]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 89.23.99.86"
    echo "  $0 89.23.99.86 root"
    echo ""
    exit 1
fi

SERVER_IP=$1
USERNAME=${2:-root}
PROJECT_PATH="/root/agb_proj"

echo "üåê –°–µ—Ä–≤–µ—Ä: $SERVER_IP"
echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $USERNAME"
echo "üìÅ –ü—É—Ç—å: $PROJECT_PATH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes $USERNAME@$SERVER_IP "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'" 2>/dev/null; then
    echo "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    exit 1
fi

echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ"

# –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo ""
echo "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh $USERNAME@$SERVER_IP "cd $PROJECT_PATH && git pull origin master"

# –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
ssh $USERNAME@$SERVER_IP "cd $PROJECT_PATH && echo '=== production.env ===' && cat config/env/production.env | grep NEXT_PUBLIC && echo '' && echo '=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ===' && docker exec agb_frontend_prod env | grep NEXT_PUBLIC || echo '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ'"

# –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NEXT_PUBLIC_API_URL..."
CURRENT_API_URL=$(ssh $USERNAME@$SERVER_IP "grep 'NEXT_PUBLIC_API_URL' $PROJECT_PATH/config/env/production.env | cut -d'=' -f2")

if [ "$CURRENT_API_URL" != "http://$SERVER_IP/api" ]; then
    echo "‚ö†Ô∏è NEXT_PUBLIC_API_URL –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    echo "   –¢–µ–∫—É—â–∏–π: $CURRENT_API_URL"
    echo "   –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: http://$SERVER_IP/api"

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    ssh $USERNAME@$SERVER_IP "sed -i 's|NEXT_PUBLIC_API_URL=.*|NEXT_PUBLIC_API_URL=http://$SERVER_IP/api|' $PROJECT_PATH/config/env/production.env"

    echo "‚úÖ NEXT_PUBLIC_API_URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
else
    echo "‚úÖ NEXT_PUBLIC_API_URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: $CURRENT_API_URL"
fi

# –®–∞–≥ 4: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
echo ""
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
ssh $USERNAME@$SERVER_IP "cd $PROJECT_PATH && docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env restart frontend"

# –®–∞–≥ 5: –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ frontend (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
ssh $USERNAME@$SERVER_IP "cd $PROJECT_PATH && docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep frontend"

# –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
ssh $USERNAME@$SERVER_IP "cd $PROJECT_PATH && docker exec agb_frontend_prod env | grep NEXT_PUBLIC || echo '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'"

# –®–∞–≥ 8: –¢–µ—Å—Ç–∏—Ä—É–µ–º API
echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
HEALTH_RESPONSE=$(ssh $USERNAME@$SERVER_IP "curl -s http://$SERVER_IP:8000/api/health" || echo "error")

if [[ "$HEALTH_RESPONSE" == *"healthy"* ]]; then
    echo "‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "   –û—Ç–≤–µ—Ç: $HEALTH_RESPONSE"
fi

# –®–∞–≥ 9: –¢–µ—Å—Ç–∏—Ä—É–µ–º frontend
echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend..."
FRONTEND_RESPONSE=$(ssh $USERNAME@$SERVER_IP "curl -s -I http://$SERVER_IP | head -1" || echo "error")

if [[ "$FRONTEND_RESPONSE" == *"200"* ]] || [[ "$FRONTEND_RESPONSE" == *"HTTP"* ]]; then
    echo "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "   –û—Ç–≤–µ—Ç: $FRONTEND_RESPONSE"
fi

# –®–∞–≥ 10: –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
NEWS_RESPONSE=$(ssh $USERNAME@$SERVER_IP "curl -s http://$SERVER_IP:8000/api/v1/news/?limit=10" || echo "error")
EVENTS_RESPONSE=$(ssh $USERNAME@$SERVER_IP "curl -s http://$SERVER_IP:8000/api/v1/events/?start_date=2025-10-01&end_date=2025-10-31" || echo "error")

if [[ "$NEWS_RESPONSE" == *"404"* ]]; then
    echo "‚ùå API –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (404) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"
else
    echo "‚úÖ API –Ω–æ–≤–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
fi

if [[ "$EVENTS_RESPONSE" == *"404"* ]]; then
    echo "‚ùå API —Å–æ–±—ã—Ç–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (404) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"
else
    echo "‚úÖ API —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"
fi

echo ""
echo "üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
echo "  - Frontend: http://$SERVER_IP"
echo "  - Backend API: http://$SERVER_IP:8000"
echo ""
echo "üìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:"
echo "  1. –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–¥ frontend (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è getSimpleApiUrl)"
echo "  2. –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è NEXT_PUBLIC_API_URL"
echo "  3. –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
echo "  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
echo ""
echo "üîß –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs agb_frontend_prod"
echo "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: docker exec agb_frontend_prod env | grep NEXT_PUBLIC"
echo "  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose restart"
