#!/bin/bash

echo "üöÄ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –ù–ê –°–ï–†–í–ï–†–ï"
echo "========================================"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–º–ø–∞
if [ ! -f "database_backup_full.sql" ]; then
    echo "‚ùå –§–∞–π–ª database_backup_full.sql –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."
    exit 1
fi

echo "‚úÖ –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω: $(ls -lh database_backup_full.sql | awk '{print $5}')"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker)
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ!"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
    exit 1
fi

echo "‚úÖ Docker –Ω–∞–π–¥–µ–Ω: $(docker --version)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker Compose –∑–∞–ø—É—â–µ–Ω
if ! docker ps &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker: sudo systemctl start docker"
    exit 1
fi

echo "‚úÖ Docker –∑–∞–ø—É—â–µ–Ω"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env down

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ volumes (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
echo ""
echo "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
docker volume prune -f

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ PostgreSQL
echo ""
echo "üêò –ó–∞–ø—É—Å–∫ PostgreSQL..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env up -d postgres

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL..."
if ! docker ps | grep -q "agb_postgres_prod"; then
    echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs agb_postgres_prod"
    exit 1
fi

echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω"

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo ""
echo "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞..."
docker exec -i agb_postgres_prod psql -U agb_user -d postgres < database_backup_full.sql

if [ $? -eq 0 ]; then
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ PostgreSQL: docker logs agb_postgres_prod"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
TABLES_COUNT=$(docker exec agb_postgres_prod psql -U agb_user -d agb_prod -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')

if [ "$TABLES_COUNT" -gt 0 ]; then
    echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ $TABLES_COUNT —Ç–∞–±–ª–∏—Ü"
else
    echo "‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
echo ""
echo "üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
USERS_COUNT=$(docker exec agb_postgres_prod psql -U agb_user -d agb_prod -t -c "SELECT COUNT(*) FROM users;" | tr -d ' ')

if [ "$USERS_COUNT" -gt 0 ]; then
    echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ $USERS_COUNT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
else
    echo "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
echo ""
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks..."
for service in postgres redis backend frontend nginx; do
    container_name="agb_${service}_prod"
    if docker ps | grep -q "$container_name"; then
        health=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "no-health-check")
        echo "  $service: $health"
    else
        echo "  $service: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
done

# –¢–µ—Å—Ç–∏—Ä—É–µ–º API
echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
sleep 10

# –ü–æ–ª—É—á–∞–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s ifconfig.me || echo "localhost")
echo "üåê IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
echo ""
echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check..."
HEALTH_RESPONSE=$(curl -s "http://$SERVER_IP:8000/api/health" || echo "error")

if [[ "$HEALTH_RESPONSE" == *"healthy"* ]]; then
    echo "‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "   –û—Ç–≤–µ—Ç: $HEALTH_RESPONSE"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º frontend
echo ""
echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend..."
FRONTEND_RESPONSE=$(curl -s -I "http://$SERVER_IP" | head -1 || echo "error")

if [[ "$FRONTEND_RESPONSE" == *"200"* ]] || [[ "$FRONTEND_RESPONSE" == *"HTTP"* ]]; then
    echo "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "   –û—Ç–≤–µ—Ç: $FRONTEND_RESPONSE"
fi

echo ""
echo "üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo ""
echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:"
echo "  - –¢–∞–±–ª–∏—Ü –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $TABLES_COUNT"
echo "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: $USERS_COUNT"
echo "  - –°–µ—Ä–≤–µ—Ä: $SERVER_IP"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
echo "  - Frontend: http://$SERVER_IP"
echo "  - Backend API: http://$SERVER_IP:8000"
echo "  - API Docs: http://$SERVER_IP:8000/docs"
echo ""
echo "üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
echo "  - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123"
echo "  - –ú–µ–Ω–µ–¥–∂–µ—Ä 1: manager1 / ManagerPass123!"
echo "  - –ú–µ–Ω–µ–¥–∂–µ—Ä 2: manager2 / ManagerPass123!"
echo "  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1: employee1 / EmployeePass123!"
echo "  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 2: employee2 / EmployeePass123!"
echo "  - –í–≠–î —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ved_passport1 / VedPass123!"
echo "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user1 / UserPass123!"
echo ""
echo "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env logs"
echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env restart"
echo "  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f config/docker/docker-compose.prod.yml --env-file config/env/production.env down"
