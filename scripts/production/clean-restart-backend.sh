#!/bin/bash

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ backend –±–µ–∑ pandas
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./clean-restart-backend.sh

set -e

echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ backend"
echo "====================================="

# –ü–æ–ª—É—á–∞–µ–º IPv4 IP —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s -4 ifconfig.me || curl -s -4 ipinfo.io/ip || curl -s -4 icanhazip.com || echo "localhost")
echo "üåê IPv4 IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

echo ""
echo "üìã –®–∞–≥ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
echo "--------------------------------"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8000
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8000..."
lsof -ti :8000 | xargs kill -9 2>/dev/null || echo "   –ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 3000
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 3000..."
lsof -ti :3000 | xargs kill -9 2>/dev/null || echo "   –ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω"

echo ""
echo "üìã –®–∞–≥ 2: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ backend"
echo "-------------------------------"

cd backend

# –£–¥–∞–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if [ -d "venv" ]; then
    echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    rm -rf venv
fi

# –£–¥–∞–ª—è–µ–º –∫—ç—à Python
echo "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Python..."
find . -name "*.pyc" -delete
find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏
echo "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤..."
rm -f ../backend.log
rm -f *.log

echo ""
echo "üìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo "-----------------------------------------------"

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
echo "üêç –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3 -m venv venv

echo ""
echo "üìã –®–∞–≥ 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
echo "------------------------------------------------"

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
echo "üì¶ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
source venv/bin/activate

# –û–±–Ω–æ–≤–ª—è–µ–º pip
echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
venv/bin/pip install --upgrade pip

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setuptools –∏ wheel
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ setuptools –∏ wheel..."
venv/bin/pip install setuptools wheel

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ë–ï–ó pandas
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
venv/bin/pip install fastapi==0.104.1 uvicorn[standard]==0.24.0

echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ë–î..."
venv/bin/pip install sqlalchemy==2.0.23 asyncpg==0.29.0 psycopg2-binary==2.9.9 alembic==1.12.1

echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
venv/bin/pip install pydantic[email]==2.5.0 python-multipart==0.0.6 python-jose[cryptography]==3.3.0 passlib[bcrypt]==1.7.4 bcrypt==4.0.1

echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
venv/bin/pip install python-dotenv==1.0.0 fastapi-users==12.1.2 aiohttp==3.9.5 httpx==0.25.2 requests==2.31.0

echo ""
echo "üìã –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è pandas"
echo "------------------------------------"

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è pandas
echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è pandas..."
cat > pandas_stub.py << 'EOF'
"""
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è pandas - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ pandas
"""
import json
import csv
import io
from typing import Any, Dict, List, Optional, Union

class DataFrame:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è pandas.DataFrame"""
    
    def __init__(self, data=None, columns=None):
        self.data = data or []
        self.columns = columns or []
        if isinstance(data, list) and len(data) > 0:
            if isinstance(data[0], dict):
                self.columns = list(data[0].keys())
                self.data = [list(row.values()) for row in data]
            elif isinstance(data[0], list):
                self.data = data
        elif isinstance(data, dict):
            self.columns = list(data.keys())
            self.data = list(zip(*data.values()))
    
    def to_dict(self, orient='records'):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ —Å–ª–æ–≤–∞—Ä—å"""
        if orient == 'records':
            return [dict(zip(self.columns, row)) for row in self.data]
        elif orient == 'dict':
            return dict(zip(self.columns, zip(*self.data)))
        return {}
    
    def to_json(self, orient='records'):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ JSON"""
        return json.dumps(self.to_dict(orient))
    
    def to_csv(self, path_or_buf=None, index=False):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ CSV"""
        output = io.StringIO() if path_or_buf is None else path_or_buf
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if self.columns:
            output.write(','.join(self.columns) + '\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in self.data:
            output.write(','.join(str(cell) for cell in row) + '\n')
        
        if path_or_buf is None:
            return output.getvalue()
    
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, key):
        if isinstance(key, str):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
            if key in self.columns:
                col_index = self.columns.index(key)
                return [row[col_index] for row in self.data]
        return None
    
    def __setitem__(self, key, value):
        if isinstance(key, str):
            if key in self.columns:
                col_index = self.columns.index(key)
                for i, val in enumerate(value):
                    if i < len(self.data):
                        self.data[i][col_index] = val
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                self.columns.append(key)
                for i, val in enumerate(value):
                    if i < len(self.data):
                        self.data[i].append(val)
                    else:
                        self.data.append([None] * (len(self.columns) - 1) + [val])
    
    def dropna(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        filtered_data = []
        for row in self.data:
            if all(cell is not None and cell != '' for cell in row):
                filtered_data.append(row)
        return DataFrame(filtered_data, self.columns)
    
    def fillna(self, value):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        filled_data = []
        for row in self.data:
            filled_row = [cell if cell is not None and cell != '' else value for cell in row]
            filled_data.append(filled_row)
        return DataFrame(filled_data, self.columns)

def read_csv(file_path_or_buffer, **kwargs):
    """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame"""
    if hasattr(file_path_or_buffer, 'read'):
        # –≠—Ç–æ —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        content = file_path_or_buffer.read()
        if isinstance(content, bytes):
            content = content.decode('utf-8')
    else:
        # –≠—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        with open(file_path_or_buffer, 'r', encoding='utf-8') as f:
            content = f.read()
    
    # –ü–∞—Ä—Å–∏–º CSV
    reader = csv.reader(io.StringIO(content))
    rows = list(reader)
    
    if not rows:
        return DataFrame()
    
    columns = rows[0]
    data = rows[1:]
    
    return DataFrame(data, columns)

def read_excel(file_path_or_buffer, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è read_excel - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π DataFrame"""
    print("‚ö†Ô∏è read_excel –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –∑–∞–≥–ª—É—à–∫–µ pandas")
    return DataFrame()

def concat(dataframes, **kwargs):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ DataFrame"""
    if not dataframes:
        return DataFrame()
    
    result_data = []
    result_columns = dataframes[0].columns
    
    for df in dataframes:
        result_data.extend(df.data)
    
    return DataFrame(result_data, result_columns)

# –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º
pd = type('pandas', (), {
    'DataFrame': DataFrame,
    'read_csv': read_csv,
    'read_excel': read_excel,
    'concat': concat,
})()
EOF

echo "‚úÖ –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è pandas —Å–æ–∑–¥–∞–Ω—ã"

echo ""
echo "üìã –®–∞–≥ 6: –ó–∞–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ pandas"
echo "-------------------------------"

# –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã pandas –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
echo "üîÑ –ó–∞–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ pandas..."
for file in api/v1/endpoints/*.py; do
    if [ -f "$file" ] && grep -q "import pandas" "$file"; then
        echo "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: $file"
        cp "$file" "$file.backup"
        sed -i 's/import pandas as pd/from pandas_stub import pd/' "$file"
        echo "‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–º–µ–Ω–µ–Ω –≤ $file"
    fi
done

echo ""
echo "üìã –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
echo "-------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
venv/bin/python -c "import fastapi; print('fastapi:', fastapi.__version__)"
venv/bin/python -c "import uvicorn; print('uvicorn:', uvicorn.__version__)"
venv/bin/python -c "from pandas_stub import pd; print('pandas_stub: OK')"

echo ""
echo "üìã –®–∞–≥ 8: –ó–∞–ø—É—Å–∫ backend"
echo "---------------------"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üîß –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ -f "../.env.production" ]; then
    set -a
    source ../.env.production
    set +a
    echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
else
    echo "‚ö†Ô∏è –§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º backend
echo "üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞..."
echo "   –ü–æ—Ä—Ç: 8000"
echo "   –õ–æ–≥–∏: ../backend.log"
echo "   Python: venv/bin/python"
echo "   Uvicorn: venv/bin/uvicorn"

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
nohup bash -c "source venv/bin/activate && venv/bin/python -m uvicorn main:app --host 0.0.0.0 --port 8000" > ../backend.log 2>&1 &

BACKEND_PID=$!
echo "üìã Backend –∑–∞–ø—É—â–µ–Ω —Å PID: $BACKEND_PID"

echo ""
echo "üìã –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞"
echo "-------------------------"

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend..."
if curl -s --connect-timeout 10 "http://$SERVER_IP:8000/api/v1/health" > /dev/null; then
    echo "‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://$SERVER_IP:8000"
    echo "‚úÖ Swagger –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://$SERVER_IP:8000/docs"
else
    echo "‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
    if [ -f "../backend.log" ]; then
        echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ backend:"
        tail -10 ../backend.log
    fi
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend"
    exit 1
fi

echo ""
echo "üéâ Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –±–µ–∑ pandas!"
echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:"
echo "1. Backend API: http://$SERVER_IP:8000/api/v1/health"
echo "2. Swagger UI: http://$SERVER_IP:8000/docs"
echo "3. –õ–æ–≥–∏ backend: tail -f ../backend.log"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:"
echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: cd ../frontend && npm start"
