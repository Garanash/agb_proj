#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./fix-all-issues.sh

set -e

echo "üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º"
echo "=========================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f ".env.production" ]; then
    echo "‚ùå –§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./create-env.sh"
    exit 1
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export $(cat .env.production | grep -v '^#' | xargs)

echo "üõë –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.production.yml down

echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -f
docker network prune -f
docker volume prune -f

echo "üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ —Ö–æ—Å—Ç–∞..."
# –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞
HOST_IP=$(ip route | grep default | awk '{print $3}' | head -1)
if [ -z "$HOST_IP" ]; then
    HOST_IP=$(hostname -I | awk '{print $1}')
fi
if [ -z "$HOST_IP" ]; then
    HOST_IP="172.17.0.1"
fi
echo "   –ò—Å–ø–æ–ª—å–∑—É–µ–º IP: $HOST_IP"

echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."
# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º IP
cat > infrastructure/nginx/nginx.conf << EOF
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone \$binary_remote_addr zone=login:10m rate=5r/m;

    upstream backend {
        server $HOST_IP:8000;
        keepalive 32;
    }

    upstream frontend {
        server $HOST_IP:3000;
        keepalive 32;
    }

    upstream n8n {
        server n8n:5678;
        keepalive 32;
    }

    server {
        listen 80;
        server_name _;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_cache_bypass \$http_upgrade;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        location /n8n/ {
            proxy_pass http://n8n/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_cache_bypass \$http_upgrade;
        }

        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_cache_bypass \$http_upgrade;
        }

        location /health {
            access_log off;
            return 200 "healthy\\n";
            add_header Content-Type text/plain;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}
EOF

echo "üåê –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.production.yml up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.production.yml ps

echo "üóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
if docker exec agb_postgres pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; then
    echo "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo "üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
sleep 5
if docker exec agb_redis redis-cli -a "$REDIS_PASSWORD" ping 2>/dev/null | grep -q "PONG"; then
    echo "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ö†Ô∏è  Redis —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è"
    docker exec agb_redis redis-cli CONFIG SET requirepass "$REDIS_PASSWORD" 2>/dev/null || true
    if docker exec agb_redis redis-cli -a "$REDIS_PASSWORD" ping 2>/dev/null | grep -q "PONG"; then
        echo "‚úÖ Redis –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ùå Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
fi

echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ N8N..."
N8N_COUNT=0
while [ $N8N_COUNT -lt 30 ]; do
    if curl -f http://localhost:5678/healthz 2>/dev/null; then
        echo "‚úÖ N8N —Ä–∞–±–æ—Ç–∞–µ—Ç"
        break
    fi
    echo "   –û–∂–∏–¥–∞–Ω–∏–µ N8N... ($N8N_COUNT/30)"
    sleep 2
    N8N_COUNT=$((N8N_COUNT + 1))
done

if [ $N8N_COUNT -eq 30 ]; then
    echo "‚ö†Ô∏è  N8N –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
fi

echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx..."
sleep 5
if curl -f http://localhost/health 2>/dev/null; then
    echo "‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Nginx –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "üìã –õ–æ–≥–∏ Nginx:"
    docker-compose -f docker-compose.production.yml logs --tail=10 nginx
fi

echo ""
echo "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: ./scripts/production/start-backend.sh"
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: ./scripts/production/start-frontend.sh"
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: curl http://localhost/health"
