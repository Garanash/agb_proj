#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./check-services-status.sh

set -e

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "============================"

# –ü–æ–ª—É—á–∞–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip || echo "localhost")
echo "üåê IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "----------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
if command -v docker &> /dev/null; then
    echo "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep agb || echo "   –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö AGB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
else
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
echo "------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
check_port() {
    local port=$1
    local service=$2
    if netstat -tuln | grep -q ":$port "; then
        echo "‚úÖ –ü–æ—Ä—Ç $port ($service) - –æ—Ç–∫—Ä—ã—Ç"
    else
        echo "‚ùå –ü–æ—Ä—Ç $port ($service) - –∑–∞–∫—Ä—ã—Ç"
    fi
}

check_port 3000 "Frontend"
check_port 8000 "Backend API"
check_port 5432 "PostgreSQL"
check_port 6379 "Redis"
check_port 5678 "N8N"

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "-------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
check_http() {
    local url=$1
    local service=$2
    if curl -s --connect-timeout 5 "$url" > /dev/null; then
        echo "‚úÖ $service ($url) - –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        echo "‚ùå $service ($url) - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

check_http "http://$SERVER_IP:3000" "Frontend"
check_http "http://$SERVER_IP:8000/api/v1/health" "Backend API"
check_http "http://$SERVER_IP:8000/docs" "Swagger"

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
echo "-------------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f ".env.production" ]; then
    echo "‚úÖ .env.production –Ω–∞–π–¥–µ–Ω"
    if grep -q "NEXT_PUBLIC_API_URL" .env.production; then
        API_URL=$(grep "NEXT_PUBLIC_API_URL" .env.production | cut -d'=' -f2)
        echo "üìã NEXT_PUBLIC_API_URL: $API_URL"
    else
        echo "‚ùå NEXT_PUBLIC_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env.production"
    fi
else
    echo "‚ùå .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""
echo "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
echo "---------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
if ! curl -s --connect-timeout 5 "http://$SERVER_IP:8000/api/v1/health" > /dev/null; then
    echo "üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: ./scripts/production/start-backend.sh"
fi

if ! curl -s --connect-timeout 5 "http://$SERVER_IP:3000" > /dev/null; then
    echo "üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: ./scripts/production/quick-fix-cors.sh"
fi

if ! grep -q "NEXT_PUBLIC_API_URL" .env.production 2>/dev/null; then
    echo "üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ CORS: ./scripts/production/deploy-with-cors-fix.sh"
fi

echo ""
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
