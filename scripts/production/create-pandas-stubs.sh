#!/bin/bash

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è pandas –≤ backend
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create-pandas-stubs.sh

set -e

echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è pandas –≤ backend"
echo "========================================"

cd backend

echo "üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ pandas_stub.py..."

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è pandas
cat > pandas_stub.py << 'EOF'
"""
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è pandas - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ pandas
"""
import json
import csv
import io
from typing import Any, Dict, List, Optional, Union

class DataFrame:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è pandas.DataFrame"""
    
    def __init__(self, data=None, columns=None):
        self.data = data or []
        self.columns = columns or []
        if isinstance(data, list) and len(data) > 0:
            if isinstance(data[0], dict):
                self.columns = list(data[0].keys())
                self.data = [list(row.values()) for row in data]
            elif isinstance(data[0], list):
                self.data = data
        elif isinstance(data, dict):
            self.columns = list(data.keys())
            self.data = list(zip(*data.values()))
    
    def to_dict(self, orient='records'):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ —Å–ª–æ–≤–∞—Ä—å"""
        if orient == 'records':
            return [dict(zip(self.columns, row)) for row in self.data]
        elif orient == 'dict':
            return dict(zip(self.columns, zip(*self.data)))
        return {}
    
    def to_json(self, orient='records'):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ JSON"""
        return json.dumps(self.to_dict(orient))
    
    def to_csv(self, path_or_buf=None, index=False):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ CSV"""
        output = io.StringIO() if path_or_buf is None else path_or_buf
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if self.columns:
            output.write(','.join(self.columns) + '\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in self.data:
            output.write(','.join(str(cell) for cell in row) + '\n')
        
        if path_or_buf is None:
            return output.getvalue()
    
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, key):
        if isinstance(key, str):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
            if key in self.columns:
                col_index = self.columns.index(key)
                return [row[col_index] for row in self.data]
        return None
    
    def __setitem__(self, key, value):
        if isinstance(key, str):
            if key in self.columns:
                col_index = self.columns.index(key)
                for i, val in enumerate(value):
                    if i < len(self.data):
                        self.data[i][col_index] = val
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                self.columns.append(key)
                for i, val in enumerate(value):
                    if i < len(self.data):
                        self.data[i].append(val)
                    else:
                        self.data.append([None] * (len(self.columns) - 1) + [val])
    
    def dropna(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        filtered_data = []
        for row in self.data:
            if all(cell is not None and cell != '' for cell in row):
                filtered_data.append(row)
        return DataFrame(filtered_data, self.columns)
    
    def fillna(self, value):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        filled_data = []
        for row in self.data:
            filled_row = [cell if cell is not None and cell != '' else value for cell in row]
            filled_data.append(filled_row)
        return DataFrame(filled_data, self.columns)

def read_csv(file_path_or_buffer, **kwargs):
    """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame"""
    if hasattr(file_path_or_buffer, 'read'):
        # –≠—Ç–æ —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        content = file_path_or_buffer.read()
        if isinstance(content, bytes):
            content = content.decode('utf-8')
    else:
        # –≠—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        with open(file_path_or_buffer, 'r', encoding='utf-8') as f:
            content = f.read()
    
    # –ü–∞—Ä—Å–∏–º CSV
    reader = csv.reader(io.StringIO(content))
    rows = list(reader)
    
    if not rows:
        return DataFrame()
    
    columns = rows[0]
    data = rows[1:]
    
    return DataFrame(data, columns)

def read_excel(file_path_or_buffer, **kwargs):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è read_excel - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π DataFrame"""
    print("‚ö†Ô∏è read_excel –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –∑–∞–≥–ª—É—à–∫–µ pandas")
    return DataFrame()

def concat(dataframes, **kwargs):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ DataFrame"""
    if not dataframes:
        return DataFrame()
    
    result_data = []
    result_columns = dataframes[0].columns
    
    for df in dataframes:
        result_data.extend(df.data)
    
    return DataFrame(result_data, result_columns)

# –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º
pd = type('pandas', (), {
    'DataFrame': DataFrame,
    'read_csv': read_csv,
    'read_excel': read_excel,
    'concat': concat,
})()
EOF

echo "‚úÖ –§–∞–π–ª pandas_stub.py —Å–æ–∑–¥–∞–Ω"

echo ""
echo "üìã –ó–∞–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ pandas –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏..."

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
for file in api/v1/endpoints/*.py; do
    if grep -q "import pandas" "$file"; then
        echo "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: $file"
        cp "$file" "$file.backup"
        sed -i 's/import pandas as pd/from pandas_stub import pd/' "$file"
        echo "‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–º–µ–Ω–µ–Ω –≤ $file"
    fi
done

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤..."
if grep -r "import pandas" api/v1/endpoints/; then
    echo "‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∏–º–ø–æ—Ä—Ç—ã pandas"
else
    echo "‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã pandas –∑–∞–º–µ–Ω–µ–Ω—ã"
fi

echo ""
echo "üéâ –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è pandas —Å–æ–∑–¥–∞–Ω—ã!"
echo ""
echo "üìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:"
echo "1. –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª pandas_stub.py —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π pandas"
echo "2. –ó–∞–º–µ–Ω–µ–Ω—ã –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã 'import pandas as pd' –Ω–∞ 'from pandas_stub import pd'"
echo "3. –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
echo ""
echo "üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å backend –±–µ–∑ pandas:"
echo "./scripts/production/minimal-backend.sh"
