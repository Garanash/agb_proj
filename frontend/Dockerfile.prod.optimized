# Оптимизированный Dockerfile для фронтенда
# Использует multi-stage build для минимизации размера образа

# Базовый образ Node.js
FROM node:18-alpine AS base

# Устанавливаем зависимости только для сборки
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Копируем только файлы зависимостей
COPY package.json package-lock.json* ./
RUN npm ci --only=production --frozen-lockfile

# Стадия сборки
FROM base AS builder
WORKDIR /app

# Копируем зависимости из предыдущей стадии
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Отключаем телеметрию Next.js
ENV NEXT_TELEMETRY_DISABLED 1

# Собираем приложение
RUN npm run build

# Финальная стадия - минимальный образ
FROM base AS runner
WORKDIR /app

# Устанавливаем переменные окружения
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Создаем пользователя для безопасности
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Копируем только необходимые файлы
COPY --from=builder /app/public ./public

# Копируем standalone файлы
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Переключаемся на пользователя nextjs
USER nextjs

# Открываем порт
EXPOSE 3000

# Устанавливаем переменные для Next.js
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Добавляем healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Запускаем приложение
CMD ["node", "server.js"]