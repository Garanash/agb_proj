'use client'

import React, { useState, useEffect } from 'react'
import { getApiUrl } from '@/utils/api';
import moment from 'moment'
import axios from 'axios'
import { formatApiError } from '@/utils/errorHandler'
import Modal from './Modal'
import { useAuth } from './AuthContext'

interface User {
  id: number
  username: string
  first_name: string
  last_name: string
  department_id: number | null
}

interface AddEventModalProps {
  isOpen: boolean
  onClose: () => void
  selectedDate: moment.Moment | null
  onEventAdded: () => void
  initialEventType?: 'meeting' | 'call' | 'briefing' | 'conference' | 'other'
}

const AddEventModal: React.FC<AddEventModalProps> = ({ 
  isOpen, 
  onClose, 
  selectedDate, 
  onEventAdded,
  initialEventType = 'meeting'
}) => {
  const { user } = useAuth()
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    start_time: '09:00',
    end_time: '10:00',
    event_type: initialEventType,
    is_public: false,
    participants: [] as number[]
  })
  
  const [users, setUsers] = useState<User[]>([])
  const [departments, setDepartments] = useState<{[key: number]: string}>({})
  const [isLoadingUsers, setIsLoadingUsers] = useState(false)
  
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')

  console.log('AddEventModal rendered:', { isOpen, selectedDate: !!selectedDate, initialEventType })



  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–¥–µ–ª–æ–≤
  useEffect(() => {
    const fetchUsers = async () => {
      setIsLoadingUsers(true)
      try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–¥–µ–ª—ã...')
        const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost';
        const [usersResponse, departmentsResponse] = await Promise.all([
          axios.get(`${apiUrl}/api/users/chat-users/`),
          axios.get(`${apiUrl}/api/departments/list`)
        ])
        
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.data.length)
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤:', departmentsResponse.data.length)
        
        setUsers(usersResponse.data)
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (user) {
          setFormData(prev => ({
            ...prev,
            participants: [user.id]
          }))
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ—Ç–¥–µ–ª–æ–≤
        const deptMap: {[key: number]: string} = {}
        departmentsResponse.data.forEach((dept: any) => {
          deptMap[dept.id] = dept.name
        })
        setDepartments(deptMap)
        
        console.log('–°–ª–æ–≤–∞—Ä—å –æ—Ç–¥–µ–ª–æ–≤:', deptMap)
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (error.response) {
          console.error('–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response.status)
          console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data)
        }
      } finally {
        setIsLoadingUsers(false)
      }
    }

    if (isOpen) {
      fetchUsers()
    }
  }, [isOpen])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target
    if (name === 'participants') {
      const selectedOptions = Array.from((e.target as HTMLSelectElement).selectedOptions)
      const selectedIds = selectedOptions.map(option => parseInt(option.value))
      setFormData(prev => ({
        ...prev,
        participants: selectedIds
      }))
    } else if (name === 'event_type') {
      setFormData(prev => ({
        ...prev,
        event_type: value as 'meeting' | 'call' | 'briefing' | 'conference' | 'other'
      }))
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }))
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!selectedDate) return

    setIsLoading(true)
    setError('')

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è —Å —è–≤–Ω—ã–º UTC timezone
      const startDateTime = moment(selectedDate)
        .hour(parseInt(formData.start_time.split(':')[0]))
        .minute(parseInt(formData.start_time.split(':')[1]))
        .utc()
        .toISOString()

      const endDateTime = moment(selectedDate)
        .hour(parseInt(formData.end_time.split(':')[0]))
        .minute(parseInt(formData.end_time.split(':')[1]))
        .utc()
        .toISOString()

      const eventData = {
        title: formData.title,
        description: formData.description || null,
        start_date: startDateTime,
        end_date: endDateTime,
        event_type: formData.event_type,
        is_public: formData.is_public,
        participants: formData.participants
      }

      await axios.post(`${getApiUrl()}/api/events/`, eventData)
      
      onEventAdded()
      onClose()
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setFormData({
        title: '',
        description: '',
        start_time: '09:00',
        end_time: '10:00',
        event_type: initialEventType,
        is_public: false,
        participants: []
      })
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error)
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è'
      
      if (error.response) {
        // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (error.response.data && error.response.data.detail) {
          errorMessage = error.response.data.detail
        } else if (error.response.status === 400) {
          errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è'
        } else if (error.response.status === 401) {
          errorMessage = '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        } else if (error.response.status === 403) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è'
        } else if (error.response.status === 500) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è'
        }
      } else if (error.request) {
        // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
        errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
      } else {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        errorMessage = error.message || errorMessage
      }
      
      setError(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }

  const getEventTypeLabel = (type: string) => {
    switch (type) {
      case 'meeting':
        return '–í—Å—Ç—Ä–µ—á–∞'
      case 'call':
        return '–°–æ–∑–≤–æ–Ω'
      case 'briefing':
        return '–ü–ª–∞–Ω–µ—Ä–∫–∞'
      case 'conference':
        return '–°–æ–≤–µ—â–∞–Ω–∏–µ'
      case 'other':
        return '–î—Ä—É–≥–æ–µ'
      default:
        return type
    }
  }

  if (!isOpen || !selectedDate) return null

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" maxWidth="2xl">
      <div className="p-6">
        <p className="text-sm text-gray-600 mb-6">
          {selectedDate.format('DD MMMM YYYY, dddd')}
        </p>

        <form onSubmit={handleSubmit}>
          {error && (
            <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
              {error}
            </div>
          )}

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *
              </label>
              <input
                type="text"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
              </label>
              <select
                name="event_type"
                value={formData.event_type}
                onChange={handleInputChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="meeting">–í—Å—Ç—Ä–µ—á–∞</option>
                <option value="call">–°–æ–∑–≤–æ–Ω</option>
                <option value="briefing">–ü–ª–∞–Ω–µ—Ä–∫–∞</option>
                <option value="conference">–°–æ–≤–µ—â–∞–Ω–∏–µ</option>
                <option value="other">–î—Ä—É–≥–æ–µ</option>
              </select>
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ */}
            {user?.role === 'admin' && (
              <div>
                <label className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    name="is_public"
                    checked={formData.is_public}
                    onChange={(e) => {
                      setFormData(prev => ({
                        ...prev,
                        is_public: e.target.checked
                      }))
                    }}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">
                    üåç –°–æ–∑–¥–∞—Ç—å –æ–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                  </span>
                </label>
                <p className="mt-1 text-sm text-gray-500">
                  –û–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                </p>
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ *
                </label>
                <input
                  type="time"
                  name="start_time"
                  value={formData.start_time}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è *
                </label>
                <input
                  type="time"
                  name="end_time"
                  value={formData.end_time}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>



            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –£—á–∞—Å—Ç–Ω–∏–∫–∏
              </label>
              <div className="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-sm text-blue-800">
                  <strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è.
                </p>
              </div>
              {isLoadingUsers ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                  <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</span>
                </div>
              ) : (
                <div className="max-h-60 overflow-y-auto border border-gray-300 rounded-md p-3">
                  {Object.entries(departments).map(([deptId, deptName]) => {
                    const deptUsers = users.filter(user => user.department_id === parseInt(deptId))
                    if (deptUsers.length === 0) return null
                    
                    return (
                      <div key={deptId} className="mb-3">
                        <h4 className="font-medium text-gray-700 mb-2 text-sm">{deptName}</h4>
                        <div className="space-y-2">
                          {deptUsers.map(user => (
                            <label key={user.id} className="flex items-center space-x-2 cursor-pointer">
                              <input
                                type="checkbox"
                                checked={formData.participants.includes(user.id)}
                                disabled={user.id === user?.id}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setFormData(prev => ({
                                      ...prev,
                                      participants: [...prev.participants, user.id]
                                    }))
                                  } else {
                                    // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if (user.id === user?.id) {
                                      return
                                    }
                                    setFormData(prev => ({
                                      ...prev,
                                      participants: prev.participants.filter(id => id !== user.id)
                                    }))
                                  }
                                }}
                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                              />
                              <span className={`text-sm ${user.id === user?.id ? 'text-blue-600 font-medium' : 'text-gray-700'}`}>
                                {user.first_name} {user.last_name}
                                {user.id === user?.id && ' (–≤—ã)'}
                              </span>
                            </label>
                          ))}
                        </div>
                      </div>
                    )
                  })}
                  {users.filter(user => !user.department_id).length > 0 && (
                    <div className="mb-3">
                      <h4 className="font-medium text-gray-700 mb-2 text-sm">–ë–µ–∑ –æ—Ç–¥–µ–ª–∞</h4>
                      <div className="space-y-2">
                        {users
                          .filter(user => !user.department_id)
                          .map(user => (
                            <label key={user.id} className="flex items-center space-x-2 cursor-pointer">
                              <input
                                type="checkbox"
                                checked={formData.participants.includes(user.id)}
                                disabled={user.id === user?.id}
                                onChange={(e) => {
                                  if (e.target.checked) {
                                    setFormData(prev => ({
                                      ...prev,
                                      participants: [...prev.participants, user.id]
                                    }))
                                  } else {
                                    // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if (user.id === user?.id) {
                                      return
                                    }
                                    setFormData(prev => ({
                                      ...prev,
                                      participants: prev.participants.filter(id => id !== user.id)
                                    }))
                                  }
                                }}
                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                              />
                              <span className={`text-sm ${user.id === user?.id ? 'text-blue-600 font-medium' : 'text-gray-700'}`}>
                                {user.first_name} {user.last_name}
                                {user.id === user?.id && ' (–≤—ã)'}
                              </span>
                            </label>
                          ))
                        }
                      </div>
                    </div>
                  )}
                </div>
              )}
              <p className="mt-1 text-sm text-gray-500">
                –û—Ç–º–µ—Ç—å—Ç–µ —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
              </p>
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-6 mt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
              disabled={isLoading}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
            <button
              type="submit"
              disabled={isLoading}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'}
            </button>
          </div>
        </form>
      </div>
    </Modal>
  )
}

export default AddEventModal
