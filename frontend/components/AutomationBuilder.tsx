'use client';

import React, { useState } from 'react';
import { 
  PlusIcon, 
  TrashIcon, 
  PlayIcon, 
  CogIcon,
  EnvelopeIcon,
  ChatBubbleLeftRightIcon,
  DocumentTextIcon,
  UserGroupIcon
} from '@heroicons/react/24/outline';

interface AutomationStep {
  id: string;
  type: 'trigger' | 'condition' | 'action';
  name: string;
  config: Record<string, any>;
}

interface AutomationTemplate {
  id: string;
  name: string;
  description: string;
  icon: any;
  steps: Omit<AutomationStep, 'id'>[];
}

const automationTemplates: AutomationTemplate[] = [
  {
    id: 'passport-notification',
    name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Å–ø–æ—Ä—Ç–µ –í–≠–î',
    description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ –í–≠–î',
    icon: DocumentTextIcon,
    steps: [
      {
        type: 'trigger',
        name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –í–≠–î',
        config: { event: 'passport_created' }
      },
      {
        type: 'action',
        name: '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram',
        config: { 
          service: 'telegram',
          message: 'üÜï –ù–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç –í–≠–î: {{passport_number}}'
        }
      }
    ]
  },
  {
    id: 'user-welcome',
    name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    icon: EnvelopeIcon,
    steps: [
      {
        type: 'trigger',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        config: { event: 'user_registered' }
      },
      {
        type: 'action',
        name: '–û—Ç–ø—Ä–∞–≤–∫–∞ email',
        config: { 
          service: 'email',
          subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AGB Platform!',
          template: 'welcome'
        }
      }
    ]
  },
  {
    id: 'request-assignment',
    name: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏',
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–Ω–∂–µ–Ω–µ—Ä—É',
    icon: UserGroupIcon,
    steps: [
      {
        type: 'trigger',
        name: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏',
        config: { event: 'request_created' }
      },
      {
        type: 'condition',
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏',
        config: { field: 'type', operator: 'equals', value: 'repair' }
      },
      {
        type: 'action',
        name: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—É',
        config: { 
          service: 'assignment',
          assignTo: 'available_engineer'
        }
      }
    ]
  }
];

const actionTypes = [
  { id: 'telegram', name: 'Telegram', icon: ChatBubbleLeftRightIcon },
  { id: 'email', name: 'Email', icon: EnvelopeIcon },
  { id: 'webhook', name: 'Webhook', icon: CogIcon },
  { id: 'assignment', name: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', icon: UserGroupIcon }
];

interface AutomationBuilderProps {
  onSave: (automation: any) => void;
  onCancel: () => void;
}

export default function AutomationBuilder({ onSave, onCancel }: AutomationBuilderProps) {
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  const [automationName, setAutomationName] = useState('');
  const [automationDescription, setAutomationDescription] = useState('');
  const [steps, setSteps] = useState<AutomationStep[]>([]);
  const [isCreating, setIsCreating] = useState(false);

  const handleTemplateSelect = (template: AutomationTemplate) => {
    setSelectedTemplate(template.id);
    setAutomationName(template.name);
    setAutomationDescription(template.description);
    setSteps(template.steps.map((step, index) => ({
      ...step,
      id: `step-${index}`
    })));
  };

  const addStep = (type: 'trigger' | 'condition' | 'action') => {
    const newStep: AutomationStep = {
      id: `step-${Date.now()}`,
      type,
      name: '',
      config: {}
    };
    setSteps([...steps, newStep]);
  };

  const removeStep = (stepId: string) => {
    setSteps(steps.filter(step => step.id !== stepId));
  };

  const updateStep = (stepId: string, updates: Partial<AutomationStep>) => {
    setSteps(steps.map(step => 
      step.id === stepId ? { ...step, ...updates } : step
    ));
  };

  const handleSave = async () => {
    if (!automationName.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
      return;
    }

    if (steps.length === 0) {
      alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥');
      return;
    }

    setIsCreating(true);
    try {
      const automation = {
        name: automationName,
        description: automationDescription,
        steps: steps.map(step => ({
          type: step.type,
          name: step.name,
          config: step.config
        }))
      };

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      console.log('Creating automation:', automation);
      
      onSave(automation);
    } catch (error) {
      console.error('Error creating automation:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h2>
        <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å –Ω—É–ª—è</p>
      </div>

      {/* Templates */}
      {!selectedTemplate && (
        <div className="mb-8">
          <h3 className="text-lg font-medium text-gray-900 mb-4">–®–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {automationTemplates.map((template) => (
              <div
                key={template.id}
                onClick={() => handleTemplateSelect(template)}
                className="border border-gray-200 rounded-lg p-4 hover:border-blue-500 hover:shadow-md cursor-pointer transition-all"
              >
                <div className="flex items-center mb-2">
                  <template.icon className="h-6 w-6 text-blue-600 mr-2" />
                  <h4 className="font-medium text-gray-900">{template.name}</h4>
                </div>
                <p className="text-sm text-gray-600">{template.description}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Automation Form */}
      {selectedTemplate && (
        <div className="space-y-6">
          {/* Basic Info */}
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <h3 className="text-lg font-medium text-gray-900 mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ù–∞–∑–≤–∞–Ω–∏–µ
                </label>
                <input
                  type="text"
                  value={automationName}
                  onChange={(e) => setAutomationName(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  value={automationDescription}
                  onChange={(e) => setAutomationDescription(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
                />
              </div>
            </div>
          </div>

          {/* Steps */}
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">–®–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h3>
              <div className="flex space-x-2">
                <button
                  onClick={() => addStep('trigger')}
                  className="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                >
                  <PlusIcon className="h-4 w-4 mr-1" />
                  –¢—Ä–∏–≥–≥–µ—Ä
                </button>
                <button
                  onClick={() => addStep('condition')}
                  className="inline-flex items-center px-3 py-1 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  <PlusIcon className="h-4 w-4 mr-1" />
                  –£—Å–ª–æ–≤–∏–µ
                </button>
                <button
                  onClick={() => addStep('action')}
                  className="inline-flex items-center px-3 py-1 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  <PlusIcon className="h-4 w-4 mr-1" />
                  –î–µ–π—Å—Ç–≤–∏–µ
                </button>
              </div>
            </div>

            <div className="space-y-4">
              {steps.map((step, index) => (
                <div key={step.id} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mr-3">
                        {index + 1}
                      </span>
                      <span className="text-sm font-medium text-gray-700">
                        {step.type === 'trigger' ? '–¢—Ä–∏–≥–≥–µ—Ä' : 
                         step.type === 'condition' ? '–£—Å–ª–æ–≤–∏–µ' : '–î–µ–π—Å—Ç–≤–∏–µ'}
                      </span>
                    </div>
                    <button
                      onClick={() => removeStep(step.id)}
                      className="text-red-600 hover:text-red-800"
                    >
                      <TrashIcon className="h-4 w-4" />
                    </button>
                  </div>

                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
                      </label>
                      <input
                        type="text"
                        value={step.name}
                        onChange={(e) => updateStep(step.id, { name: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞"
                      />
                    </div>

                    {step.type === 'trigger' && (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          –°–æ–±—ã—Ç–∏–µ
                        </label>
                        <select
                          value={step.config.event || ''}
                          onChange={(e) => updateStep(step.id, { 
                            config: { ...step.config, event: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ</option>
                          <option value="passport_created">–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –í–≠–î</option>
                          <option value="user_registered">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</option>
                          <option value="request_created">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏</option>
                        </select>
                      </div>
                    )}

                    {step.type === 'action' && (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
                        </label>
                        <select
                          value={step.config.service || ''}
                          onChange={(e) => updateStep(step.id, { 
                            config: { ...step.config, service: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è</option>
                          {actionTypes.map((action) => (
                            <option key={action.id} value={action.id}>
                              {action.name}
                            </option>
                          ))}
                        </select>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Actions */}
          <div className="flex justify-end space-x-3">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              onClick={handleSave}
              disabled={isCreating}
              className="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
            >
              {isCreating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
