'use client'

import React, { useState, useEffect } from 'react'
import { useAuth } from '@/hooks'
import { useRouter, useSearchParams } from 'next/navigation'
import { getApiUrl } from '@/utils'

interface RepairRequest {
  id: number
  title: string
  description: string
  urgency: string
  status: string
  created_at: string
  equipment_type?: string
  equipment_brand?: string
  equipment_model?: string
  address?: string
  city?: string
  region?: string
  customer?: {
    company_name?: string
    contact_person?: string
  }
}

interface TelegramLink {
  telegram_bot_link: string
  instructions: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
const getCurrentTabTitle = (tab: string) => {
  switch (tab) {
    case 'requests': return '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏'
    case 'archive': return '–ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫'
    case 'profile': return '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
    default: return '–ö–∞–±–∏–Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
  }
}

export default function ContractorDashboard() {
  const { user, token, logout, isAuthenticated } = useAuth()
  const [requests, setRequests] = useState<RepairRequest[]>([])
  const [archivedRequests, setArchivedRequests] = useState<RepairRequest[]>([])
  const [telegramLink, setTelegramLink] = useState<TelegramLink | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState<'requests' | 'archive' | 'profile'>('requests')
  const router = useRouter()
  const searchParams = useSearchParams()

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login')
      return
    }

    if (user && user.role !== 'contractor') {
      router.push('/dashboard')
      return
    }

    // –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä tab –∏–∑ URL
    const tabParam = searchParams.get('tab')
    if (tabParam === 'profile') {
      setActiveTab('profile')
    } else if (tabParam === 'archive') {
      setActiveTab('archive')
    } else {
      setActiveTab('requests')
    }

    loadRequests()
    loadArchivedRequests()
    loadTelegramLink()
  }, [isAuthenticated, user, router, searchParams])

  const loadRequests = async () => {
    if (!token) return

    try {
      const response: any = await fetch(`${getApiUrl()}/api/v1/repair-requests/`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.status >= 200 && response.status < 300) {
        const data = await response.json()
        setRequests(data)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadArchivedRequests = async () => {
    if (!token) return

    try {
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      // –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const response: any = await fetch(`${getApiUrl()}/api/v1/repair-requests/?status=completed`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.status >= 200 && response.status < 300) {
        const data = await response.json()
        setArchivedRequests(data.filter((request: RepairRequest) =>
          request.status === 'completed' || request.status === 'cancelled'
        ))
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error)
    }
  }

  const loadTelegramLink = async () => {
    if (!token) return

    try {
      const response: any = await fetch(`${getApiUrl()}/api/v1/contractors/telegram-link`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.status >= 200 && response.status < 300) {
        const data = await response.json()
        setTelegramLink(data)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram –±–æ—Ç–∞:', error)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return 'bg-green-100 text-green-800'
      case 'processing': return 'bg-blue-100 text-blue-800'
      case 'assigned': return 'bg-purple-100 text-purple-800'
      case 'completed': return 'bg-gray-100 text-gray-800'
      case 'cancelled': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'new': return '–î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞'
      case 'processing': return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
      case 'assigned': return '–ù–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞'
      default: return status
    }
  }

  const getUrgencyColor = (urgency: string) => {
    switch (urgency) {
      case '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è': return 'bg-red-100 text-red-800'
      case '–≤—ã—Å–æ–∫–∞—è': return 'bg-orange-100 text-orange-800'
      case '—Å—Ä–µ–¥–Ω–µ': return 'bg-yellow-100 text-yellow-800'
      case '–Ω–∏–∑–∫–∞—è': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (!isAuthenticated || !user || user.role !== 'contractor') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold text-gray-900">
            {getCurrentTabTitle(activeTab)}
          </h1>
          <button
            onClick={logout}
            className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors text-sm font-medium"
          >
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="p-6">
        {/* Telegram –±–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {telegramLink && activeTab === 'requests' && (
          <div className="mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="text-lg font-semibold text-blue-900 mb-2">
              ü§ñ Telegram –±–æ—Ç
            </h3>
            <p className="text-blue-800 mb-2">
              –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram –±–æ—Ç—É:
            </p>
            <a
              href={telegramLink.telegram_bot_link}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-block bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É
            </a>
            <p className="text-sm text-blue-700 mt-2">{telegramLink.instructions}</p>
          </div>
        )}

        {loading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-green-600 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        ) : (
          <>
            {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ */}
            {activeTab === 'requests' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-gray-900">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏</h2>
                  <button
                    onClick={loadRequests}
                    className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                  >
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>

                {!requests || requests.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p>
                  </div>
                ) : (
                  <div className="grid gap-6">
                    {requests.map((request) => (
                      <div key={request.id} className="bg-white rounded-lg shadow-md p-6">
                        <div className="flex justify-between items-start mb-4">
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900 mb-1">
                              {request.title}
                            </h3>
                            <p className="text-gray-600 text-sm">
                              –ó–∞—è–≤–∫–∞ #{request.id} ‚Ä¢ {new Date(request.created_at).toLocaleDateString('ru-RU')}
                            </p>
                          </div>
                          <div className="flex flex-col items-end space-y-2">
                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(request.status)}`}>
                              {getStatusText(request.status)}
                            </span>
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getUrgencyColor(request.urgency)}`}>
                              {request.urgency}
                            </span>
                          </div>
                        </div>

                        <p className="text-gray-700 mb-4">{request.description}</p>

                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4">
                          {request.customer && (
                            <div>
                              <span className="font-medium text-gray-500">–ó–∞–∫–∞–∑—á–∏–∫:</span>
                              <p className="text-gray-900">{request.customer.company_name || request.customer.contact_person}</p>
                            </div>
                          )}
                          {request.equipment_type && (
                            <div>
                              <span className="font-medium text-gray-500">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</span>
                              <p className="text-gray-900">{request.equipment_type}</p>
                            </div>
                          )}
                          {request.address && (
                            <div>
                              <span className="font-medium text-gray-500">–ê–¥—Ä–µ—Å:</span>
                              <p className="text-gray-900">{request.address}</p>
                            </div>
                          )}
                          {request.city && (
                            <div>
                              <span className="font-medium text-gray-500">–ì–æ—Ä–æ–¥:</span>
                              <p className="text-gray-900">{request.city}</p>
                            </div>
                          )}
                        </div>

                        {request.status === 'new' && (
                          <div className="flex justify-end">
                            <button className="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 transition-colors font-medium">
                              –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                            </button>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* –ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫ */}
            {activeTab === 'archive' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-gray-900">–ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫</h2>
                  <button
                    onClick={loadArchivedRequests}
                    className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                  >
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>

                {!archivedRequests || archivedRequests.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫...</p>
                  </div>
                ) : (
                  <div className="grid gap-6">
                    {archivedRequests.map((request) => (
                      <div key={request.id} className="bg-white rounded-lg shadow-md p-6">
                        <div className="flex justify-between items-start mb-4">
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900 mb-1">
                              {request.title}
                            </h3>
                            <p className="text-gray-600 text-sm">
                              –ó–∞—è–≤–∫–∞ #{request.id} ‚Ä¢ {new Date(request.created_at).toLocaleDateString('ru-RU')}
                            </p>
                          </div>
                          <div className="flex flex-col items-end space-y-2">
                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(request.status)}`}>
                              {getStatusText(request.status)}
                            </span>
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getUrgencyColor(request.urgency)}`}>
                              {request.urgency}
                            </span>
                          </div>
                        </div>

                        <p className="text-gray-700 mb-4">{request.description}</p>

                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4">
                          {request.customer && (
                            <div>
                              <span className="font-medium text-gray-500">–ó–∞–∫–∞–∑—á–∏–∫:</span>
                              <p className="text-gray-900">{request.customer.company_name || request.customer.contact_person}</p>
                            </div>
                          )}
                          {request.equipment_type && (
                            <div>
                              <span className="font-medium text-gray-500">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</span>
                              <p className="text-gray-900">{request.equipment_type}</p>
                            </div>
                          )}
                          {request.address && (
                            <div>
                              <span className="font-medium text-gray-500">–ê–¥—Ä–µ—Å:</span>
                              <p className="text-gray-900">{request.address}</p>
                            </div>
                          )}
                          {request.city && (
                            <div>
                              <span className="font-medium text-gray-500">–ì–æ—Ä–æ–¥:</span>
                              <p className="text-gray-900">{request.city}</p>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å */}
            {activeTab === 'profile' && (
              <ContractorProfile />
            )}
          </>
        )}
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
function ContractorProfile() {
  const { token } = useAuth()
  const [profile, setProfile] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [editing, setEditing] = useState(false)
  const [error, setError] = useState('')
  const [formData, setFormData] = useState({
    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    last_name: '',
    first_name: '',
    patronymic: '',
    phone: '',
    email: '',
    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–∞—Å—Å–∏–≤)
    professional_info: [{
      specialization: '',
      experience_years: '',
      skills: '',
      description: ''
    }],
    // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–º–∞—Å—Å–∏–≤)
    education: [{
      institution: '',
      degree: '',
      field_of_study: '',
      graduation_year: '',
      description: ''
    }],
    // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    bank_name: '',
    bank_account: '',
    bank_bik: '',
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    telegram_username: '',
    website: '',
    description: '',
    // –§–∞–π–ª—ã
    profile_photo: null as File | null,
    portfolio_files: [] as File[],
    document_files: [] as File[]
  })

  const educationDegrees = [
    '–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    '–ë–∞–∫–∞–ª–∞–≤—Ä',
    '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
    '–ú–∞–≥–∏—Å—Ç—Ä',
    '–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫',
    '–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫',
    '–î—Ä—É–≥–æ–µ'
  ]

  useEffect(() => {
    loadProfile()
  }, [])

  const loadProfile = async () => {
    if (!token) return

    try {
      const response: any = await fetch(`${getApiUrl()}/api/v1/contractors/profile`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.status >= 200 && response.status < 300) {
        const data = await response.json()
        setProfile(data)
        setFormData({
          // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          last_name: data.last_name || '',
          first_name: data.first_name || '',
          patronymic: data.patronymic || '',
          phone: data.phone || '',
          email: data.email || '',
          // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–∞—Å—Å–∏–≤)
          professional_info: data.professional_info?.length > 0 ? data.professional_info : [{
            specialization: '',
            experience_years: '',
            skills: '',
            description: ''
          }],
          // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–º–∞—Å—Å–∏–≤)
          education: data.education?.length > 0 ? data.education : [{
            institution: '',
            degree: '',
            field_of_study: '',
            graduation_year: '',
            description: ''
          }],
          // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
          bank_name: data.bank_name || '',
          bank_account: data.bank_account || '',
          bank_bik: data.bank_bik || '',
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          telegram_username: data.telegram_username || '',
          website: data.website || '',
          description: data.general_description || '',
          // –§–∞–π–ª—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏)
          profile_photo: null,
          portfolio_files: [],
          document_files: []
        })
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleInputChange = (e: any) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
  const addProfessionalInfo = () => {
    setFormData(prev => ({
      ...prev,
      professional_info: [...prev.professional_info, {
        specialization: '',
        experience_years: '',
        skills: '',
        description: ''
      }]
    }))
  }

  const removeProfessionalInfo = (index: number) => {
    setFormData(prev => ({
      ...prev,
      professional_info: prev.professional_info.filter((_, i) => i !== index)
    }))
  }

  const updateProfessionalInfo = (index: number, field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      professional_info: prev.professional_info.map((item, i) =>
        i === index ? { ...item, [field]: value } : item
      )
    }))
  }

  const addEducation = () => {
    setFormData(prev => ({
      ...prev,
      education: [...prev.education, {
        institution: '',
        degree: '',
        field_of_study: '',
        graduation_year: '',
        description: ''
      }]
    }))
  }

  const removeEducation = (index: number) => {
    setFormData(prev => ({
      ...prev,
      education: prev.education.filter((_, i) => i !== index)
    }))
  }

  const updateEducation = (index: number, field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      education: prev.education.map((item, i) =>
        i === index ? { ...item, [field]: value } : item
      )
    }))
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
  const handleProfilePhotoChange = (e: any) => {
    const file = e.target.files?.[0]
    if (file) {
      if (file.size > 5 * 1024 * 1024) { // 5MB
        alert('–†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5–ú–ë')
        return
      }
      setFormData(prev => ({ ...prev, profile_photo: file }))
    }
  }

  const handlePortfolioFilesChange = (e: any) => {
    const files = Array.from(e.target.files || []) as File[]
    const validFiles: File[] = files.filter((file: any) => {
      if (file.size > 5 * 1024 * 1024) { // 5MB
        alert(`–§–∞–π–ª ${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 5–ú–ë`)
        return false
      }
      return true
    })

    const totalSize = [...formData.portfolio_files, ...validFiles].reduce((sum: number, file: any) => sum + file.size, 0)
    if (totalSize > 200 * 1024 * 1024) { // 200MB
      alert('–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200–ú–ë')
      return
    }

    setFormData(prev => ({
      ...prev,
      portfolio_files: [...prev.portfolio_files, ...validFiles]
    }))
  }

  const handleDocumentFilesChange = (e: any) => {
    const files = Array.from(e.target.files || []) as File[]
    const validFiles: File[] = files.filter((file: any) => {
      if (file.size > 5 * 1024 * 1024) { // 5MB
        alert(`–§–∞–π–ª ${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 5–ú–ë`)
        return false
      }
      return true
    })

    const totalSize = [...formData.document_files, ...validFiles].reduce((sum: number, file: any) => sum + file.size, 0)
    if (totalSize > 200 * 1024 * 1024) { // 200MB
      alert('–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200–ú–ë')
      return
    }

    setFormData(prev => ({
      ...prev,
      document_files: [...prev.document_files, ...validFiles]
    }))
  }

  const removePortfolioFile = (index: number) => {
    setFormData(prev => ({
      ...prev,
      portfolio_files: prev.portfolio_files.filter((_, i) => i !== index)
    }))
  }

  const removeDocumentFile = (index: number) => {
    setFormData(prev => ({
      ...prev,
      document_files: prev.document_files.filter((_, i) => i !== index)
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!token) return

    try {
      const formDataToSend = new FormData()

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      formDataToSend.append('last_name', formData.last_name)
      formDataToSend.append('first_name', formData.first_name)
      formDataToSend.append('patronymic', formData.patronymic)
      formDataToSend.append('phone', formData.phone)
      formDataToSend.append('email', formData.email)
      formDataToSend.append('telegram_username', formData.telegram_username)
      formDataToSend.append('website', formData.website)
      formDataToSend.append('general_description', formData.description)
      formDataToSend.append('bank_name', formData.bank_name)
      formDataToSend.append('bank_account', formData.bank_account)
      formDataToSend.append('bank_bik', formData.bank_bik)

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤—ã
      formDataToSend.append('professional_info', JSON.stringify(formData.professional_info))
      formDataToSend.append('education', JSON.stringify(formData.education))

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
      if (formData.profile_photo) {
        formDataToSend.append('profile_photo', formData.profile_photo)
      }

      formData.portfolio_files.forEach((file, index) => {
        formDataToSend.append(`portfolio_files`, file)
      })

      formData.document_files.forEach((file, index) => {
        formDataToSend.append(`document_files`, file)
      })

      const response: any = await fetch(`${getApiUrl()}/api/v1/contractors/profile`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formDataToSend
      })

      if (response.status >= 200 && response.status < 300) {
        setEditing(false)
        setError('')
        loadProfile()
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        console.log('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
      } else {
        const errorData = await response.json()
        setError(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error)
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É')
    }
  }

  if (loading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
        <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white shadow rounded-lg">
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold text-gray-900">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
            {!editing && (
              <button
                onClick={() => setEditing(true)}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            )}
          </div>
        </div>

        <div className="p-6">
          {error && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
              <p className="text-red-800">{error}</p>
            </div>
          )}

          {editing ? (
            <div className="max-w-6xl mx-auto">
              <form onSubmit={handleSubmit} className="space-y-8">
                {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">1</span>
                    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –§–∞–º–∏–ª–∏—è *
                      </label>
                      <input
                        type="text"
                        name="last_name"
                        value={formData.last_name}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="–ò–≤–∞–Ω–æ–≤"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –ò–º—è *
                      </label>
                      <input
                        type="text"
                        name="first_name"
                        value={formData.first_name}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="–ò–≤–∞–Ω"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –û—Ç—á–µ—Å—Ç–≤–æ
                      </label>
                      <input
                        type="text"
                        name="patronymic"
                        value={formData.patronymic}
                        onChange={handleInputChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="–ò–≤–∞–Ω–æ–≤–∏—á"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –¢–µ–ª–µ—Ñ–æ–Ω *
                      </label>
                      <input
                        type="tel"
                        name="phone"
                        value={formData.phone}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="+7 (999) 123-45-67"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email
                      </label>
                      <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="email@example.com"
                      />
                    </div>
                  </div>
                </div>

                {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="border-t pt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">2</span>
                    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </h3>

                  {formData.professional_info.map((info, index) => (
                    <div key={index} className="mb-6 p-4 bg-gray-50 rounded-lg relative">
                      {formData.professional_info.length > 1 && (
                        <button
                          type={"button" as const}
                          onClick={() => removeProfessionalInfo(index)}
                          className="absolute top-2 right-2 text-red-500 hover:text-red-700 text-lg font-bold"
                        >
                          √ó
                        </button>
                      )}

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è *
                          </label>
                          <input
                            type="text"
                            value={info.specialization}
                            onChange={(e: any) => updateProfessionalInfo(index, 'specialization', e.target.value)}
                            required
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≠–ª–µ–∫—Ç—Ä–∏–∫, –º–µ—Ö–∞–Ω–∏–∫"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)
                          </label>
                          <input
                            type="number"
                            value={info.experience_years}
                            onChange={(e: any) => updateProfessionalInfo(index, 'experience_years', e.target.value)}
                            min="0"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                            placeholder="5"
                          />
                        </div>
                      </div>

                      <div className="mt-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
                        </label>
                        <textarea
                          value={info.skills}
                            onChange={(e: any) => updateProfessionalInfo(index, 'skills', e.target.value)}
                          rows={3}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-vertical"
                          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é"
                        />
                      </div>

                      <div className="mt-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        </label>
                        <textarea
                          value={info.description}
                            onChange={(e: any) => updateProfessionalInfo(index, 'description', e.target.value)}
                          rows={2}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-vertical"
                          placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
                        />
                      </div>
                    </div>
                  ))}

                  <button
                    type={"button" as const}
                    onClick={addProfessionalInfo}
                    className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    <span className="mr-2">+</span>
                    –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                  </button>
                </div>

                {/* –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ */}
                <div className="border-t pt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">3</span>
                    –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                  </h3>

                  {formData.education.map((edu, index) => (
                    <div key={index} className="mb-6 p-4 bg-gray-50 rounded-lg relative">
                      {formData.education.length > 1 && (
                        <button
                          type={"button" as const}
                          onClick={() => removeEducation(index)}
                          className="absolute top-2 right-2 text-red-500 hover:text-red-700 text-lg font-bold"
                        >
                          √ó
                        </button>
                      )}

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ *
                          </label>
                          <input
                            type="text"
                            value={edu.institution}
                            onChange={(e: any) => updateEducation(index, 'institution', e.target.value)}
                            required
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–ì–£ –∏–º. –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –°—Ç–µ–ø–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è *
                          </label>
                          <select
                            value={edu.degree}
                            onChange={(e: any) => updateEducation(index, 'degree', e.target.value)}
                            required
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                          >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å</option>
                            {educationDegrees.map(degree => (
                              <option key={degree} value={degree}>{degree}</option>
                            ))}
                          </select>
                        </div>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
                          </label>
                          <input
                            type="text"
                            value={edu.field_of_study}
                            onChange={(e: any) => updateEducation(index, 'field_of_study', e.target.value)}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                          </label>
                          <input
                            type="number"
                            value={edu.graduation_year}
                            onChange={(e: any) => updateEducation(index, 'graduation_year', e.target.value)}
                            min="1950"
                            max={new Date().getFullYear() + 10}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                            placeholder="2020"
                          />
                        </div>
                      </div>

                      <div className="mt-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        </label>
                        <textarea
                          value={edu.description}
                          onChange={(e: any) => updateEducation(index, 'description', e.target.value)}
                          rows={2}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-vertical"
                          placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –¥–∏–ø–ª–æ–º —Å –æ—Ç–ª–∏—á–∏–µ–º –∏ —Ç.–¥."
                        />
                      </div>
                    </div>
                  ))}

                  <button
                    type={"button" as const}
                    onClick={addEducation}
                    className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    <span className="mr-2">+</span>
                    –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                  </button>
                </div>

                {/* –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è */}
                <div className="border-t pt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">4</span>
                    –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                  </h3>

                  <div className="flex items-center space-x-6">
                    <div className="flex-shrink-0">
                      {formData.profile_photo ? (
                        <img
                          src={URL.createObjectURL(formData.profile_photo)}
                          alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"
                          className="w-24 h-24 rounded-full object-cover border-4 border-green-200"
                        />
                      ) : (
                        <div className="w-24 h-24 rounded-full bg-gray-200 flex items-center justify-center border-4 border-gray-300">
                          <svg className="w-12 h-12 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule={"evenodd" as const} d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule={"evenodd" as const} />
                          </svg>
                        </div>
                      )}
                    </div>
                    <div className="flex-1">
                      <label className="block">
                        <span className="sr-only">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</span>
                        <input
                          type="file"
                          accept="image/*"
                          onChange={handleProfilePhotoChange}
                          className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-green-50 file:text-green-700 hover:file:bg-green-100"
                        />
                      </label>
                      <p className="mt-1 text-sm text-gray-500">
                        PNG, JPG –¥–æ 5–ú–ë. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 200x200px
                      </p>
                      {formData.profile_photo && (
                        <button
                          type={"button" as const}
                          onClick={() => setFormData(prev => ({ ...prev, profile_photo: null }))}
                          className="mt-2 text-sm text-red-600 hover:text-red-800"
                        >
                          –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ
                        </button>
                      )}
                    </div>
                  </div>
                </div>

                {/* –§–∞–π–ª—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ */}
                <div className="border-t pt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">5</span>
                    –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ —Ä–∞–±–æ—Ç—ã
                  </h3>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                      </label>
                      <input
                        type="file"
                        multiple
                        accept="image/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx"
                        onChange={handlePortfolioFilesChange}
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-green-50 file:text-green-700 hover:file:bg-green-100"
                      />
                      <p className="mt-1 text-sm text-gray-500">
                        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, PDF, –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª –¥–æ 5–ú–ë, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ 200–ú–ë
                      </p>
                    </div>

                    {formData.portfolio_files.length > 0 && (
                      <div className="bg-gray-50 rounded-lg p-4">
                        <h4 className="text-sm font-medium text-gray-700 mb-3">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</h4>
                        <div className="space-y-2">
                          {formData.portfolio_files.map((file, index) => (
                            <div key={index} className="flex items-center justify-between bg-white p-3 rounded border">
                              <div className="flex items-center">
                                <svg className="w-5 h-5 text-gray-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule={"evenodd" as const} d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule={"evenodd" as const} />
                                </svg>
                                <div>
                                  <p className="text-sm font-medium text-gray-900">{(file as any).name}</p>
                                  <p className="text-xs text-gray-500">{((file as any).size / 1024 / 1024).toFixed(2)} –ú–ë</p>
                                </div>
                              </div>
                              <button
                                type={"button" as const}
                                onClick={() => removePortfolioFile(index)}
                                className="text-red-500 hover:text-red-700"
                              >
                                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule={"evenodd" as const} d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule={"evenodd" as const} />
                                </svg>
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* –î–æ–∫—É–º–µ–Ω—Ç—ã */}
                <div className="border-t pt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">6</span>
                    –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–æ–ø—É—Å–∫–∏
                  </h3>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
                      </label>
                      <input
                        type="file"
                        multiple
                        accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.xls,.xlsx"
                        onChange={handleDocumentFilesChange}
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-green-50 file:text-green-700 hover:file:bg-green-100"
                      />
                      <p className="mt-1 text-sm text-gray-500">
                        –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –¥–æ–ø—É—Å–∫–∏, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –ª–∏—Ü–µ–Ω–∑–∏–∏. –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª –¥–æ 5–ú–ë, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ 200–ú–ë
                      </p>
                    </div>

                    {formData.document_files.length > 0 && (
                      <div className="bg-gray-50 rounded-lg p-4">
                        <h4 className="text-sm font-medium text-gray-700 mb-3">–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h4>
                        <div className="space-y-2">
                          {formData.document_files.map((file, index) => (
                            <div key={index} className="flex items-center justify-between bg-white p-3 rounded border">
                              <div className="flex items-center">
                                <svg className="w-5 h-5 text-gray-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule={"evenodd" as const} d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule={"evenodd" as const} />
                                </svg>
                                <div>
                                  <p className="text-sm font-medium text-gray-900">{(file as any).name}</p>
                                  <p className="text-xs text-gray-500">{((file as any).size / 1024 / 1024).toFixed(2)} –ú–ë</p>
                                </div>
                              </div>
                              <button
                                type={"button" as const}
                                onClick={() => removeDocumentFile(index)}
                                className="text-red-500 hover:text-red-700"
                              >
                                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule={"evenodd" as const} d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule={"evenodd" as const} />
                                </svg>
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ */}
                <div className="border-t pt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">7</span>
                    –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Telegram
                      </label>
                      <input
                        type="text"
                        name="telegram_username"
                        value={formData.telegram_username}
                        onChange={handleInputChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="@username –∏–ª–∏ https://t.me/username"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –°–∞–π—Ç/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                      </label>
                      <input
                        type="url"
                        name="website"
                        value={formData.website}
                        onChange={handleInputChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="https://example.com"
                      />
                    </div>
                  </div>
                </div>

                {/* –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã */}
                <div className="border-t pt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">4</span>
                    –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                  </h3>
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
                      </label>
                      <input
                        type="text"
                        name="bank_name"
                        value={formData.bank_name}
                        onChange={handleInputChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="–°–±–µ—Ä–±–∞–Ω–∫ –†–æ—Å—Å–∏–∏"
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç
                        </label>
                        <input
                          type="text"
                          name="bank_account"
                          value={formData.bank_account}
                          onChange={handleInputChange}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                          placeholder="40702810000000000000"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –ë–ò–ö –±–∞–Ω–∫–∞
                        </label>
                        <input
                          type="text"
                          name="bank_bik"
                          value={formData.bank_bik}
                          onChange={handleInputChange}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                          placeholder="044525225"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <div className="border-t pt-8">
                  <div className="flex gap-4">
                    <button
                      type={"button" as const}
                      onClick={() => {
                        setEditing(false)
                        setError('')
                      }}
                      className="flex-1 bg-gray-600 text-white py-3 px-6 rounded-lg hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 transition-colors font-medium"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                    <button
                      type={"submit" as const}
                      className="flex-1 bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-colors font-medium"
                    >
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    </button>
                  </div>
                </div>
              </form>
            </div>
          ) : (
            <div className="max-w-6xl mx-auto space-y-8">
              {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="bg-gray-50 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üë§</span>
                  –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <span className="font-medium text-gray-500">–§–ò–û:</span>
                    <p className="text-gray-900 mt-1 font-medium">
                      {profile?.last_name || ''} {profile?.first_name || ''} {profile?.patronymic || ''}
                      {(!profile?.last_name && !profile?.first_name) && '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-500">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                    <p className="text-gray-900 mt-1">{profile?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-500">Email:</span>
                    <p className="text-gray-900 mt-1">{profile?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                  </div>
                </div>
              </div>

              {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              {(profile?.professional_info?.length > 0) && (
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üíº</span>
                    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </h3>

                  {profile.professional_info.map((info: any, index: number) => (
                    <div key={index} className="mb-4 p-4 bg-white rounded-lg border">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <span className="font-medium text-gray-500">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</span>
                          <p className="text-gray-900 mt-1">{info.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                        </div>
                        <div>
                          <span className="font-medium text-gray-500">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</span>
                          <p className="text-gray-900 mt-1">{info.experience_years ? `${info.experience_years} –ª–µ—Ç` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                        </div>
                      </div>

                      {info.skills && (
                        <div className="mt-3">
                          <span className="font-medium text-gray-500">–ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:</span>
                          <p className="text-gray-900 mt-1 whitespace-pre-line">{info.skills}</p>
                        </div>
                      )}

                      {info.description && (
                        <div className="mt-3">
                          <span className="font-medium text-gray-500">–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</span>
                          <p className="text-gray-900 mt-1 whitespace-pre-line">{info.description}</p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {/* –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ */}
              {(profile?.education?.length > 0) && (
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üéì</span>
                    –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                  </h3>

                  {profile.education.map((edu: any, index: number) => (
                    <div key={index} className="mb-4 p-4 bg-white rounded-lg border">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <span className="font-medium text-gray-500">–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:</span>
                          <p className="text-gray-900 mt-1">{edu.institution || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                        </div>
                        <div>
                          <span className="font-medium text-gray-500">–°—Ç–µ–ø–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</span>
                          <p className="text-gray-900 mt-1">{edu.degree || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                        </div>
                        <div>
                          <span className="font-medium text-gray-500">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</span>
                          <p className="text-gray-900 mt-1">{edu.field_of_study || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                        </div>
                        <div>
                          <span className="font-medium text-gray-500">–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span>
                          <p className="text-gray-900 mt-1">{edu.graduation_year || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                        </div>
                      </div>

                      {edu.description && (
                        <div className="mt-3">
                          <span className="font-medium text-gray-500">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</span>
                          <p className="text-gray-900 mt-1 whitespace-pre-line">{edu.description}</p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {/* –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è */}
              {profile?.profile_photo_url && (
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üì∏</span>
                    –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                  </h3>
                  <div className="flex items-center space-x-4">
                    <img
                      src={profile.profile_photo_url}
                      alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"
                      className="w-20 h-20 rounded-full object-cover border-4 border-green-200"
                    />
                  </div>
                </div>
              )}

              {/* –§–∞–π–ª—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ */}
              {(profile?.portfolio_files?.length > 0) && (
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üìÅ</span>
                    –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ —Ä–∞–±–æ—Ç—ã
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {profile.portfolio_files.map((file: any, index: number) => (
                      <div key={index} className="flex items-center p-3 bg-white rounded border">
                        <svg className="w-5 h-5 text-gray-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule={"evenodd" as const} d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule={"evenodd" as const} />
                        </svg>
                        <div className="flex-1">
                          <p className="text-sm font-medium text-gray-900">{file.name}</p>
                          <p className="text-xs text-gray-500">{file.size} –ú–ë</p>
                        </div>
                        <a
                          href={file.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:text-blue-800"
                        >
                          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule={"evenodd" as const} d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clipRule={"evenodd" as const} />
                          </svg>
                        </a>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –î–æ–∫—É–º–µ–Ω—Ç—ã */}
              {(profile?.document_files?.length > 0) && (
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üìÑ</span>
                    –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–æ–ø—É—Å–∫–∏
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {profile.document_files.map((file: any, index: number) => (
                      <div key={index} className="flex items-center p-3 bg-white rounded border">
                        <svg className="w-5 h-5 text-gray-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule={"evenodd" as const} d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule={"evenodd" as const} />
                        </svg>
                        <div className="flex-1">
                          <p className="text-sm font-medium text-gray-900">{file.name}</p>
                          <p className="text-xs text-gray-500">{file.size} –ú–ë</p>
                        </div>
                        <a
                          href={file.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:text-blue-800"
                        >
                          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule={"evenodd" as const} d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clipRule={"evenodd" as const} />
                          </svg>
                        </a>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ */}
              {(profile?.telegram_username || profile?.website) && (
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üì±</span>
                    –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {profile?.telegram_username && (
                      <div>
                        <span className="font-medium text-gray-500">Telegram:</span>
                        <p className="text-gray-900 mt-1">
                          {profile.telegram_username.startsWith('@') || profile.telegram_username.startsWith('https://')
                            ? profile.telegram_username
                            : `@${profile.telegram_username}`}
                        </p>
                      </div>
                    )}
                    {profile?.website && (
                      <div>
                        <span className="font-medium text-gray-500">–°–∞–π—Ç/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</span>
                        <p className="text-gray-900 mt-1">
                          <a href={profile.website} target="_blank" rel="noopener noreferrer"
                             className="text-blue-600 hover:text-blue-800 underline">
                            {profile.website}
                          </a>
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã */}
              {(profile?.bank_name || profile?.bank_account || profile?.bank_bik) && (
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center mr-3 text-sm font-bold">üè¶</span>
                    –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                  </h3>
                  <div className="space-y-3">
                    {profile?.bank_name && (
                      <div>
                        <span className="font-medium text-gray-500">–ë–∞–Ω–∫:</span>
                        <p className="text-gray-900 mt-1">{profile.bank_name}</p>
                      </div>
                    )}
                    {profile?.bank_account && (
                      <div>
                        <span className="font-medium text-gray-500">–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç:</span>
                        <p className="text-gray-900 mt-1 font-mono">{profile.bank_account}</p>
                      </div>
                    )}
                    {profile?.bank_bik && (
                      <div>
                        <span className="font-medium text-gray-500">–ë–ò–ö:</span>
                        <p className="text-gray-900 mt-1 font-mono">{profile.bank_bik}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              {(!profile?.last_name && !profile?.first_name && !profile?.specialization &&
                !profile?.bank_name && !profile?.telegram_username && !profile?.website) && (
                <div className="text-center py-12">
                  <div className="text-gray-400 mb-4">
                    <svg className="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule={"evenodd" as const} d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule={"evenodd" as const} />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞</h3>
                  <p className="text-gray-500">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥–ª–∏ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}