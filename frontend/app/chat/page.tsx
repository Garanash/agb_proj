'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../../src/hooks/useAuth';
import { getApiUrl, getWsUrl } from '../../src/utils/api';
import PageLayout from '../../src/components/layout/PageLayout';

import CreateChatRoomModal from '../../src/components/features/chat/CreateChatRoomModal';
import ChatParticipantsModal from '../../src/components/features/chat/ChatParticipantsModal';
import ChatFoldersModal from '../../src/components/features/chat/ChatFoldersModal';

interface ChatRoom {
  id: number;
  name: string;
  creator: User;
  participants: ChatRoomParticipant[];
  messages: ChatMessage[];
  is_active: boolean;
  folders: ChatRoomFolder[];
  unread_count?: number;
}

interface ChatRoomListItem {
  id: number;
  name: string;
  description?: string;
  creator_id: number;
  is_private: boolean;
  created_at: string;
  updated_at: string | null;
  folders: ChatRoomFolder[];
  unread_count?: number;
}

interface ChatRoomParticipant {
  id: number;
  user?: User;
  bot?: ChatBot;
  is_admin: boolean;
  last_read_at?: string;
}

interface ChatMessage {
  id: number;
  content: string;
  sender?: User;
  bot?: ChatBot;
  created_at: string;
  is_edited: boolean;
}

interface User {
  id: number;
  username: string;
  first_name: string;
  last_name: string;
  avatar_url: string | null;
  department_id: number | null;
}

interface Department {
  id: number;
  name: string;
  description: string | null;
  head_id: number | null;
  is_active: boolean;
}

interface ChatBot {
  id: number;
  name: string;
  description: string | null;
  is_active: boolean;
}

interface ChatFolder {
  id: number;
  name: string;
  order_index: number;
  created_at: string;
  updated_at?: string;
}

interface ChatRoomFolder {
  id: number;
  folder_id: number;
  room_id: number;
  created_at: string;
}

const ChatPage = () => {
  const { user, token, isLoading } = useAuth();
  const router = useRouter();
  const [rooms, setRooms] = useState<ChatRoomListItem[]>([]);
  const [selectedRoom, setSelectedRoom] = useState<ChatRoom | null>(null);
  const [message, setMessage] = useState('');
  const [ws, setWs] = useState<typeof WebSocket | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isParticipantsModalOpen, setIsParticipantsModalOpen] = useState(false);
  const [isFoldersModalOpen, setIsFoldersModalOpen] = useState(false);
  const [folders, setFolders] = useState<ChatFolder[]>([]);
  const [selectedFolder, setSelectedFolder] = useState<ChatFolder | null>(null);
  const [users, setUsers] = useState<User[]>([]);
  const [unreadSummary, setUnreadSummary] = useState<{[key: number]: number}>({});



  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (isLoading || !user) {
    return (
      <PageLayout title="–†–∞–±–æ—á–∏–π —á–∞—Ç">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="text-gray-600 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</p>
          </div>
        </div>
      </PageLayout>
    );
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞–ø–æ–∫
  useEffect(() => {
    const fetchData = async () => {
      if (!token) return;

      try {
        const [roomsResponse, usersResponse, foldersResponse, unreadResponse] = await Promise.all([
          fetch(`${getApiUrl()}/api/v1/chat/rooms/`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          }),
          fetch(`${getApiUrl()}/api/v1/users/chat-users`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          }),
          fetch(`${getApiUrl()}/api/v1/chat/folders/`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          }),
          fetch(`${getApiUrl()}/api/v1/chat/unread-summary`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          })
        ]);

        if (roomsResponse.ok) {
          const roomsData = await roomsResponse.json();
          console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:', roomsData);
          console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤:', roomsData.length);
          setRooms(roomsData);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', roomsResponse.status, roomsResponse.statusText);
        }

        if (usersResponse.ok) {
          const usersData = await usersResponse.json();
          setUsers(usersData);
        } else {
          console.error('Error fetching users:', usersResponse.status);
        }

        if (foldersResponse.ok) {
          const foldersData = await foldersResponse.json();
          console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:', foldersData);
          setFolders(foldersData);
        } else {
          console.error('Error fetching folders:', foldersResponse.status);
        }

        if (unreadResponse.ok) {
          const unreadData = await unreadResponse.json();
          console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', unreadData);
          const unreadMap: {[key: number]: number} = {};
          unreadData.unread_summary.forEach((item: any) => {
            unreadMap[item.room_id] = item.unread_count;
          });
          setUnreadSummary(unreadMap);
        } else {
          console.error('Error fetching unread summary:', unreadResponse.status);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(fetchData, 30000);
    return () => clearInterval(interval);
  }, [token]);

  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  useEffect(() => {
    if (selectedRoom && token && selectedRoom.id) {
      try {
        console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è —á–∞—Ç–∞ ${selectedRoom.id}`);
        const ws = new WebSocket(`${getWsUrl()}/api/v1/chat/ws/${selectedRoom.id}?token=${token}`);
        
        ws.onopen = () => {
          console.log(`‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É ${selectedRoom.id}`);
        };

        ws.onmessage = (event: any) => {
          try {
            const data = JSON.parse(event.data);
            console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', data);
            
            if (data.type === 'message') {
              // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
              setSelectedRoom(prev => {
                if (!prev) return null;
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID (–±—ã—Å—Ç—Ä–µ–µ)
                const messageExists = prev.messages.some(msg => msg.id === data.data.id);
                if (messageExists) {
                  console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', data.data.id);
                  return prev;
                }
                
                console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.data);
                return {
                  ...prev,
                  messages: [...prev.messages, data.data]
                };
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
              setTimeout(() => updateAllUnreadCounts(), 0);
              
              // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
              requestAnimationFrame(() => {
                const messagesContainer = (window as any).document.querySelector('.messages-container') as any;
                if (messagesContainer) {
                  messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }
              });
              
            } else if (data.type === 'system_message') {
              console.log('üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', data.data);
              
              setSelectedRoom(prev => {
                if (!prev) return null;
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID
                const messageExists = prev.messages.some(msg => msg.id === data.data.id);
                if (messageExists) {
                  console.log('üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', data.data.id);
                  return prev;
                }
                
                console.log('üì¢ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.data);
                return {
                  ...prev,
                  messages: [...prev.messages, data.data]
                };
              });
              
              // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
              requestAnimationFrame(() => {
                const messagesContainer = (window as any).document.querySelector('.messages-container') as any;
                if (messagesContainer) {
                  messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }
              });
            } else if (data.type === 'notification') {
              console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', data);
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
              setTimeout(() => updateAllUnreadCounts(), 0);
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          }
        };

        ws.onerror = (error: any) => {
          console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        };

        ws.onclose = (event: any) => {
          console.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —á–∞—Ç–∞ ${selectedRoom.id}:`, event.code, event.reason);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if (event.code !== 1000) { // 1000 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
            setTimeout(() => {
              if (selectedRoom && token) {
                // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º useEffect
              }
            }, 3000);
          }
        };

        setWs(ws as any);

        return () => {
          if (ws.readyState === WebSocket.OPEN) {
            console.log(`üîå –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket –¥–ª—è —á–∞—Ç–∞ ${selectedRoom.id}`);
            ws.close(1000, 'Component unmount');
          }
        };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      }
    }
  }, [selectedRoom?.id, token]);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    (messagesEndRef.current as any)?.scrollIntoView({ behavior: 'smooth' });
  }, [selectedRoom?.messages]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const updateUnreadCount = async (roomId: number) => {
    if (!token) return;
    
    try {
      const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/${roomId}/unread-count`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.status >= 200 && response.status < 300) {
        const data = await response.json();
        setUnreadSummary(prev => ({
          ...prev,
          [roomId]: data.unread_count
        }));
      }
    } catch (error) {
      console.error('Error updating unread count:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const updateAllUnreadCounts = useCallback(async () => {
    if (!token || !rooms || !Array.isArray(rooms)) return;
    
    try {
      const response: any = await fetch(`${getApiUrl()}/api/v1/chat/unread-summary`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.status >= 200 && response.status < 300) {
        const data = await response.json();
        setUnreadSummary(data);
      }
    } catch (error) {
      console.error('Error updating all unread counts:', error);
    }
  }, [token, rooms]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ
  const getFolderUnreadCount = (folderId: number) => {
    if (!rooms || !Array.isArray(rooms) || !unreadSummary) return 0;
    
    const folderRooms = rooms.filter(room => 
      room.folders && room.folders.some(f => f.folder_id === folderId)
    );
    
    return folderRooms.reduce((total, room) => {
      return total + (unreadSummary[room.id] || 0);
    }, 0);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const markMessagesAsRead = async (roomId: number) => {
    if (!token) return;
    
    try {
      await fetch(`${getApiUrl()}/api/v1/chat/rooms/${roomId}/mark-read`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      setUnreadSummary(prev => ({
        ...prev,
        [roomId]: 0
      }));
    } catch (error) {
      console.error('Error marking messages as read:', error);
    }
  };

  const handleRoomSelect = async (room: ChatRoomListItem) => {
    try {
      console.log('–í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç:', room);
      const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/${room.id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      if (response.status >= 200 && response.status < 300) {
        const data = await response.json();
        console.log('–î–µ—Ç–∞–ª–∏ —á–∞—Ç–∞:', data);
        setSelectedRoom(data);
        
        // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
        markMessagesAsRead(room.id);
      } else {
        console.error('Error fetching room details:', response.status);
        const errorData = await response.json();
        console.error('Error details:', errorData);
      }
    } catch (error) {
      console.error('Error fetching room details:', error);
    }
  };

  const handleSendMessage = async () => {
    if (!message.trim() || !selectedRoom) return;

    const messageContent = message.trim();
    setMessage(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Ä–∞–∑—É

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const tempMessage: ChatMessage = {
      id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
      content: messageContent,
      sender: user ? {
        id: user.id,
        username: user.username,
        first_name: user.first_name,
        last_name: user.last_name,
        avatar_url: user.avatar_url || null,
        department_id: user.department_id || null
      } : undefined,
      created_at: new Date().toISOString(),
      is_edited: false
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', messageContent);

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    setSelectedRoom(prev => {
      if (!prev) return null;
      return {
        ...prev,
        messages: [...prev.messages, tempMessage]
      };
    });

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
    requestAnimationFrame(() => {
      const messagesContainer = (window as any).document.querySelector('.messages-container') as any;
      if (messagesContainer) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    if (ws && (ws as any).readyState === WebSocket.OPEN) {
      try {
        (ws as any).send(JSON.stringify({
          type: 'message',
          content: messageContent
        }));
        console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WebSocket:', error);
        // Fallback –Ω–∞ HTTP API
        sendMessageViaHTTP(messageContent, tempMessage);
      }
    } else {
      console.log('üì§ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP API');
      // Fallback –Ω–∞ HTTP API –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      sendMessageViaHTTP(messageContent, tempMessage);
    }
  };

  const sendMessageViaHTTP = async (messageContent: string, tempMessage?: ChatMessage) => {
    if (!selectedRoom) return;
    
    // –ï—Å–ª–∏ tempMessage –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!tempMessage) {
      tempMessage = {
        id: Date.now(),
        content: messageContent,
        sender: user ? {
          id: user.id,
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name,
          avatar_url: user.avatar_url || null,
          department_id: user.department_id || null
        } : undefined,
        created_at: new Date().toISOString(),
        is_edited: false
      };
    }
    
    try {
      const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/${selectedRoom.id}/messages/`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ content: messageContent })
      });

      if (response.status >= 200 && response.status < 300) {
        const newMessage = await response.json();
        console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ HTTP API');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        setTimeout(() => updateAllUnreadCounts(), 0);
        
        console.log('üì§ HTTP API: –∑–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ:', newMessage.id);
        
        // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
        if (tempMessage && tempMessage.id) {
          setSelectedRoom(prev => {
            if (!prev) return null;
            return {
              ...prev,
              messages: prev.messages.map(msg => 
                msg.id === tempMessage!.id ? newMessage : msg
              )
            };
          });
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', response.status);
        console.log('‚ùå HTTP API: —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ');
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (tempMessage && tempMessage.id) {
          setSelectedRoom(prev => {
            if (!prev) return null;
            return {
              ...prev,
              messages: prev.messages.filter(msg => msg.id !== tempMessage!.id)
            };
          });
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      console.log('‚ùå HTTP API: —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏');
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (tempMessage && tempMessage.id) {
        setSelectedRoom(prev => {
          if (!prev) return null;
          return {
            ...prev,
            messages: prev.messages.filter(msg => msg.id !== tempMessage!.id)
          };
        });
      }
    }
  };

  const handleLeaveRoom = async () => {
    if (!selectedRoom) return;

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –±–µ—Å–µ–¥—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }

    try {
      console.log(`üö™ –ü–æ–∫–∏–¥–∞–µ–º —á–∞—Ç ${selectedRoom.id}...`);
      
      const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/${selectedRoom.id}/leave`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.status >= 200 && response.status < 300) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (ws) {
          console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
          (ws as any).close(1000, 'User left the room');
          setWs(null);
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞
        setRooms(prev => prev.filter(room => room.id !== selectedRoom.id));
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        setSelectedRoom(null);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã—Ö–æ–¥–µ
        alert('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –±–µ—Å–µ–¥—É');
        
      } else {
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        try {
          const errorData = await response.json();
          if (errorData.detail) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ detail —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
            if (typeof errorData.detail === 'string') {
              errorMessage = errorData.detail;
            } else if (typeof errorData.detail === 'object') {
              // –ï—Å–ª–∏ detail - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ
              errorMessage = errorData.detail.message || errorData.detail.detail || JSON.stringify(errorData.detail);
            } else {
              errorMessage = String(errorData.detail);
            }
          }
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:', parseError);
          errorMessage = `–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`;
        }
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞:', response.status, errorMessage);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–µ—Å–µ–¥—ã: ${errorMessage}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–µ—Å–µ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit',
      year: '2-digit'
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const renderUserAvatar = (user: User, size: string = "w-10 h-10") => {
    if (user.avatar_url) {
      return (
        <img
          src={`${getApiUrl()}/uploads/${user.avatar_url}`}
          alt={`${user.first_name} ${user.last_name}`}
          className={`${size} rounded-full object-cover`}
          onError={(e) => {
            console.log('Avatar load error:', user.avatar_url);
            e.currentTarget.style.display = 'none';
          }}
        />
      );
    } else {
      return (
        <div className={`${size} rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center`}>
          <span className="text-sm font-medium text-gray-600 dark:text-gray-300">
            {user.first_name[0]}
            {user.last_name[0]}
          </span>
        </div>
      );
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞
  const renderBotAvatar = (bot: ChatBot, size: string = "w-10 h-10") => {
    return (
      <div className={`${size} rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center`}>
        <span className="text-sm font-medium text-blue-600 dark:text-blue-400">
          ü§ñ
        </span>
      </div>
    );
  };

  const handleOpenParticipantsModal = async () => {
    if (!selectedRoom) return;
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª–∞
    try {
      const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/${selectedRoom.id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.status >= 200 && response.status < 300) {
        const roomData = await response.json();
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞:', roomData);
        console.log('–£—á–∞—Å—Ç–Ω–∏–∫–∏:', roomData.participants);
        setSelectedRoom(roomData);
        setIsParticipantsModalOpen(true);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:', response.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:', error);
    }
  };

  return (
    <PageLayout title="–†–∞–±–æ—á–∏–π —á–∞—Ç">
      <div className="flex h-[calc(100vh-64px)]">
        {/* –°–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ */}
        <div className="w-1/4 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto">
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">–†–∞–±–æ—á–∏–π —á–∞—Ç</h2>
              <button
                onClick={() => setIsCreateModalOpen(true)}
                className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
            </div>
          </div>
          {/* –ü–∞–ø–∫–∏ */}
          <div className="divide-y divide-gray-200 dark:divide-gray-700">
            {folders && Array.isArray(folders) && folders.length > 0 ? folders.map(folder => (
              <div key={folder.id}>
                <div
                  className={`p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 ${selectedFolder?.id === folder.id ? 'bg-gray-100 dark:bg-gray-700' : ''}`}
                  onClick={() => setSelectedFolder(selectedFolder?.id === folder.id ? null : folder)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <span className="text-lg mr-2">üìÅ</span>
                      <h3 className="font-medium text-gray-900 dark:text-gray-100">{folder.name}</h3>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        {rooms && Array.isArray(rooms) ? rooms.filter(room => room.folders && room.folders.some(f => f.folder_id === folder.id)).length : 0} —á–∞—Ç–æ–≤
                      </span>
                      {getFolderUnreadCount(folder.id) > 0 && (
                        <div className="bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                          {getFolderUnreadCount(folder.id)}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
                {selectedFolder?.id === folder.id && (
                  <div className="pl-8 divide-y divide-gray-200 dark:divide-gray-700">
                    {rooms && Array.isArray(rooms) && rooms.length > 0 ? rooms
                      .filter(room => room.folders && room.folders.some(f => f.folder_id === folder.id))
                      .map(room => (
                        <div
                          key={room.id}
                          className={`p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 ${selectedRoom?.id === room.id ? 'bg-gray-100 dark:bg-gray-700' : ''}`}
                          onClick={() => handleRoomSelect(room)}
                        >
                          <div className="flex items-center justify-between">
                            <div>
                              <h3 className="font-medium text-gray-900 dark:text-gray-100">{room.name}</h3>
                              <p className="text-sm text-gray-500 dark:text-gray-400">
                                –ë–µ—Å–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ {room.created_at ? new Date(room.created_at).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                              </p>
                            </div>
                            {unreadSummary[room.id] && unreadSummary[room.id] > 0 && (
                              <div className="bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                                {unreadSummary[room.id]}
                              </div>
                            )}
                          </div>
                        </div>
                      ))
                    : (
                      <div className="p-4 text-center text-gray-500 dark:text-gray-400">
                        <p>–ù–µ—Ç —á–∞—Ç–æ–≤ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ</p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )) : (
              <div className="p-4 text-center text-gray-500 dark:text-gray-400">
                <p>–ù–µ—Ç –ø–∞–ø–æ–∫</p>
              </div>
            )}
          </div>

          {/* –ß–∞—Ç—ã –±–µ–∑ –ø–∞–ø–æ–∫ */}
          <div className="mt-4">
            <h3 className="px-4 py-2 text-sm font-medium text-gray-500 dark:text-gray-400">–ß–∞—Ç—ã –±–µ–∑ –ø–∞–ø–∫–∏</h3>
            <div className="divide-y divide-gray-200 dark:divide-gray-700">
              {rooms && Array.isArray(rooms) && rooms.length > 0 ? rooms
                .filter(room => !room.folders || !room.folders.length)
                .map(room => (
                  <div
                    key={room.id}
                    className={`p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 ${selectedRoom?.id === room.id ? 'bg-gray-100 dark:bg-gray-700' : ''}`}
                    onClick={() => handleRoomSelect(room)}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-medium text-gray-900 dark:text-gray-100">{room.name}</h3>
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                          –ë–µ—Å–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ {room.created_at ? new Date(room.created_at).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                        </p>
                      </div>
                      {unreadSummary[room.id] && unreadSummary[room.id] > 0 && (
                        <div className="bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                          {unreadSummary[room.id]}
                        </div>
                      )}
                    </div>
                  </div>
                ))
              : (
                <div className="p-4 text-center text-gray-500 dark:text-gray-400">
                  <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
        <div className="flex-1 flex flex-col bg-gray-50 dark:bg-gray-900">
          {selectedRoom ? (
            <React.Fragment key={selectedRoom.id}>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ—Å–µ–¥—ã */}
              <div className="p-4 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">{selectedRoom.name}</h2>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={handleOpenParticipantsModal}
                      className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
                    >
                      –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({selectedRoom.participants && Array.isArray(selectedRoom.participants) ? selectedRoom.participants.length : 0})
                    </button>
                    <button
                      onClick={() => setIsFoldersModalOpen(true)}
                      className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"
                    >
                      –í –ø–∞–ø–∫—É
                    </button>
                    <button
                      onClick={handleLeaveRoom}
                      className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm"
                    >
                      –ü–æ–∫–∏–Ω—É—Ç—å –±–µ—Å–µ–¥—É
                    </button>
                  </div>
                </div>
              </div>

              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="flex-1 overflow-y-auto p-4">
                <div className="space-y-4">
                  {selectedRoom.messages && Array.isArray(selectedRoom.messages) && selectedRoom.messages.length > 0 ? selectedRoom.messages.map(message => (
                    <div
                      key={message.id}
                      className={`flex ${message.sender?.id === user?.id ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`flex ${message.sender?.id === user?.id ? 'flex-row-reverse' : 'flex-row'} items-start space-x-2`}>
                        <div className={`flex-shrink-0 ${message.sender?.id === user?.id ? 'ml-2' : 'mr-2'}`}>
                          {message.sender ? (
                            renderUserAvatar(message.sender)
                          ) : message.bot ? (
                            renderBotAvatar(message.bot)
                          ) : (
                            <div className="w-10 h-10 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center">
                              <span className="text-sm font-medium text-gray-600 dark:text-gray-300">
                                ?
                              </span>
                            </div>
                          )}
                        </div>
                        <div className={`max-w-md ${
                          message.sender?.id === user?.id 
                            ? 'bg-blue-500 text-white' 
                            : message.bot 
                              ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-900 dark:text-blue-100' 
                              : (!message.sender && !message.bot)
                                ? 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                                : 'bg-white dark:bg-gray-800'
                        } rounded-lg p-3 shadow`}>
                          <div className="flex items-center space-x-2">
                            <span className="font-medium">
                              {message.sender 
                                ? `${message.sender.first_name} ${message.sender.last_name}`
                                : message.bot?.name || (!message.sender && !message.bot ? '–°–∏—Å—Ç–µ–º–∞' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
                              }
                            </span>
                            <span className="text-xs opacity-75">
                              {formatDate(message.created_at)}
                            </span>
                          </div>
                          <p className="mt-1">{message.content}</p>
                          {message.is_edited && (
                            <span className="text-xs opacity-75 italic">–∏–∑–º–µ–Ω–µ–Ω–æ</span>
                          )}
                        </div>
                      </div>
                    </div>
                  )) : (
                    <div className="text-center text-gray-500 dark:text-gray-400 py-8">
                      <p>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ</p>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
              </div>

              {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
              <div className="p-4 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
                <div className="flex space-x-4">
                  <input
                    type="text"
                    value={message}
                    onChange={(e: any) => setMessage(e.target.value)}
                    onKeyPress={(e: any) => e.key === 'Enter' && handleSendMessage()}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400"
                  />
                  <button
                    onClick={handleSendMessage}
                    className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                  </button>
                </div>
              </div>
            </React.Fragment>
          ) : (
            <div className="flex-1 flex items-center justify-center">
              <p className="text-gray-500 dark:text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ –±–µ—Å–µ–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</p>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–µ–¥—ã */}
      <CreateChatRoomModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onRoomCreated={async () => {
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞');
          try {
            const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤:', response.status);
            if (response.status >= 200 && response.status < 300) {
              const data = await response.json();
              console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:', data);
              setRooms(data);
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
              updateAllUnreadCounts();
            } else {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', response.status, response.statusText);
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', error);
          }
        }}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ */}
      {selectedRoom && (
        <ChatParticipantsModal
          isOpen={isParticipantsModalOpen}
          onClose={() => setIsParticipantsModalOpen(false)}
          roomId={selectedRoom.id}
          participants={selectedRoom.participants}
          onParticipantsUpdated={async () => {
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
            try {
              const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/${selectedRoom.id}`, {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              if (response.status >= 200 && response.status < 300) {
                const data = await response.json();
                setSelectedRoom(data);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                updateAllUnreadCounts();
              }
            } catch (error) {
              console.error('Error refreshing room:', error);
            }
          }}
          isAdmin={selectedRoom.participants && Array.isArray(selectedRoom.participants) && selectedRoom.participants.length > 0 ? selectedRoom.participants.some(p => p.user?.id === user?.id && p.is_admin) : false}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏ */}
      {selectedRoom && (
        <ChatFoldersModal
          isOpen={isFoldersModalOpen}
          onClose={() => setIsFoldersModalOpen(false)}
          roomId={selectedRoom.id}
          onFolderSelected={async (folderId: any) => {
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥
            try {
              const response: any = await fetch(`${getApiUrl()}/api/v1/chat/rooms/`, {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              if (response.status >= 200 && response.status < 300) {
                const data = await response.json();
                setRooms(data);
              }
            } catch (error) {
              console.error('Error refreshing rooms:', error);
            }
          }}
        />
      )}
    </PageLayout>
  );
};

export default ChatPage;