#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API —á–∞—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""
import asyncio
import httpx
import json

async def test_chat_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–∞—Ç–æ–≤"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ß–ê–¢–û–í")
    print("=" * 50)

    base_url = "http://localhost"

    async with httpx.AsyncClient(timeout=10.0) as client:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
            print("üìä 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
            response = await client.get(f"{base_url}/api/health")
            if response.status_code == 200:
                print("‚úÖ API –∑–¥–æ—Ä–æ–≤—å–µ: OK")
            else:
                print(f"‚ùå API –∑–¥–æ—Ä–æ–≤—å–µ: {response.status_code}")
                return

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            print("\nüîê 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            auth_response = await client.post(
                f"{base_url}/api/auth/login",
                json={"username": "admin", "password": "admin123"},
                timeout=10.0
            )

            if auth_response.status_code == 200:
                auth_data = auth_response.json()
                token = auth_data.get("access_token")
                user = auth_data.get("user")
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {user['username']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {auth_response.text}")
                return

            headers = {"Authorization": f"Bearer {token}"}

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\nüë• 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            users_response = await client.get(
                f"{base_url}/api/users/list",
                headers=headers,
                timeout=10.0
            )

            users = []
            if users_response.status_code == 200:
                users = users_response.json()
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                if users:
                    print(f"   –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users[0]['username']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {users_response.text}")

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
            print("\nüè¢ 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤...")
            depts_response = await client.get(
                f"{base_url}/api/departments/list",
                headers=headers,
                timeout=10.0
            )

            if depts_response.status_code == 200:
                departments = depts_response.json()
                print(f"‚úÖ –û—Ç–¥–µ–ª—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(departments)} –æ—Ç–¥–µ–ª–æ–≤")
                if departments:
                    print(f"   –ü–µ—Ä–≤—ã–π –æ—Ç–¥–µ–ª: {departments[0]['name']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤: {depts_response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {depts_response.text}")

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            print("\nüí¨ 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
            chats_response = await client.get(
                f"{base_url}/api/chat/rooms/",
                headers=headers,
                timeout=10.0
            )

            if chats_response.status_code == 200:
                chats = chats_response.json()
                print(f"‚úÖ –ß–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(chats)} —á–∞—Ç–æ–≤")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {chats_response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {chats_response.text}")

            # 6. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç
            print("\nüí¨ 6. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞...")
            if len(users) > 1:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
                participants = []
                for user in users[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if user['id'] != user['id']:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        participants.append(user['id'])
                    if len(participants) >= 1:  # –ú–∏–Ω–∏–º—É–º 1 —É—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
                        break

                chat_data = {
                    "name": "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç API",
                    "description": "–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç",
                    "is_private": False,
                    "participants": participants,
                    "bots": []
                }

                create_response = await client.post(
                    f"{base_url}/api/chat/rooms/",
                    json=chat_data,
                    headers=headers,
                    timeout=15.0
                )

                if create_response.status_code == 200:
                    chat = create_response.json()
                    print(f"‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω: {chat['name']}")
                    print(f"   ID: {chat['id']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {create_response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {create_response.text}")
            else:
                print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()

    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    asyncio.run(test_chat_api())
