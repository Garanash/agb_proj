#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    docker-compose -f docker-compose.prod.yml ps
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local all_healthy=true
    
    # PostgreSQL
    if docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -U felix_prod_user -d agb_felix_prod > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL: OK"
    else
        echo "‚ùå PostgreSQL: FAILED"
        all_healthy=false
    fi
    
    # Backend
    if curl -f http://localhost/api/health > /dev/null 2>&1; then
        echo "‚úÖ Backend: OK"
    else
        echo "‚ùå Backend: FAILED"
        all_healthy=false
    fi
    
    # Frontend
    if curl -f http://localhost/ > /dev/null 2>&1; then
        echo "‚úÖ Frontend: OK"
    else
        echo "‚ùå Frontend: FAILED"
        all_healthy=false
    fi
    
    # Nginx
    if curl -f http://localhost/health > /dev/null 2>&1; then
        echo "‚úÖ Nginx: OK"
    else
        echo "‚ùå Nginx: FAILED"
        all_healthy=false
    fi
    
    if [ "$all_healthy" = true ]; then
        log "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ"
        return 0
    else
        error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç ‚ùå"
        return 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    local service="${1:-}"
    
    if [ -n "$service" ]; then
        log "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞: $service"
        docker-compose -f docker-compose.prod.yml logs -f "$service"
    else
        log "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        docker-compose -f docker-compose.prod.yml logs -f
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
show_resources() {
    log "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker..."
    
    echo ""
    echo "üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
    
    echo ""
    echo "üíæ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:"
    docker system df
    
    echo ""
    echo "üóÇÔ∏è –¢–æ–º–∞:"
    docker volume ls
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
show_database_info() {
    log "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    echo ""
    echo "üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    docker-compose -f docker-compose.prod.yml exec -T postgres psql -U felix_prod_user -d agb_felix_prod -c "
        SELECT 
            pg_size_pretty(pg_database_size('agb_felix_prod')) as database_size;
    "
    
    echo ""
    echo "üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö:"
    docker-compose -f docker-compose.prod.yml exec -T postgres psql -U felix_prod_user -d agb_felix_prod -c "
        SELECT 
            'users' as table_name, count(*) as records FROM users
        UNION ALL
        SELECT 
            'ved_nomenclature' as table_name, count(*) as records FROM ved_nomenclature
        UNION ALL
        SELECT 
            'ved_passports' as table_name, count(*) as records FROM ved_passports
        UNION ALL
        SELECT 
            'repair_requests' as table_name, count(*) as records FROM repair_requests
        ORDER BY table_name;
    "
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
auto_monitor() {
    local interval="${1:-60}"
    
    log "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${interval}—Å)"
    log "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    
    while true; do
        clear
        echo "üîÑ AGB Production Monitor - $(date)"
        echo "=================================="
        
        check_health
        echo ""
        show_resources
        
        echo ""
        echo "‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ${interval} —Å–µ–∫—É–Ω–¥..."
        sleep "$interval"
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    echo "AGB Production Monitor"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  status     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  health     - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs [—Å–µ—Ä–≤–∏—Å] - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å)"
    echo "  resources  - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo "  database   - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    echo "  monitor [–∏–Ω—Ç–µ—Ä–≤–∞–ª] - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60—Å)"
    echo "  help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 health"
    echo "  $0 logs backend"
    echo "  $0 monitor 30"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-help}" in
        "status")
            check_containers
            ;;
        "health")
            check_health
            ;;
        "logs")
            show_logs "$2"
            ;;
        "resources")
            show_resources
            ;;
        "database")
            show_database_info
            ;;
        "monitor")
            auto_monitor "$2"
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

main "$@"
