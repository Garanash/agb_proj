#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ production.env
create_test_env() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ production.env..."
    
    cat > production.env << EOF
# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
POSTGRES_DB=agb_felix_test
POSTGRES_USER=felix_test_user
POSTGRES_PASSWORD=test_password_123
DATABASE_URL=postgresql+asyncpg://felix_test_user:test_password_123@postgres:5432/agb_felix_test

SECRET_KEY=test_secret_key_for_production_testing_2024_min_32_chars
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440
PYTHONWARNINGS=ignore:Unverified HTTPS request
AUTO_INIT_DATA=true

NEXT_PUBLIC_API_URL=http://localhost/api
NODE_ENV=production

NGINX_PORT=80
NGINX_SSL_PORT=443

ADMIN_USERNAME=admin
ADMIN_PASSWORD=test_admin_123
ADMIN_EMAIL=admin@test.local
ADMIN_FIRST_NAME=–¢–µ—Å—Ç–æ–≤—ã–π
ADMIN_LAST_NAME=–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

DOMAIN=localhost
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem

WATCHTOWER_CLEANUP=true
WATCHTOWER_POLL_INTERVAL=3600
EOF
    
    log "–¢–µ—Å—Ç–æ–≤—ã–π production.env —Å–æ–∑–¥–∞–Ω ‚úÖ"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
test_api_endpoints() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints..."
    
    local base_url="http://localhost/api"
    local endpoints=(
        "/health"
        "/auth/login"
        "/users/"
        "/ved-passports/nomenclature/"
    )
    
    for endpoint in "${endpoints[@]}"; do
        local url="$base_url$endpoint"
        if curl -f -s "$url" > /dev/null 2>&1; then
            echo "‚úÖ $endpoint - OK"
        else
            echo "‚ùå $endpoint - FAILED"
        fi
    done
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
test_database() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -U felix_test_user -d agb_felix_test > /dev/null 2>&1; then
        echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - OK"
    else
        echo "‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - FAILED"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    local tables=("users" "ved_nomenclature" "ved_passports" "departments")
    for table in "${tables[@]}"; do
        if docker-compose -f docker-compose.prod.yml exec -T postgres psql -U felix_test_user -d agb_felix_test -c "SELECT 1 FROM $table LIMIT 1;" > /dev/null 2>&1; then
            echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ $table - OK"
        else
            echo "‚ùå –¢–∞–±–ª–∏—Ü–∞ $table - FAILED"
        fi
    done
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
test_nomenclature() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã..."
    
    local count=$(docker-compose -f docker-compose.prod.yml exec -T postgres psql -U felix_test_user -d agb_felix_test -t -c "SELECT COUNT(*) FROM ved_nomenclature;" 2>/dev/null | tr -d ' ')
    
    if [ "$count" -gt 0 ]; then
        echo "‚úÖ –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $count –ø–æ–∑–∏—Ü–∏–π"
    else
        echo "‚ùå –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        return 1
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
test_users() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    
    local admin_count=$(docker-compose -f docker-compose.prod.yml exec -T postgres psql -U felix_test_user -d agb_felix_test -t -c "SELECT COUNT(*) FROM users WHERE username = 'admin';" 2>/dev/null | tr -d ' ')
    
    if [ "$admin_count" -gt 0 ]; then
        echo "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω"
    else
        echo "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω"
        return 1
    fi
}

# –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
full_test() {
    log "üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è production —Å–∏—Å—Ç–µ–º—ã"
    echo "=============================================="
    
    # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã (60 —Å–µ–∫—É–Ω–¥)..."
    sleep 60
    
    local all_tests_passed=true
    
    # –¢–µ—Å—Ç 1: Health checks
    log "–¢–µ—Å—Ç 1: Health checks"
    if ! ./monitor.sh health; then
        all_tests_passed=false
    fi
    echo ""
    
    # –¢–µ—Å—Ç 2: API endpoints
    log "–¢–µ—Å—Ç 2: API endpoints"
    test_api_endpoints
    echo ""
    
    # –¢–µ—Å—Ç 3: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    log "–¢–µ—Å—Ç 3: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    if ! test_database; then
        all_tests_passed=false
    fi
    echo ""
    
    # –¢–µ—Å—Ç 4: –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
    log "–¢–µ—Å—Ç 4: –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"
    if ! test_nomenclature; then
        all_tests_passed=false
    fi
    echo ""
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    log "–¢–µ—Å—Ç 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    if ! test_users; then
        all_tests_passed=false
    fi
    echo ""
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if [ "$all_tests_passed" = true ]; then
        log "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        log "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
        return 0
    else
        error "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
        error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ./monitor.sh logs"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
cleanup_test() {
    log "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose -f docker-compose.prod.yml down -v
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ env —Ñ–∞–π–ª–∞
    rm -f production.env
    
    # –û—á–∏—Å—Ç–∫–∞ Docker
    docker system prune -f
    
    log "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –æ—á–∏—â–µ–Ω–∞ ‚úÖ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-full}" in
        "env")
            create_test_env
            ;;
        "api")
            test_api_endpoints
            ;;
        "db")
            test_database
            ;;
        "nomenclature")
            test_nomenclature
            ;;
        "users")
            test_users
            ;;
        "full")
            create_test_env
            ./deploy.sh
            full_test
            ;;
        "cleanup")
            cleanup_test
            ;;
        "help"|*)
            echo "AGB Production Test Suite"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  env         - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π production.env"
            echo "  api         - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoints"
            echo "  db          - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            echo "  nomenclature - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É"
            echo "  users       - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            echo "  full        - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  cleanup     - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É"
            echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            ;;
    esac
}

main "$@"
