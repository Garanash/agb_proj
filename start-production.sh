#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./start-production.sh

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ AGB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ"
echo "============================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.production —Ñ–∞–π–ª–∞
if [ ! -f ".env.production" ]; then
    echo "‚ùå –§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.production —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
    exit 1
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export $(cat .env.production | grep -v '^#' | xargs)

echo "üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
echo "   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $POSTGRES_DB –Ω–∞ $POSTGRES_HOST:$POSTGRES_PORT"
echo "   - Backend: –ø–æ—Ä—Ç 8000"
echo "   - Frontend: –ø–æ—Ä—Ç 3000"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
if ! docker ps | grep -q "agb_postgres_local"; then
    echo "‚ùå PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f docker-compose.local.yml up -d"
    exit 1
fi

if ! docker ps | grep -q "agb_redis_local"; then
    echo "‚ùå Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f docker-compose.local.yml up -d"
    exit 1
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
pkill -f "python.*main.py" || true
pkill -f "next.*dev" || true
sleep 2

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –ó–∞–ø—É—Å–∫–∞–µ–º Backend
echo "üåê –ó–∞–ø—É—Å–∫ Backend —Å–µ—Ä–≤–µ—Ä–∞..."
cd backend
if [ ! -d "venv" ]; then
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    python3 -m venv venv
fi

source venv/bin/activate
pip install -r requirements.txt

echo "   Backend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 8000..."
python3 main.py > ../logs/backend.log 2>&1 &
BACKEND_PID=$!
cd ..

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Backend..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
if curl -f http://localhost:8000/api/health 2>/dev/null; then
    echo "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/backend.log"
    kill $BACKEND_PID 2>/dev/null || true
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Frontend
echo "üåê –ó–∞–ø—É—Å–∫ Frontend —Å–µ—Ä–≤–µ—Ä–∞..."
cd frontend
if [ ! -d "node_modules" ]; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
fi

echo "   Frontend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 3000..."
echo "   NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
npm run dev > ../logs/frontend.log 2>&1 &
FRONTEND_PID=$!
cd ..

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ frontend
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Frontend..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
if curl -f http://localhost:3000 2>/dev/null; then
    echo "‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ö†Ô∏è  Frontend –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/frontend.log"
fi

echo ""
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   - Frontend: http://localhost:3000"
echo "   - Backend API: http://localhost:8000/api"
echo "   - Health check: http://localhost:8000/api/health"
echo ""
echo "üìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
echo "   - Backend –ª–æ–≥–∏: tail -f logs/backend.log"
echo "   - Frontend –ª–æ–≥–∏: tail -f logs/frontend.log"
echo ""
echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:"
echo "   kill $BACKEND_PID $FRONTEND_PID"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
echo "$BACKEND_PID $FRONTEND_PID" > logs/pids.txt
echo "PID —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/pids.txt"
