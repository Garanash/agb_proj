#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ models
"""

import asyncio
import aiohttp
import json

async def test_direct_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫"""
    
    try:
        async with aiohttp.ClientSession() as session:
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫...")
            
            # –¢–µ—Å—Ç health check
            async with session.get("http://localhost:8000/api/v1/health") as response:
                print(f"‚úÖ Health check: {response.status}")
                data = await response.json()
                print(f"   –û—Ç–≤–µ—Ç: {data}")
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
            print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
            async with session.post(
                "http://localhost:8000/api/v1/search/",
                headers={"Content-Type": "application/json"},
                json={"search_text": "25241"}
            ) as response:
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                text = await response.text()
                print(f"   –û—Ç–≤–µ—Ç: {text}")
                
                if response.status == 200:
                    data = json.loads(text)
                    print(f"   ‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(data.get('matches', []))}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_direct_search())