#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —á–∞—Ç–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from database import get_db
from models import User, AIChatSession, AIChatMessage
from sqlalchemy import select
from sqlalchemy.orm import selectinload

async def test_chat_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —á–∞—Ç–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–∞—Ç–∞\n")
    
    async for db in get_db():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            result = await db.execute(select(User).limit(1))
            user = result.scalar_one_or_none()
            if not user:
                print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.username}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session = AIChatSession(
                user_id=user.id,
                title="–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è"
            )
            
            db.add(session)
            await db.flush()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = [
                AIChatMessage(
                    session_id=session.id,
                    message_type="user",
                    content="–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ —Å–º–∞–∑–∫—É –¥–ª—è –±—É—Ä–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                    files_data=None,
                    matching_results=None
                ),
                AIChatMessage(
                    session_id=session.id,
                    message_type="ai",
                    content="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–º–∞–∑–∫—É. –ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–º –Ω—É–∂–Ω—ã?",
                    files_data=None,
                    matching_results=None
                ),
                AIChatMessage(
                    session_id=session.id,
                    message_type="user",
                    content="–ù—É–∂–Ω–∞ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–º–∞–∑–∫–∞ –¥–ª—è –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞",
                    files_data=None,
                    matching_results=None
                ),
                AIChatMessage(
                    session_id=session.id,
                    message_type="ai",
                    content="–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–º–∞–∑–∫–∏ –¥–ª—è –∫–µ—Ä–Ω–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞:",
                    files_data=None,
                    matching_results='[{"id": "1", "contractor_article": "–û–•–ö–£-000184", "description": "–°–º–∞–∑–∫–∞ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è", "agb_article": "940006/2", "match_confidence": 90}]'
                )
            ]
            
            for message in messages:
                db.add(message)
            
            await db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            result = await db.execute(
                select(AIChatMessage)
                .where(AIChatMessage.session_id == session.id)
                .order_by(AIChatMessage.created_at)
            )
            saved_messages = result.scalars().all()
            
            print(f"üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(saved_messages)}")
            for msg in saved_messages:
                print(f"  ‚Ä¢ {msg.message_type}: {msg.content[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            result = await db.execute(
                select(AIChatSession)
                .where(AIChatSession.id == session.id)
                .options(selectinload(AIChatSession.messages))
            )
            session_with_messages = result.scalar_one_or_none()
            
            if session_with_messages:
                print(f"‚úÖ –°–µ—Å—Å–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(session_with_messages.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await db.close()
        break

if __name__ == "__main__":
    asyncio.run(test_chat_api())
