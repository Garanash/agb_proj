#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞—Ä—Ç–∏–∫—É–ª–∞–º
"""

import requests
import json

def test_existing_articles():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞—Ä—Ç–∏–∫—É–ª–∞–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞—Ä—Ç–∏–∫—É–ª–∞–º...")
    
    # –ê—Ä—Ç–∏–∫—É–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ
    test_articles = [
        "25241",      # BL –∞—Ä—Ç–∏–∫—É–ª
        "4535774",    # –ê–ì–ë –∞—Ä—Ç–∏–∫—É–ª
        "4509043",    # –ê–ì–ë –∞—Ä—Ç–∏–∫—É–ª
        "5010029"     # BL –∞—Ä—Ç–∏–∫—É–ª
    ]
    
    url = "http://localhost:8000/api/v1/article-matching/smart-search/"
    
    for article in test_articles:
        print(f"\nüîç –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞: '{article}'")
        
        test_data = {
            "search_text": article
        }
        
        try:
            response = requests.post(url, json=test_data)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"–¢–∏–ø –ø–æ–∏—Å–∫–∞: {result.get('search_type', 'unknown')}")
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(result.get('matches', []))}")
                
                for match in result.get('matches', []):
                    print(f"  ‚úÖ {match.get('agb_article', '')} | {match.get('bl_article', '')} | {match.get('name', '')} | {match.get('confidence', 0)}%")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

def test_search_by_description():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é...")
    
    test_descriptions = [
        "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –º—É—Ñ—Ç–∞",
        "–∫–æ–ª—å—Ü–æ –∫–µ—Ä–Ω–æ—Ä–≤–∞—Ç–µ–ª—å–Ω–æ–µ",
        "–±–æ–ª—Ç",
        "–≥–∞–π–∫–∞"
    ]
    
    url = "http://localhost:8000/api/v1/article-matching/smart-search/"
    
    for desc in test_descriptions:
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: '{desc}'")
        
        test_data = {
            "search_text": desc
        }
        
        try:
            response = requests.post(url, json=test_data)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"–¢–∏–ø –ø–æ–∏—Å–∫–∞: {result.get('search_type', 'unknown')}")
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(result.get('matches', []))}")
                
                for match in result.get('matches', []):
                    print(f"  ‚úÖ {match.get('agb_article', '')} | {match.get('bl_article', '')} | {match.get('name', '')} | {match.get('confidence', 0)}%")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

if __name__ == "__main__":
    test_existing_articles()
    test_search_by_description()
