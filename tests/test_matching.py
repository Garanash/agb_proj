#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from database import get_db
from api.v1.endpoints.article_matching import smart_search_with_ai, parse_item_string

async def test_matching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    
    test_strings = [
        "–û–•–ö–£-000184 –£–ë–† - –ö—É–Ω–¥—É–º–∏ –°–º–∞–∑–∫–∞ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è GRIZZLY (–≤–µ–¥—Ä–æ 17 –∫–≥.) 10 —à—Ç",
        "BL-123456 –°–º–∞–∑–∫–∞ –º–æ—Ç–æ—Ä–Ω–∞—è 5–ª",
        "123456 –°–º–∞–∑–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è",
        "–°–º–∞–∑–∫–∞ –∞–Ω—Ç–∏–≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è 15 —à—Ç",
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤\n")
    
    async for db in get_db():
        try:
            for i, test_string in enumerate(test_strings, 1):
                print(f"–¢–µ—Å—Ç {i}: {test_string}")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É
                parsed = parse_item_string(test_string)
                print(f"  –ü–∞—Ä—Å–∏–Ω–≥: –∞—Ä—Ç–∏–∫—É–ª='{parsed['article']}', –æ–ø–∏—Å–∞–Ω–∏–µ='{parsed['description']}', –∫–æ–ª-–≤–æ={parsed['quantity']} {parsed['unit']}")
                
                # –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                result = await smart_search_with_ai(test_string, db)
                print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result.get('search_type', 'unknown')}")
                print(f"  –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(result.get('matches', []))}")
                
                if result.get('matches'):
                    for j, match in enumerate(result['matches'][:3], 1):
                        print(f"    {j}. {match.get('agb_article', 'N/A')} | {match.get('name', 'N/A')} | {match.get('confidence', 0)}%")
                else:
                    print("    –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        finally:
            await db.close()
        break

if __name__ == "__main__":
    asyncio.run(test_matching())
